function initSideModalWrapper(t){var e=$('<div class="side-modal-overlay"><div class="side-modal '+t+'"><a href="#" class="side-modal-close" data-side-modal-close></a><div class="side-modal-overflow"></div></div></div>'),i=$("body").children(".side-modal-overlay");return i.length&&i.remove(),$("body").append(e),$("body").children(".side-modal-overlay")}function initSideModal(t,e,i,s){var n=initSideModalWrapper(e);n.find(".side-modal-overflow").html(t),n.find("[data-masked-input]").maskedinput(),n.find("[data-validate]").formValidation(),n.find("[data-form-ajax]").formAjax(),setTimeout(function(){n.addClass("active"),n.find("input").first().focus(),i||$(document).on("click","body",o),s||$(document).on("keyup",o)},200);var o=function(t){($(t.target).closest(".side-modal").length||$(t.target).is("input, label")||$(t.target).is("body"))&&27!==t.which||(n.removeClass("active"),$(document).off("click","body",o),s||$(document).off("keyup",o))};n.find("[data-side-modal-close]").click(function(){return i||$(document).off("click","body",o),s||$(document).off("keyup",o),n.removeClass("active"),!1})}!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){var i=(e=e||Y).createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function s(t){var e=!!t&&"length"in t&&t.length,i=at.type(t);return"function"!==i&&!at.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function n(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function o(t,e,i){return at.isFunction(e)?at.grep(t,function(t,s){return!!e.call(t,s,t)!==i}):e.nodeType?at.grep(t,function(t){return t===e!==i}):"string"!=typeof e?at.grep(t,function(t){return tt.call(e,t)>-1!==i}):vt.test(e)?at.filter(e,t,i):(e=at.filter(e,t),at.grep(t,function(t){return tt.call(e,t)>-1!==i&&1===t.nodeType}))}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){return t}function l(t){throw t}function c(t,e,i,s){var n;try{t&&at.isFunction(n=t.promise)?n.call(t).done(e).fail(i):t&&at.isFunction(n=t.then)?n.call(t,e,i):e.apply(void 0,[t].slice(s))}catch(t){i.apply(void 0,[t])}}function d(){Y.removeEventListener("DOMContentLoaded",d),t.removeEventListener("load",d),at.ready()}function h(){this.expando=at.expando+h.uid++}function u(t,e,i){var s;if(void 0===i&&1===t.nodeType)if(s="data-"+e.replace(Lt,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(s))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:jt.test(t)?JSON.parse(t):t)}(i)}catch(t){}Et.set(t,e,i)}else i=void 0;return i}function p(t,e,i,s){var n,o=1,r=20,a=s?function(){return s.cur()}:function(){return at.css(t,e,"")},l=a(),c=i&&i[3]||(at.cssNumber[e]?"":"px"),d=(at.cssNumber[e]||"px"!==c&&+l)&&Dt.exec(at.css(t,e));if(d&&d[3]!==c){c=c||d[3],i=i||[],d=+l||1;do{d/=o=o||".5",at.style(t,e,d+c)}while(o!==(o=a()/l)&&1!==o&&--r)}return i&&(d=+d||+l||0,n=i[1]?d+(i[1]+1)*i[2]:+i[2],s&&(s.unit=c,s.start=d,s.end=n)),n}function f(t){var e,i=t.ownerDocument,s=t.nodeName,n=Ht[s];return n||(e=i.body.appendChild(i.createElement(s)),n=at.css(e,"display"),e.parentNode.removeChild(e),"none"===n&&(n="block"),Ht[s]=n,n)}function m(t,e){for(var i,s,n=[],o=0,r=t.length;o<r;o++)(s=t[o]).style&&(i=s.style.display,e?("none"===i&&(n[o]=At.get(s,"display")||null,n[o]||(s.style.display="")),""===s.style.display&&Nt(s)&&(n[o]=f(s))):"none"!==i&&(n[o]="none",At.set(s,"display",i)));for(o=0;o<r;o++)null!=n[o]&&(t[o].style.display=n[o]);return t}function g(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&n(t,e)?at.merge([t],i):i}function v(t,e){for(var i=0,s=t.length;i<s;i++)At.set(t[i],"globalEval",!e||At.get(e[i],"globalEval"))}function y(t,e,i,s,n){for(var o,r,a,l,c,d,h=e.createDocumentFragment(),u=[],p=0,f=t.length;p<f;p++)if((o=t[p])||0===o)if("object"===at.type(o))at.merge(u,o.nodeType?[o]:o);else if(It.test(o)){for(r=r||h.appendChild(e.createElement("div")),a=(zt.exec(o)||["",""])[1].toLowerCase(),l=Rt[a]||Rt._default,r.innerHTML=l[1]+at.htmlPrefilter(o)+l[2],d=l[0];d--;)r=r.lastChild;at.merge(u,r.childNodes),(r=h.firstChild).textContent=""}else u.push(e.createTextNode(o));for(h.textContent="",p=0;o=u[p++];)if(s&&at.inArray(o,s)>-1)n&&n.push(o);else if(c=at.contains(o.ownerDocument,o),r=g(h.appendChild(o),"script"),c&&v(r),i)for(d=0;o=r[d++];)Ft.test(o.type||"")&&i.push(o);return h}function b(){return!0}function w(){return!1}function k(){try{return Y.activeElement}catch(t){}}function x(t,e,i,s,n,o){var r,a;if("object"==typeof e){"string"!=typeof i&&(s=s||i,i=void 0);for(a in e)x(t,a,i,s,e[a],o);return t}if(null==s&&null==n?(n=i,s=i=void 0):null==n&&("string"==typeof i?(n=s,s=void 0):(n=s,s=i,i=void 0)),!1===n)n=w;else if(!n)return t;return 1===o&&(r=n,(n=function(t){return at().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=at.guid++)),t.each(function(){at.event.add(this,e,n,s,i)})}function T(t,e){return n(t,"table")&&n(11!==e.nodeType?e:e.firstChild,"tr")?at(">tbody",t)[0]||t:t}function S(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function C(t){var e=Yt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function $(t,e){var i,s,n,o,r,a,l,c;if(1===e.nodeType){if(At.hasData(t)&&(o=At.access(t),r=At.set(e,o),c=o.events)){delete r.handle,r.events={};for(n in c)for(i=0,s=c[n].length;i<s;i++)at.event.add(e,n,c[n][i])}Et.hasData(t)&&(a=Et.access(t),l=at.extend({},a),Et.set(e,l))}}function A(t,e){var i=e.nodeName.toLowerCase();"input"===i&&qt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function E(t,e,s,n){e=J.apply([],e);var o,r,a,l,c,d,h=0,u=t.length,p=u-1,f=e[0],m=at.isFunction(f);if(m||u>1&&"string"==typeof f&&!rt.checkClone&&Gt.test(f))return t.each(function(i){var o=t.eq(i);m&&(e[0]=f.call(this,i,o.html())),E(o,e,s,n)});if(u&&(o=y(e,t[0].ownerDocument,!1,t,n),r=o.firstChild,1===o.childNodes.length&&(o=r),r||n)){for(l=(a=at.map(g(o,"script"),S)).length;h<u;h++)c=o,h!==p&&(c=at.clone(c,!0,!0),l&&at.merge(a,g(c,"script"))),s.call(t[h],c,h);if(l)for(d=a[a.length-1].ownerDocument,at.map(a,C),h=0;h<l;h++)c=a[h],Ft.test(c.type||"")&&!At.access(c,"globalEval")&&at.contains(d,c)&&(c.src?at._evalUrl&&at._evalUrl(c.src):i(c.textContent.replace(Qt,""),d))}return t}function j(t,e,i){for(var s,n=e?at.filter(e,t):t,o=0;null!=(s=n[o]);o++)i||1!==s.nodeType||at.cleanData(g(s)),s.parentNode&&(i&&at.contains(s.ownerDocument,s)&&v(g(s,"script")),s.parentNode.removeChild(s));return t}function L(t,e,i){var s,n,o,r,a=t.style;return(i=i||Zt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||at.contains(t.ownerDocument,t)||(r=at.style(t,e)),!rt.pixelMarginRight()&&Jt.test(r)&&Kt.test(e)&&(s=a.width,n=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=s,a.minWidth=n,a.maxWidth=o)),void 0!==r?r+"":r}function O(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function D(t){var e=at.cssProps[t];return e||(e=at.cssProps[t]=function(t){if(t in oe)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=ne.length;i--;)if((t=ne[i]+e)in oe)return t}(t)||t),e}function M(t,e,i){var s=Dt.exec(e);return s?Math.max(0,s[2]-(i||0))+(s[3]||"px"):e}function N(t,e,i,s,n){var o,r=0;for(o=i===(s?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===i&&(r+=at.css(t,i+Mt[o],!0,n)),s?("content"===i&&(r-=at.css(t,"padding"+Mt[o],!0,n)),"margin"!==i&&(r-=at.css(t,"border"+Mt[o]+"Width",!0,n))):(r+=at.css(t,"padding"+Mt[o],!0,n),"padding"!==i&&(r+=at.css(t,"border"+Mt[o]+"Width",!0,n)));return r}function P(t,e,i){var s,n=Zt(t),o=L(t,e,n),r="border-box"===at.css(t,"boxSizing",!1,n);return Jt.test(o)?o:(s=r&&(rt.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+N(t,e,i||(r?"border":"content"),s,n)+"px")}function H(t,e,i,s,n){return new H.prototype.init(t,e,i,s,n)}function q(){ae&&(!1===Y.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(q):t.setTimeout(q,at.fx.interval),at.fx.tick())}function z(){return t.setTimeout(function(){re=void 0}),re=at.now()}function F(t,e){var i,s=0,n={height:t};for(e=e?1:0;s<4;s+=2-e)n["margin"+(i=Mt[s])]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function R(t,e,i){for(var s,n=(I.tweeners[e]||[]).concat(I.tweeners["*"]),o=0,r=n.length;o<r;o++)if(s=n[o].call(i,e,t))return s}function I(t,e,i){var s,n,o=0,r=I.prefilters.length,a=at.Deferred().always(function(){delete l.elem}),l=function(){if(n)return!1;for(var e=re||z(),i=Math.max(0,c.startTime+c.duration-e),s=1-(i/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(s);return a.notifyWith(t,[c,s,i]),s<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:at.extend({},e),opts:at.extend(!0,{specialEasing:{},easing:at.easing._default},i),originalProperties:e,originalOptions:i,startTime:re||z(),duration:i.duration,tweens:[],createTween:function(e,i){var s=at.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(s),s},stop:function(e){var i=0,s=e?c.tweens.length:0;if(n)return this;for(n=!0;i<s;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),d=c.props;for(function(t,e){var i,s,n,o,r;for(i in t)if(s=at.camelCase(i),n=e[s],o=t[i],Array.isArray(o)&&(n=o[1],o=t[i]=o[0]),i!==s&&(t[s]=o,delete t[i]),(r=at.cssHooks[s])&&"expand"in r){o=r.expand(o),delete t[s];for(i in o)i in t||(t[i]=o[i],e[i]=n)}else e[s]=n}(d,c.opts.specialEasing);o<r;o++)if(s=I.prefilters[o].call(c,t,d,c.opts))return at.isFunction(s.stop)&&(at._queueHooks(c.elem,c.opts.queue).stop=at.proxy(s.stop,s)),s;return at.map(d,R,c),at.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),at.fx.timer(at.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}function W(t){return(t.match(xt)||[]).join(" ")}function B(t){return t.getAttribute&&t.getAttribute("class")||""}function _(t,e,i,s){var n;if(Array.isArray(e))at.each(e,function(e,n){i||be.test(t)?s(t,n):_(t+"["+("object"==typeof n&&null!=n?e:"")+"]",n,i,s)});else if(i||"object"!==at.type(e))s(t,e);else for(n in e)_(t+"["+n+"]",e[n],i,s)}function X(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var s,n=0,o=e.toLowerCase().match(xt)||[];if(at.isFunction(i))for(;s=o[n++];)"+"===s[0]?(s=s.slice(1)||"*",(t[s]=t[s]||[]).unshift(i)):(t[s]=t[s]||[]).push(i)}}function U(t,e,i,s){function n(a){var l;return o[a]=!0,at.each(t[a]||[],function(t,a){var c=a(e,i,s);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),n(c),!1)}),l}var o={},r=t===Le;return n(e.dataTypes[0])||!o["*"]&&n("*")}function V(t,e){var i,s,n=at.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((n[i]?t:s||(s={}))[i]=e[i]);return s&&at.extend(!0,t,s),t}var G=[],Y=t.document,Q=Object.getPrototypeOf,K=G.slice,J=G.concat,Z=G.push,tt=G.indexOf,et={},it=et.toString,st=et.hasOwnProperty,nt=st.toString,ot=nt.call(Object),rt={},at=function(t,e){return new at.fn.init(t,e)},lt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ct=/^-ms-/,dt=/-([a-z])/g,ht=function(t,e){return e.toUpperCase()};at.fn=at.prototype={jquery:"3.2.1",constructor:at,length:0,toArray:function(){return K.call(this)},get:function(t){return null==t?K.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=at.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return at.each(this,t)},map:function(t){return this.pushStack(at.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(K.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:Z,sort:G.sort,splice:G.splice},at.extend=at.fn.extend=function(){var t,e,i,s,n,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||at.isFunction(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=r[e],r!==(s=t[e])&&(c&&s&&(at.isPlainObject(s)||(n=Array.isArray(s)))?(n?(n=!1,o=i&&Array.isArray(i)?i:[]):o=i&&at.isPlainObject(i)?i:{},r[e]=at.extend(c,o,s)):void 0!==s&&(r[e]=s));return r},at.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===at.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=at.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==it.call(t))&&(!(e=Q(t))||"function"==typeof(i=st.call(e,"constructor")&&e.constructor)&&nt.call(i)===ot)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?et[it.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(ct,"ms-").replace(dt,ht)},each:function(t,e){var i,n=0;if(s(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},trim:function(t){return null==t?"":(t+"").replace(lt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(s(Object(t))?at.merge(i,"string"==typeof t?[t]:t):Z.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:tt.call(e,t,i)},merge:function(t,e){for(var i=+e.length,s=0,n=t.length;s<i;s++)t[n++]=e[s];return t.length=n,t},grep:function(t,e,i){for(var s=[],n=0,o=t.length,r=!i;n<o;n++)!e(t[n],n)!==r&&s.push(t[n]);return s},map:function(t,e,i){var n,o,r=0,a=[];if(s(t))for(n=t.length;r<n;r++)null!=(o=e(t[r],r,i))&&a.push(o);else for(r in t)null!=(o=e(t[r],r,i))&&a.push(o);return J.apply([],a)},guid:1,proxy:function(t,e){var i,s,n;if("string"==typeof e&&(i=t[e],e=t,t=i),at.isFunction(t))return s=K.call(arguments,2),n=function(){return t.apply(e||this,s.concat(K.call(arguments)))},n.guid=t.guid=t.guid||at.guid++,n},now:Date.now,support:rt}),"function"==typeof Symbol&&(at.fn[Symbol.iterator]=G[Symbol.iterator]),at.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){et["[object "+e+"]"]=e.toLowerCase()});var ut=function(t){function e(t,e,i,s){var n,o,r,a,l,c,d,u=e&&e.ownerDocument,f=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return i;if(!s&&((e?e.ownerDocument||e:F)!==O&&L(e),e=e||O,M)){if(11!==f&&(l=mt.exec(t)))if(n=l[1]){if(9===f){if(!(r=e.getElementById(n)))return i;if(r.id===n)return i.push(r),i}else if(u&&(r=u.getElementById(n))&&q(e,r)&&r.id===n)return i.push(r),i}else{if(l[2])return Q.apply(i,e.getElementsByTagName(t)),i;if((n=l[3])&&w.getElementsByClassName&&e.getElementsByClassName)return Q.apply(i,e.getElementsByClassName(n)),i}if(w.qsa&&!_[t+" "]&&(!N||!N.test(t))){if(1!==f)u=e,d=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(bt,wt):e.setAttribute("id",a=z),o=(c=S(t)).length;o--;)c[o]="#"+a+" "+p(c[o]);d=c.join(","),u=gt.test(t)&&h(e.parentNode)||e}if(d)try{return Q.apply(i,u.querySelectorAll(d)),i}catch(t){}finally{a===z&&e.removeAttribute("id")}}}return $(t.replace(ot,"$1"),e,i,s)}function i(){function t(i,s){return e.push(i+" ")>k.cacheLength&&delete t[e.shift()],t[i+" "]=s}var e=[];return t}function s(t){return t[z]=!0,t}function n(t){var e=O.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var i=t.split("|"),s=i.length;s--;)k.attrHandle[i[s]]=e}function r(t,e){var i=e&&t,s=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(s)return s;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&xt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function d(t){return s(function(e){return e=+e,s(function(i,s){for(var n,o=t([],i.length,e),r=o.length;r--;)i[n=o[r]]&&(i[n]=!(s[n]=i[n]))})})}function h(t){return t&&void 0!==t.getElementsByTagName&&t}function u(){}function p(t){for(var e=0,i=t.length,s="";e<i;e++)s+=t[e].value;return s}function f(t,e,i){var s=e.dir,n=e.next,o=n||s,r=i&&"parentNode"===o,a=I++;return e.first?function(e,i,n){for(;e=e[s];)if(1===e.nodeType||r)return t(e,i,n);return!1}:function(e,i,l){var c,d,h,u=[R,a];if(l){for(;e=e[s];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[s];)if(1===e.nodeType||r)if(h=e[z]||(e[z]={}),d=h[e.uniqueID]||(h[e.uniqueID]={}),n&&n===e.nodeName.toLowerCase())e=e[s]||e;else{if((c=d[o])&&c[0]===R&&c[1]===a)return u[2]=c[2];if(d[o]=u,u[2]=t(e,i,l))return!0}return!1}}function m(t){return t.length>1?function(e,i,s){for(var n=t.length;n--;)if(!t[n](e,i,s))return!1;return!0}:t[0]}function g(t,e,i,s,n){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,s,n)||(r.push(o),c&&e.push(a)));return r}function v(t,i,n,o,r,a){return o&&!o[z]&&(o=v(o)),r&&!r[z]&&(r=v(r,a)),s(function(s,a,l,c){var d,h,u,p=[],f=[],m=a.length,v=s||function(t,i,s){for(var n=0,o=i.length;n<o;n++)e(t,i[n],s);return s}(i||"*",l.nodeType?[l]:l,[]),y=!t||!s&&i?v:g(v,p,t,l,c),b=n?r||(s?t:m||o)?[]:a:y;if(n&&n(y,b,l,c),o)for(d=g(b,f),o(d,[],l,c),h=d.length;h--;)(u=d[h])&&(b[f[h]]=!(y[f[h]]=u));if(s){if(r||t){if(r){for(d=[],h=b.length;h--;)(u=b[h])&&d.push(y[h]=u);r(null,b=[],d,c)}for(h=b.length;h--;)(u=b[h])&&(d=r?J(s,u):p[h])>-1&&(s[d]=!(a[d]=u))}}else b=g(b===a?b.splice(m,b.length):b),r?r(null,a,b,c):Q.apply(a,b)})}function y(t){for(var e,i,s,n=t.length,o=k.relative[t[0].type],r=o||k.relative[" "],a=o?1:0,l=f(function(t){return t===e},r,!0),c=f(function(t){return J(e,t)>-1},r,!0),d=[function(t,i,s){var n=!o&&(s||i!==A)||((e=i).nodeType?l(t,i,s):c(t,i,s));return e=null,n}];a<n;a++)if(i=k.relative[t[a].type])d=[f(m(d),i)];else{if((i=k.filter[t[a].type].apply(null,t[a].matches))[z]){for(s=++a;s<n&&!k.relative[t[s].type];s++);return v(a>1&&m(d),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ot,"$1"),i,a<s&&y(t.slice(a,s)),s<n&&y(t=t.slice(s)),s<n&&p(t))}d.push(i)}return m(d)}var b,w,k,x,T,S,C,$,A,E,j,L,O,D,M,N,P,H,q,z="sizzle"+1*new Date,F=t.document,R=0,I=0,W=i(),B=i(),_=i(),X=function(t,e){return t===e&&(j=!0),0},U={}.hasOwnProperty,V=[],G=V.pop,Y=V.push,Q=V.push,K=V.slice,J=function(t,e){for(var i=0,s=t.length;i<s;i++)if(t[i]===e)return i;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",it="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",st=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",nt=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),rt=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(st),dt=new RegExp("^"+et+"$"),ht={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ut=/^(?:input|select|textarea|button)$/i,pt=/^h\d$/i,ft=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,gt=/[+~]/,vt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,i){var s="0x"+e-65536;return s!=s||i?e:s<0?String.fromCharCode(s+65536):String.fromCharCode(s>>10|55296,1023&s|56320)},bt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,wt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},kt=function(){L()},xt=f(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(V=K.call(F.childNodes),F.childNodes),V[F.childNodes.length].nodeType}catch(t){Q={apply:V.length?function(t,e){Y.apply(t,K.call(e))}:function(t,e){for(var i=t.length,s=0;t[i++]=e[s++];);t.length=i-1}}}w=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},L=e.setDocument=function(t){var e,i,s=t?t.ownerDocument||t:F;return s!==O&&9===s.nodeType&&s.documentElement?(O=s,D=O.documentElement,M=!T(O),F!==O&&(i=O.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",kt,!1):i.attachEvent&&i.attachEvent("onunload",kt)),w.attributes=n(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=n(function(t){return t.appendChild(O.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=ft.test(O.getElementsByClassName),w.getById=n(function(t){return D.appendChild(t).id=z,!O.getElementsByName||!O.getElementsByName(z).length}),w.getById?(k.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){return t.getAttribute("id")===e}},k.find.ID=function(t,e){if(void 0!==e.getElementById&&M){var i=e.getElementById(t);return i?[i]:[]}}):(k.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},k.find.ID=function(t,e){if(void 0!==e.getElementById&&M){var i,s,n,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(n=e.getElementsByName(t),s=0;o=n[s++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),k.find.TAG=w.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,s=[],n=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[n++];)1===i.nodeType&&s.push(i);return s}return o},k.find.CLASS=w.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&M)return e.getElementsByClassName(t)},P=[],N=[],(w.qsa=ft.test(O.querySelectorAll))&&(n(function(t){D.appendChild(t).innerHTML="<a id='"+z+"'></a><select id='"+z+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||N.push("\\["+tt+"*(?:value|"+Z+")"),t.querySelectorAll("[id~="+z+"-]").length||N.push("~="),t.querySelectorAll(":checked").length||N.push(":checked"),t.querySelectorAll("a#"+z+"+*").length||N.push(".#.+[+~]")}),n(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=O.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&N.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&N.push(":enabled",":disabled"),D.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&N.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),N.push(",.*:")})),(w.matchesSelector=ft.test(H=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&n(function(t){w.disconnectedMatch=H.call(t,"*"),H.call(t,"[s!='']:x"),P.push("!=",st)}),N=N.length&&new RegExp(N.join("|")),P=P.length&&new RegExp(P.join("|")),e=ft.test(D.compareDocumentPosition),q=e||ft.test(D.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,s=e&&e.parentNode;return t===s||!(!s||1!==s.nodeType||!(i.contains?i.contains(s):t.compareDocumentPosition&&16&t.compareDocumentPosition(s)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return j=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!w.sortDetached&&e.compareDocumentPosition(t)===i?t===O||t.ownerDocument===F&&q(F,t)?-1:e===O||e.ownerDocument===F&&q(F,e)?1:E?J(E,t)-J(E,e):0:4&i?-1:1)}:function(t,e){if(t===e)return j=!0,0;var i,s=0,n=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!n||!o)return t===O?-1:e===O?1:n?-1:o?1:E?J(E,t)-J(E,e):0;if(n===o)return r(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[s]===l[s];)s++;return s?r(a[s],l[s]):a[s]===F?-1:l[s]===F?1:0},O):O},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==O&&L(t),i=i.replace(lt,"='$1']"),w.matchesSelector&&M&&!_[i+" "]&&(!P||!P.test(i))&&(!N||!N.test(i)))try{var s=H.call(t,i);if(s||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return s}catch(t){}return e(i,O,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==O&&L(t),q(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==O&&L(t);var i=k.attrHandle[e.toLowerCase()],s=i&&U.call(k.attrHandle,e.toLowerCase())?i(t,e,!M):void 0;return void 0!==s?s:w.attributes||!M?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},e.escape=function(t){return(t+"").replace(bt,wt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],s=0,n=0;if(j=!w.detectDuplicates,E=!w.sortStable&&t.slice(0),t.sort(X),j){for(;e=t[n++];)e===t[n]&&(s=i.push(n));for(;s--;)t.splice(i[s],1)}return E=null,t},x=e.getText=function(t){var e,i="",s=0,n=t.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=x(t)}else if(3===n||4===n)return t.nodeValue}else for(;e=t[s++];)i+=x(e);return i},(k=e.selectors={cacheLength:50,createPseudo:s,match:ht,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(vt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(vt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return ht.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ct.test(i)&&(e=S(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(vt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,s){return function(n){var o=e.attr(n,t);return null==o?"!="===i:!i||(o+="","="===i?o===s:"!="===i?o!==s:"^="===i?s&&0===o.indexOf(s):"*="===i?s&&o.indexOf(s)>-1:"$="===i?s&&o.slice(-s.length)===s:"~="===i?(" "+o.replace(nt," ")+" ").indexOf(s)>-1:"|="===i&&(o===s||o.slice(0,s.length+1)===s+"-"))}},CHILD:function(t,e,i,s,n){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===s&&0===n?function(t){return!!t.parentNode}:function(e,i,l){var c,d,h,u,p,f,m=o!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;m;){for(u=e;u=u[m];)if(a?u.nodeName.toLowerCase()===v:1===u.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(b=(p=(c=(d=(h=(u=g)[z]||(u[z]={}))[u.uniqueID]||(h[u.uniqueID]={}))[t]||[])[0]===R&&c[1])&&c[2],u=p&&g.childNodes[p];u=++p&&u&&u[m]||(b=p=0)||f.pop();)if(1===u.nodeType&&++b&&u===e){d[t]=[R,p,b];break}}else if(y&&(b=p=(c=(d=(h=(u=e)[z]||(u[z]={}))[u.uniqueID]||(h[u.uniqueID]={}))[t]||[])[0]===R&&c[1]),!1===b)for(;(u=++p&&u&&u[m]||(b=p=0)||f.pop())&&((a?u.nodeName.toLowerCase()!==v:1!==u.nodeType)||!++b||(y&&((d=(h=u[z]||(u[z]={}))[u.uniqueID]||(h[u.uniqueID]={}))[t]=[R,b]),u!==e)););return(b-=n)===s||b%s==0&&b/s>=0}}},PSEUDO:function(t,i){var n,o=k.pseudos[t]||k.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[z]?o(i):o.length>1?(n=[t,t,"",i],k.setFilters.hasOwnProperty(t.toLowerCase())?s(function(t,e){for(var s,n=o(t,i),r=n.length;r--;)t[s=J(t,n[r])]=!(e[s]=n[r])}):function(t){return o(t,0,n)}):o}},pseudos:{not:s(function(t){var e=[],i=[],n=C(t.replace(ot,"$1"));return n[z]?s(function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))}):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}}),has:s(function(t){return function(i){return e(t,i).length>0}}),contains:s(function(t){return t=t.replace(vt,yt),function(e){return(e.textContent||e.innerText||x(e)).indexOf(t)>-1}}),lang:s(function(t){return dt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(vt,yt).toLowerCase(),function(e){var i;do{if(i=M?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===D},focus:function(t){return t===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!k.pseudos.empty(t)},header:function(t){return pt.test(t.nodeName)},input:function(t){return ut.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:d(function(){return[0]}),last:d(function(t,e){return[e-1]}),eq:d(function(t,e,i){return[i<0?i+e:i]}),even:d(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:d(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:d(function(t,e,i){for(var s=i<0?i+e:i;--s>=0;)t.push(s);return t}),gt:d(function(t,e,i){for(var s=i<0?i+e:i;++s<e;)t.push(s);return t})}}).pseudos.nth=k.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})k.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})k.pseudos[b]=l(b);return u.prototype=k.filters=k.pseudos,k.setFilters=new u,S=e.tokenize=function(t,i){var s,n,o,r,a,l,c,d=B[t+" "];if(d)return i?0:d.slice(0);for(a=t,l=[],c=k.preFilter;a;){s&&!(n=rt.exec(a))||(n&&(a=a.slice(n[0].length)||a),l.push(o=[])),s=!1,(n=at.exec(a))&&(s=n.shift(),o.push({value:s,type:n[0].replace(ot," ")}),a=a.slice(s.length));for(r in k.filter)!(n=ht[r].exec(a))||c[r]&&!(n=c[r](n))||(s=n.shift(),o.push({value:s,type:r,matches:n}),a=a.slice(s.length));if(!s)break}return i?a.length:a?e.error(t):B(t,l).slice(0)},C=e.compile=function(t,i){var n,o=[],r=[],a=_[t+" "];if(!a){for(i||(i=S(t)),n=i.length;n--;)(a=y(i[n]))[z]?o.push(a):r.push(a);(a=_(t,function(t,i){var n=i.length>0,o=t.length>0,r=function(s,r,a,l,c){var d,h,u,p=0,f="0",m=s&&[],v=[],y=A,b=s||o&&k.find.TAG("*",c),w=R+=null==y?1:Math.random()||.1,x=b.length;for(c&&(A=r===O||r||c);f!==x&&null!=(d=b[f]);f++){if(o&&d){for(h=0,r||d.ownerDocument===O||(L(d),a=!M);u=t[h++];)if(u(d,r||O,a)){l.push(d);break}c&&(R=w)}n&&((d=!u&&d)&&p--,s&&m.push(d))}if(p+=f,n&&f!==p){for(h=0;u=i[h++];)u(m,v,r,a);if(s){if(p>0)for(;f--;)m[f]||v[f]||(v[f]=G.call(l));v=g(v)}Q.apply(l,v),c&&!s&&v.length>0&&p+i.length>1&&e.uniqueSort(l)}return c&&(R=w,A=y),m};return n?s(r):r}(r,o))).selector=t}return a},$=e.select=function(t,e,i,s){var n,o,r,a,l,c="function"==typeof t&&t,d=!s&&S(t=c.selector||t);if(i=i||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(r=o[0]).type&&9===e.nodeType&&M&&k.relative[o[1].type]){if(!(e=(k.find.ID(r.matches[0].replace(vt,yt),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(n=ht.needsContext.test(t)?0:o.length;n--&&(r=o[n],!k.relative[a=r.type]);)if((l=k.find[a])&&(s=l(r.matches[0].replace(vt,yt),gt.test(o[0].type)&&h(e.parentNode)||e))){if(o.splice(n,1),!(t=s.length&&p(o)))return Q.apply(i,s),i;break}}return(c||C(t,d))(s,e,!M,i,!e||gt.test(t)&&h(e.parentNode)||e),i},w.sortStable=z.split("").sort(X).join("")===z,w.detectDuplicates=!!j,L(),w.sortDetached=n(function(t){return 1&t.compareDocumentPosition(O.createElement("fieldset"))}),n(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&n(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),n(function(t){return null==t.getAttribute("disabled")})||o(Z,function(t,e,i){var s;if(!i)return!0===t[e]?e.toLowerCase():(s=t.getAttributeNode(e))&&s.specified?s.value:null}),e}(t);at.find=ut,at.expr=ut.selectors,at.expr[":"]=at.expr.pseudos,at.uniqueSort=at.unique=ut.uniqueSort,at.text=ut.getText,at.isXMLDoc=ut.isXML,at.contains=ut.contains,at.escapeSelector=ut.escape;var pt=function(t,e,i){for(var s=[],n=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(n&&at(t).is(i))break;s.push(t)}return s},ft=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},mt=at.expr.match.needsContext,gt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,vt=/^.[^:#\[\.,]*$/;at.filter=function(t,e,i){var s=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===s.nodeType?at.find.matchesSelector(s,t)?[s]:[]:at.find.matches(t,at.grep(e,function(t){return 1===t.nodeType}))},at.fn.extend({find:function(t){var e,i,s=this.length,n=this;if("string"!=typeof t)return this.pushStack(at(t).filter(function(){for(e=0;e<s;e++)if(at.contains(n[e],this))return!0}));for(i=this.pushStack([]),e=0;e<s;e++)at.find(t,n[e],i);return s>1?at.uniqueSort(i):i},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&mt.test(t)?at(t):t||[],!1).length}});var yt,bt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(at.fn.init=function(t,e,i){var s,n;if(!t)return this;if(i=i||yt,"string"==typeof t){if(!(s="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:bt.exec(t))||!s[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(s[1]){if(e=e instanceof at?e[0]:e,at.merge(this,at.parseHTML(s[1],e&&e.nodeType?e.ownerDocument||e:Y,!0)),gt.test(s[1])&&at.isPlainObject(e))for(s in e)at.isFunction(this[s])?this[s](e[s]):this.attr(s,e[s]);return this}return(n=Y.getElementById(s[2]))&&(this[0]=n,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):at.isFunction(t)?void 0!==i.ready?i.ready(t):t(at):at.makeArray(t,this)}).prototype=at.fn,yt=at(Y);var wt=/^(?:parents|prev(?:Until|All))/,kt={children:!0,contents:!0,next:!0,prev:!0};at.fn.extend({has:function(t){var e=at(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(at.contains(this,e[t]))return!0})},closest:function(t,e){var i,s=0,n=this.length,o=[],r="string"!=typeof t&&at(t);if(!mt.test(t))for(;s<n;s++)for(i=this[s];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&at.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?at.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?tt.call(at(t),this[0]):tt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(at.uniqueSort(at.merge(this.get(),at(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),at.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return pt(t,"parentNode")},parentsUntil:function(t,e,i){return pt(t,"parentNode",i)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return pt(t,"nextSibling")},prevAll:function(t){return pt(t,"previousSibling")},nextUntil:function(t,e,i){return pt(t,"nextSibling",i)},prevUntil:function(t,e,i){return pt(t,"previousSibling",i)},siblings:function(t){return ft((t.parentNode||{}).firstChild,t)},children:function(t){return ft(t.firstChild)},contents:function(t){return n(t,"iframe")?t.contentDocument:(n(t,"template")&&(t=t.content||t),at.merge([],t.childNodes))}},function(t,e){at.fn[t]=function(i,s){var n=at.map(this,e,i);return"Until"!==t.slice(-5)&&(s=i),s&&"string"==typeof s&&(n=at.filter(s,n)),this.length>1&&(kt[t]||at.uniqueSort(n),wt.test(t)&&n.reverse()),this.pushStack(n)}});var xt=/[^\x20\t\r\n\f]+/g;at.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return at.each(t.match(xt)||[],function(t,i){e[i]=!0}),e}(t):at.extend({},t);var e,i,s,n,o=[],r=[],a=-1,l=function(){for(n=n||t.once,s=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,n&&(o=i?[]:"")},c={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){at.each(i,function(i,s){at.isFunction(s)?t.unique&&c.has(s)||o.push(s):s&&s.length&&"string"!==at.type(s)&&e(s)})}(arguments),i&&!e&&l()),this},remove:function(){return at.each(arguments,function(t,e){for(var i;(i=at.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--}),this},has:function(t){return t?at.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return n=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return n=r=[],i||e||(o=i=""),this},locked:function(){return!!n},fireWith:function(t,i){return n||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!s}};return c},at.extend({Deferred:function(e){var i=[["notify","progress",at.Callbacks("memory"),at.Callbacks("memory"),2],["resolve","done",at.Callbacks("once memory"),at.Callbacks("once memory"),0,"resolved"],["reject","fail",at.Callbacks("once memory"),at.Callbacks("once memory"),1,"rejected"]],s="pending",n={state:function(){return s},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return n.then(null,t)},pipe:function(){var t=arguments;return at.Deferred(function(e){at.each(i,function(i,s){var n=at.isFunction(t[s[4]])&&t[s[4]];o[s[1]](function(){var t=n&&n.apply(this,arguments);t&&at.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[s[0]+"With"](this,n?[t]:arguments)})}),t=null}).promise()},then:function(e,s,n){function o(e,i,s,n){return function(){var c=this,d=arguments,h=function(){var t,h;if(!(e<r)){if((t=s.apply(c,d))===i.promise())throw new TypeError("Thenable self-resolution");h=t&&("object"==typeof t||"function"==typeof t)&&t.then,at.isFunction(h)?n?h.call(t,o(r,i,a,n),o(r,i,l,n)):(r++,h.call(t,o(r,i,a,n),o(r,i,l,n),o(r,i,a,i.notifyWith))):(s!==a&&(c=void 0,d=[t]),(n||i.resolveWith)(c,d))}},u=n?h:function(){try{h()}catch(t){at.Deferred.exceptionHook&&at.Deferred.exceptionHook(t,u.stackTrace),e+1>=r&&(s!==l&&(c=void 0,d=[t]),i.rejectWith(c,d))}};e?u():(at.Deferred.getStackHook&&(u.stackTrace=at.Deferred.getStackHook()),t.setTimeout(u))}}var r=0;return at.Deferred(function(t){i[0][3].add(o(0,t,at.isFunction(n)?n:a,t.notifyWith)),i[1][3].add(o(0,t,at.isFunction(e)?e:a)),i[2][3].add(o(0,t,at.isFunction(s)?s:l))}).promise()},promise:function(t){return null!=t?at.extend(t,n):n}},o={};return at.each(i,function(t,e){var r=e[2],a=e[5];n[e[1]]=r.add,a&&r.add(function(){s=a},i[3-t][2].disable,i[0][2].lock),r.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=r.fireWith}),n.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,i=e,s=Array(i),n=K.call(arguments),o=at.Deferred(),r=function(t){return function(i){s[t]=this,n[t]=arguments.length>1?K.call(arguments):i,--e||o.resolveWith(s,n)}};if(e<=1&&(c(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||at.isFunction(n[i]&&n[i].then)))return o.then();for(;i--;)c(n[i],r(i),o.reject);return o.promise()}});var Tt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;at.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&Tt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},at.readyException=function(e){t.setTimeout(function(){throw e})};var St=at.Deferred();at.fn.ready=function(t){return St.then(t).catch(function(t){at.readyException(t)}),this},at.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--at.readyWait:at.isReady)||(at.isReady=!0,!0!==t&&--at.readyWait>0||St.resolveWith(Y,[at]))}}),at.ready.then=St.then,"complete"===Y.readyState||"loading"!==Y.readyState&&!Y.documentElement.doScroll?t.setTimeout(at.ready):(Y.addEventListener("DOMContentLoaded",d),t.addEventListener("load",d));var Ct=function(t,e,i,s,n,o,r){var a=0,l=t.length,c=null==i;if("object"===at.type(i)){n=!0;for(a in i)Ct(t,e,a,i[a],!0,o,r)}else if(void 0!==s&&(n=!0,at.isFunction(s)||(r=!0),c&&(r?(e.call(t,s),e=null):(c=e,e=function(t,e,i){return c.call(at(t),i)})),e))for(;a<l;a++)e(t[a],i,r?s:s.call(t[a],a,e(t[a],i)));return n?t:c?e.call(t):l?e(t[0],i):o},$t=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};h.uid=1,h.prototype={cache:function(t){var e=t[this.expando];return e||(e={},$t(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var s,n=this.cache(t);if("string"==typeof e)n[at.camelCase(e)]=i;else for(s in e)n[at.camelCase(s)]=e[s];return n},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][at.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,s=t[this.expando];if(void 0!==s){if(void 0!==e){i=(e=Array.isArray(e)?e.map(at.camelCase):(e=at.camelCase(e))in s?[e]:e.match(xt)||[]).length;for(;i--;)delete s[e[i]]}(void 0===e||at.isEmptyObject(s))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!at.isEmptyObject(e)}};var At=new h,Et=new h,jt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Lt=/[A-Z]/g;at.extend({hasData:function(t){return Et.hasData(t)||At.hasData(t)},data:function(t,e,i){return Et.access(t,e,i)},removeData:function(t,e){Et.remove(t,e)},_data:function(t,e,i){return At.access(t,e,i)},_removeData:function(t,e){At.remove(t,e)}}),at.fn.extend({data:function(t,e){var i,s,n,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(n=Et.get(o),1===o.nodeType&&!At.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(s=r[i].name).indexOf("data-")&&(s=at.camelCase(s.slice(5)),u(o,s,n[s]));At.set(o,"hasDataAttrs",!0)}return n}return"object"==typeof t?this.each(function(){Et.set(this,t)}):Ct(this,function(e){var i;if(o&&void 0===e){if(void 0!==(i=Et.get(o,t)))return i;if(void 0!==(i=u(o,t)))return i}else this.each(function(){Et.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Et.remove(this,t)})}}),at.extend({queue:function(t,e,i){var s;if(t)return e=(e||"fx")+"queue",s=At.get(t,e),i&&(!s||Array.isArray(i)?s=At.access(t,e,at.makeArray(i)):s.push(i)),s||[]},dequeue:function(t,e){e=e||"fx";var i=at.queue(t,e),s=i.length,n=i.shift(),o=at._queueHooks(t,e);"inprogress"===n&&(n=i.shift(),s--),n&&("fx"===e&&i.unshift("inprogress"),delete o.stop,n.call(t,function(){at.dequeue(t,e)},o)),!s&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return At.get(t,i)||At.access(t,i,{empty:at.Callbacks("once memory").add(function(){At.remove(t,[e+"queue",i])})})}}),at.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?at.queue(this[0],t):void 0===e?this:this.each(function(){var i=at.queue(this,t,e);at._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&at.dequeue(this,t)})},dequeue:function(t){return this.each(function(){at.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,s=1,n=at.Deferred(),o=this,r=this.length,a=function(){--s||n.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=At.get(o[r],t+"queueHooks"))&&i.empty&&(s++,i.empty.add(a));return a(),n.promise(e)}});var Ot=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Dt=new RegExp("^(?:([+-])=|)("+Ot+")([a-z%]*)$","i"),Mt=["Top","Right","Bottom","Left"],Nt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at.contains(t.ownerDocument,t)&&"none"===at.css(t,"display")},Pt=function(t,e,i,s){var n,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];n=i.apply(t,s||[]);for(o in e)t.style[o]=r[o];return n},Ht={};at.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Nt(this)?at(this).show():at(this).hide()})}});var qt=/^(?:checkbox|radio)$/i,zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ft=/^$|\/(?:java|ecma)script/i,Rt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Rt.optgroup=Rt.option,Rt.tbody=Rt.tfoot=Rt.colgroup=Rt.caption=Rt.thead,Rt.th=Rt.td;var It=/<|&#?\w+;/;!function(){var t=Y.createDocumentFragment().appendChild(Y.createElement("div")),e=Y.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),rt.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",rt.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Wt=Y.documentElement,Bt=/^key/,_t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Xt=/^([^.]*)(?:\.(.+)|)/;at.event={global:{},add:function(t,e,i,s,n){var o,r,a,l,c,d,h,u,p,f,m,g=At.get(t);if(g)for(i.handler&&(i=(o=i).handler,n=o.selector),n&&at.find.matchesSelector(Wt,n),i.guid||(i.guid=at.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(e){return void 0!==at&&at.event.triggered!==e.type?at.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(xt)||[""]).length;c--;)p=m=(a=Xt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(h=at.event.special[p]||{},p=(n?h.delegateType:h.bindType)||p,h=at.event.special[p]||{},d=at.extend({type:p,origType:m,data:s,handler:i,guid:i.guid,selector:n,needsContext:n&&at.expr.match.needsContext.test(n),namespace:f.join(".")},o),(u=l[p])||((u=l[p]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,s,f,r)||t.addEventListener&&t.addEventListener(p,r)),h.add&&(h.add.call(t,d),d.handler.guid||(d.handler.guid=i.guid)),n?u.splice(u.delegateCount++,0,d):u.push(d),at.event.global[p]=!0)},remove:function(t,e,i,s,n){var o,r,a,l,c,d,h,u,p,f,m,g=At.hasData(t)&&At.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(xt)||[""]).length;c--;)if(a=Xt.exec(e[c])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p){for(h=at.event.special[p]||{},u=l[p=(s?h.delegateType:h.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=u.length;o--;)d=u[o],!n&&m!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||s&&s!==d.selector&&("**"!==s||!d.selector)||(u.splice(o,1),d.selector&&u.delegateCount--,h.remove&&h.remove.call(t,d));r&&!u.length&&(h.teardown&&!1!==h.teardown.call(t,f,g.handle)||at.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)at.event.remove(t,p+e[c],i,s,!0);at.isEmptyObject(l)&&At.remove(t,"handle events")}},dispatch:function(t){var e,i,s,n,o,r,a=at.event.fix(t),l=new Array(arguments.length),c=(At.get(this,"events")||{})[a.type]||[],d=at.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(r=at.event.handlers.call(this,a,c),e=0;(n=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=n.elem,i=0;(o=n.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(s=((at.event.special[o.origType]||{}).handle||o.handler).apply(n.elem,l))&&!1===(a.result=s)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,s,n,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[n=(s=e[i]).selector+" "]&&(r[n]=s.needsContext?at(n,this).index(c)>-1:at.find(n,this,null,[c]).length),r[n]&&o.push(s);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(at.Event.prototype,t,{enumerable:!0,configurable:!0,get:at.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[at.expando]?t:new at.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&n(this,"input"))return this.click(),!1},_default:function(t){return n(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},at.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},at.Event=function(t,e){if(!(this instanceof at.Event))return new at.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?b:w,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&at.extend(this,e),this.timeStamp=t&&t.timeStamp||at.now(),this[at.expando]=!0},at.Event.prototype={constructor:at.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=b,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=b,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=b,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},at.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Bt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&_t.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},at.event.addProp),at.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){at.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,s=t.relatedTarget,n=t.handleObj;return s&&(s===this||at.contains(this,s))||(t.type=n.origType,i=n.handler.apply(this,arguments),t.type=e),i}}}),at.fn.extend({on:function(t,e,i,s){return x(this,t,e,i,s)},one:function(t,e,i,s){return x(this,t,e,i,s,1)},off:function(t,e,i){var s,n;if(t&&t.preventDefault&&t.handleObj)return s=t.handleObj,at(t.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof t){for(n in t)this.off(n,e,t[n]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=w),this.each(function(){at.event.remove(this,t,i,e)})}});var Ut=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Vt=/<script|<style|<link/i,Gt=/checked\s*(?:[^=]|=\s*.checked.)/i,Yt=/^true\/(.*)/,Qt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;at.extend({htmlPrefilter:function(t){return t.replace(Ut,"<$1></$2>")},clone:function(t,e,i){var s,n,o,r,a=t.cloneNode(!0),l=at.contains(t.ownerDocument,t);if(!(rt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||at.isXMLDoc(t)))for(r=g(a),s=0,n=(o=g(t)).length;s<n;s++)A(o[s],r[s]);if(e)if(i)for(o=o||g(t),r=r||g(a),s=0,n=o.length;s<n;s++)$(o[s],r[s]);else $(t,a);return(r=g(a,"script")).length>0&&v(r,!l&&g(t,"script")),a},cleanData:function(t){for(var e,i,s,n=at.event.special,o=0;void 0!==(i=t[o]);o++)if($t(i)){if(e=i[At.expando]){if(e.events)for(s in e.events)n[s]?at.event.remove(i,s):at.removeEvent(i,s,e.handle);i[At.expando]=void 0}i[Et.expando]&&(i[Et.expando]=void 0)}}}),at.fn.extend({detach:function(t){return j(this,t,!0)},remove:function(t){return j(this,t)},text:function(t){return Ct(this,function(t){return void 0===t?at.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return E(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,t).appendChild(t)}})},prepend:function(){return E(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=T(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(at.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return at.clone(this,t,e)})},html:function(t){return Ct(this,function(t){var e=this[0]||{},i=0,s=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Vt.test(t)&&!Rt[(zt.exec(t)||["",""])[1].toLowerCase()]){t=at.htmlPrefilter(t);try{for(;i<s;i++)1===(e=this[i]||{}).nodeType&&(at.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return E(this,arguments,function(e){var i=this.parentNode;at.inArray(this,t)<0&&(at.cleanData(g(this)),i&&i.replaceChild(e,this))},t)}}),at.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){at.fn[t]=function(t){for(var i,s=[],n=at(t),o=n.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),at(n[r])[e](i),Z.apply(s,i.get());return this.pushStack(s)}});var Kt=/^margin/,Jt=new RegExp("^("+Ot+")(?!px)[a-z%]+$","i"),Zt=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Wt.appendChild(r);var e=t.getComputedStyle(a);i="1%"!==e.top,o="2px"===e.marginLeft,s="4px"===e.width,a.style.marginRight="50%",n="4px"===e.marginRight,Wt.removeChild(r),a=null}}var i,s,n,o,r=Y.createElement("div"),a=Y.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",rt.clearCloneStyle="content-box"===a.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(a),at.extend(rt,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),s},pixelMarginRight:function(){return e(),n},reliableMarginLeft:function(){return e(),o}}))}();var te=/^(none|table(?!-c[ea]).+)/,ee=/^--/,ie={position:"absolute",visibility:"hidden",display:"block"},se={letterSpacing:"0",fontWeight:"400"},ne=["Webkit","Moz","ms"],oe=Y.createElement("div").style;at.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=L(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,s){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var n,o,r,a=at.camelCase(e),l=ee.test(e),c=t.style;if(l||(e=D(a)),r=at.cssHooks[e]||at.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(n=r.get(t,!1,s))?n:c[e];"string"==(o=typeof i)&&(n=Dt.exec(i))&&n[1]&&(i=p(t,e,n),o="number"),null!=i&&i==i&&("number"===o&&(i+=n&&n[3]||(at.cssNumber[a]?"":"px")),rt.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,s))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,s){var n,o,r,a=at.camelCase(e);return ee.test(e)||(e=D(a)),(r=at.cssHooks[e]||at.cssHooks[a])&&"get"in r&&(n=r.get(t,!0,i)),void 0===n&&(n=L(t,e,s)),"normal"===n&&e in se&&(n=se[e]),""===i||i?(o=parseFloat(n),!0===i||isFinite(o)?o||0:n):n}}),at.each(["height","width"],function(t,e){at.cssHooks[e]={get:function(t,i,s){if(i)return!te.test(at.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?P(t,e,s):Pt(t,ie,function(){return P(t,e,s)})},set:function(t,i,s){var n,o=s&&Zt(t),r=s&&N(t,e,s,"border-box"===at.css(t,"boxSizing",!1,o),o);return r&&(n=Dt.exec(i))&&"px"!==(n[3]||"px")&&(t.style[e]=i,i=at.css(t,e)),M(0,i,r)}}}),at.cssHooks.marginLeft=O(rt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(L(t,"marginLeft"))||t.getBoundingClientRect().left-Pt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),at.each({margin:"",padding:"",border:"Width"},function(t,e){at.cssHooks[t+e]={expand:function(i){for(var s=0,n={},o="string"==typeof i?i.split(" "):[i];s<4;s++)n[t+Mt[s]+e]=o[s]||o[s-2]||o[0];return n}},Kt.test(t)||(at.cssHooks[t+e].set=M)}),at.fn.extend({css:function(t,e){return Ct(this,function(t,e,i){var s,n,o={},r=0;if(Array.isArray(e)){for(s=Zt(t),n=e.length;r<n;r++)o[e[r]]=at.css(t,e[r],!1,s);return o}return void 0!==i?at.style(t,e,i):at.css(t,e)},t,e,arguments.length>1)}}),at.Tween=H,(H.prototype={constructor:H,init:function(t,e,i,s,n,o){this.elem=t,this.prop=i,this.easing=n||at.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=s,this.unit=o||(at.cssNumber[i]?"":"px")},cur:function(){var t=H.propHooks[this.prop];return t&&t.get?t.get(this):H.propHooks._default.get(this)},run:function(t){var e,i=H.propHooks[this.prop];return this.options.duration?this.pos=e=at.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):H.propHooks._default.set(this),this}}).init.prototype=H.prototype,(H.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=at.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){at.fx.step[t.prop]?at.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[at.cssProps[t.prop]]&&!at.cssHooks[t.prop]?t.elem[t.prop]=t.now:at.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=H.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},at.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},at.fx=H.prototype.init,at.fx.step={};var re,ae,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;at.Animation=at.extend(I,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return p(i.elem,t,Dt.exec(e),i),i}]},tweener:function(t,e){at.isFunction(t)?(e=t,t=["*"]):t=t.match(xt);for(var i,s=0,n=t.length;s<n;s++)i=t[s],I.tweeners[i]=I.tweeners[i]||[],I.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var s,n,o,r,a,l,c,d,h="width"in e||"height"in e,u=this,p={},f=t.style,g=t.nodeType&&Nt(t),v=At.get(t,"fxshow");i.queue||(null==(r=at._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,u.always(function(){u.always(function(){r.unqueued--,at.queue(t,"fx").length||r.empty.fire()})}));for(s in e)if(n=e[s],le.test(n)){if(delete e[s],o=o||"toggle"===n,n===(g?"hide":"show")){if("show"!==n||!v||void 0===v[s])continue;g=!0}p[s]=v&&v[s]||at.style(t,s)}if((l=!at.isEmptyObject(e))||!at.isEmptyObject(p)){h&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=v&&v.display)&&(c=At.get(t,"display")),"none"===(d=at.css(t,"display"))&&(c?d=c:(m([t],!0),c=t.style.display||c,d=at.css(t,"display"),m([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===at.css(t,"float")&&(l||(u.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1;for(s in p)l||(v?"hidden"in v&&(g=v.hidden):v=At.access(t,"fxshow",{display:c}),o&&(v.hidden=!g),g&&m([t],!0),u.done(function(){g||m([t]),At.remove(t,"fxshow");for(s in p)at.style(t,s,p[s])})),l=R(g?v[s]:0,s,u),s in v||(v[s]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(t,e){e?I.prefilters.unshift(t):I.prefilters.push(t)}}),at.speed=function(t,e,i){var s=t&&"object"==typeof t?at.extend({},t):{complete:i||!i&&e||at.isFunction(t)&&t,duration:t,easing:i&&e||e&&!at.isFunction(e)&&e};return at.fx.off?s.duration=0:"number"!=typeof s.duration&&(s.duration in at.fx.speeds?s.duration=at.fx.speeds[s.duration]:s.duration=at.fx.speeds._default),null!=s.queue&&!0!==s.queue||(s.queue="fx"),s.old=s.complete,s.complete=function(){at.isFunction(s.old)&&s.old.call(this),s.queue&&at.dequeue(this,s.queue)},s},at.fn.extend({fadeTo:function(t,e,i,s){return this.filter(Nt).css("opacity",0).show().end().animate({opacity:e},t,i,s)},animate:function(t,e,i,s){var n=at.isEmptyObject(t),o=at.speed(e,i,s),r=function(){var e=I(this,at.extend({},t),o);(n||At.get(this,"finish"))&&e.stop(!0)};return r.finish=r,n||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var s=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,n=null!=t&&t+"queueHooks",o=at.timers,r=At.get(this);if(n)r[n]&&r[n].stop&&s(r[n]);else for(n in r)r[n]&&r[n].stop&&ce.test(n)&&s(r[n]);for(n=o.length;n--;)o[n].elem!==this||null!=t&&o[n].queue!==t||(o[n].anim.stop(i),e=!1,o.splice(n,1));!e&&i||at.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,i=At.get(this),s=i[t+"queue"],n=i[t+"queueHooks"],o=at.timers,r=s?s.length:0;for(i.finish=!0,at.queue(this,t,[]),n&&n.stop&&n.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)s[e]&&s[e].finish&&s[e].finish.call(this);delete i.finish})}}),at.each(["toggle","show","hide"],function(t,e){var i=at.fn[e];at.fn[e]=function(t,s,n){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(F(e,!0),t,s,n)}}),at.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){at.fn[t]=function(t,i,s){return this.animate(e,t,i,s)}}),at.timers=[],at.fx.tick=function(){var t,e=0,i=at.timers;for(re=at.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||at.fx.stop(),re=void 0},at.fx.timer=function(t){at.timers.push(t),at.fx.start()},at.fx.interval=13,at.fx.start=function(){ae||(ae=!0,q())},at.fx.stop=function(){ae=null},at.fx.speeds={slow:600,fast:200,_default:400},at.fn.delay=function(e,i){return e=at.fx?at.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,s){var n=t.setTimeout(i,e);s.stop=function(){t.clearTimeout(n)}})},function(){var t=Y.createElement("input"),e=Y.createElement("select").appendChild(Y.createElement("option"));t.type="checkbox",rt.checkOn=""!==t.value,rt.optSelected=e.selected,(t=Y.createElement("input")).value="t",t.type="radio",rt.radioValue="t"===t.value}();var de,he=at.expr.attrHandle;at.fn.extend({attr:function(t,e){return Ct(this,at.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){at.removeAttr(this,t)})}}),at.extend({attr:function(t,e,i){var s,n,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?at.prop(t,e,i):(1===o&&at.isXMLDoc(t)||(n=at.attrHooks[e.toLowerCase()]||(at.expr.match.bool.test(e)?de:void 0)),void 0!==i?null===i?void at.removeAttr(t,e):n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:(t.setAttribute(e,i+""),i):n&&"get"in n&&null!==(s=n.get(t,e))?s:null==(s=at.find.attr(t,e))?void 0:s)},attrHooks:{type:{set:function(t,e){if(!rt.radioValue&&"radio"===e&&n(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,s=0,n=e&&e.match(xt);if(n&&1===t.nodeType)for(;i=n[s++];)t.removeAttribute(i)}}),de={set:function(t,e,i){return!1===e?at.removeAttr(t,i):t.setAttribute(i,i),i}},at.each(at.expr.match.bool.source.match(/\w+/g),function(t,e){var i=he[e]||at.find.attr;he[e]=function(t,e,s){var n,o,r=e.toLowerCase();return s||(o=he[r],he[r]=n,n=null!=i(t,e,s)?r:null,he[r]=o),n}});var ue=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;at.fn.extend({prop:function(t,e){return Ct(this,at.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[at.propFix[t]||t]})}}),at.extend({prop:function(t,e,i){var s,n,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&at.isXMLDoc(t)||(e=at.propFix[e]||e,n=at.propHooks[e]),void 0!==i?n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:t[e]=i:n&&"get"in n&&null!==(s=n.get(t,e))?s:t[e]},propHooks:{tabIndex:{get:function(t){var e=at.find.attr(t,"tabindex");return e?parseInt(e,10):ue.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),rt.optSelected||(at.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),at.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){at.propFix[this.toLowerCase()]=this}),at.fn.extend({addClass:function(t){var e,i,s,n,o,r,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).addClass(t.call(this,e,B(this)))});if("string"==typeof t&&t)for(e=t.match(xt)||[];i=this[l++];)if(n=B(i),s=1===i.nodeType&&" "+W(n)+" "){for(r=0;o=e[r++];)s.indexOf(" "+o+" ")<0&&(s+=o+" ");n!==(a=W(s))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,s,n,o,r,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).removeClass(t.call(this,e,B(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(xt)||[];i=this[l++];)if(n=B(i),s=1===i.nodeType&&" "+W(n)+" "){for(r=0;o=e[r++];)for(;s.indexOf(" "+o+" ")>-1;)s=s.replace(" "+o+" "," ");n!==(a=W(s))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):at.isFunction(t)?this.each(function(i){at(this).toggleClass(t.call(this,i,B(this),e),e)}):this.each(function(){var e,s,n,o;if("string"===i)for(s=0,n=at(this),o=t.match(xt)||[];e=o[s++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==t&&"boolean"!==i||((e=B(this))&&At.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":At.get(this,"__className__")||""))})},hasClass:function(t){var e,i,s=0;for(e=" "+t+" ";i=this[s++];)if(1===i.nodeType&&(" "+W(B(i))+" ").indexOf(e)>-1)return!0;return!1}});var fe=/\r/g;at.fn.extend({val:function(t){var e,i,s,n=this[0];{if(arguments.length)return s=at.isFunction(t),this.each(function(i){var n;1===this.nodeType&&(null==(n=s?t.call(this,i,at(this).val()):t)?n="":"number"==typeof n?n+="":Array.isArray(n)&&(n=at.map(n,function(t){return null==t?"":t+""})),(e=at.valHooks[this.type]||at.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,n,"value")||(this.value=n))});if(n)return(e=at.valHooks[n.type]||at.valHooks[n.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(n,"value"))?i:"string"==typeof(i=n.value)?i.replace(fe,""):null==i?"":i}}}),at.extend({valHooks:{option:{get:function(t){var e=at.find.attr(t,"value");return null!=e?e:W(at.text(t))}},select:{get:function(t){var e,i,s,o=t.options,r=t.selectedIndex,a="select-one"===t.type,l=a?null:[],c=a?r+1:o.length;for(s=r<0?c:a?r:0;s<c;s++)if(((i=o[s]).selected||s===r)&&!i.disabled&&(!i.parentNode.disabled||!n(i.parentNode,"optgroup"))){if(e=at(i).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var i,s,n=t.options,o=at.makeArray(e),r=n.length;r--;)((s=n[r]).selected=at.inArray(at.valHooks.option.get(s),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),at.each(["radio","checkbox"],function(){at.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=at.inArray(at(t).val(),e)>-1}},rt.checkOn||(at.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var me=/^(?:focusinfocus|focusoutblur)$/;at.extend(at.event,{trigger:function(e,i,s,n){var o,r,a,l,c,d,h,u=[s||Y],p=st.call(e,"type")?e.type:e,f=st.call(e,"namespace")?e.namespace.split("."):[];if(r=a=s=s||Y,3!==s.nodeType&&8!==s.nodeType&&!me.test(p+at.event.triggered)&&(p.indexOf(".")>-1&&(p=(f=p.split(".")).shift(),f.sort()),c=p.indexOf(":")<0&&"on"+p,e=e[at.expando]?e:new at.Event(p,"object"==typeof e&&e),e.isTrigger=n?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=s),i=null==i?[e]:at.makeArray(i,[e]),h=at.event.special[p]||{},n||!h.trigger||!1!==h.trigger.apply(s,i))){if(!n&&!h.noBubble&&!at.isWindow(s)){for(l=h.delegateType||p,me.test(l+p)||(r=r.parentNode);r;r=r.parentNode)u.push(r),a=r;a===(s.ownerDocument||Y)&&u.push(a.defaultView||a.parentWindow||t)}for(o=0;(r=u[o++])&&!e.isPropagationStopped();)e.type=o>1?l:h.bindType||p,(d=(At.get(r,"events")||{})[e.type]&&At.get(r,"handle"))&&d.apply(r,i),(d=c&&r[c])&&d.apply&&$t(r)&&(e.result=d.apply(r,i),!1===e.result&&e.preventDefault());return e.type=p,n||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(u.pop(),i)||!$t(s)||c&&at.isFunction(s[p])&&!at.isWindow(s)&&((a=s[c])&&(s[c]=null),at.event.triggered=p,s[p](),at.event.triggered=void 0,a&&(s[c]=a)),e.result}},simulate:function(t,e,i){var s=at.extend(new at.Event,i,{type:t,isSimulated:!0});at.event.trigger(s,null,e)}}),at.fn.extend({trigger:function(t,e){return this.each(function(){at.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return at.event.trigger(t,e,i,!0)}}),at.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){at.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),at.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),rt.focusin="onfocusin"in t,rt.focusin||at.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){at.event.simulate(e,t.target,at.event.fix(t))};at.event.special[e]={setup:function(){var s=this.ownerDocument||this,n=At.access(s,e);n||s.addEventListener(t,i,!0),At.access(s,e,(n||0)+1)},teardown:function(){var s=this.ownerDocument||this,n=At.access(s,e)-1;n?At.access(s,e,n):(s.removeEventListener(t,i,!0),At.remove(s,e))}}});var ge=t.location,ve=at.now(),ye=/\?/;at.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||at.error("Invalid XML: "+e),i};var be=/\[\]$/,we=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,xe=/^(?:input|select|textarea|keygen)/i;at.param=function(t,e){var i,s=[],n=function(t,e){var i=at.isFunction(e)?e():e;s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(t)||t.jquery&&!at.isPlainObject(t))at.each(t,function(){n(this.name,this.value)});else for(i in t)_(i,t[i],e,n);return s.join("&")},at.fn.extend({serialize:function(){return at.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=at.prop(this,"elements");return t?at.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!at(this).is(":disabled")&&xe.test(this.nodeName)&&!ke.test(t)&&(this.checked||!qt.test(t))}).map(function(t,e){var i=at(this).val();return null==i?null:Array.isArray(i)?at.map(i,function(t){return{name:e.name,value:t.replace(we,"\r\n")}}):{name:e.name,value:i.replace(we,"\r\n")}}).get()}});var Te=/%20/g,Se=/#.*$/,Ce=/([?&])_=[^&]*/,$e=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ae=/^(?:GET|HEAD)$/,Ee=/^\/\//,je={},Le={},Oe="*/".concat("*"),De=Y.createElement("a");De.href=ge.href,at.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Oe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":at.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?V(V(t,at.ajaxSettings),e):V(at.ajaxSettings,t)},ajaxPrefilter:X(je),ajaxTransport:X(Le),ajax:function(e,i){function s(e,i,s,a){var c,u,p,w,k,x=i;d||(d=!0,l&&t.clearTimeout(l),n=void 0,r=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(w=function(t,e,i){for(var s,n,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===s&&(s=t.mimeType||e.getResponseHeader("Content-Type"));if(s)for(n in a)if(a[n]&&a[n].test(s)){l.unshift(n);break}if(l[0]in i)o=l[0];else{for(n in i){if(!l[0]||t.converters[n+" "+l[0]]){o=n;break}r||(r=n)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(f,T,s)),w=function(t,e,i,s){var n,o,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=d.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&s&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=d.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(n in c)if((a=n.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[n]:!0!==c[n]&&(o=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(f,w,T,c),c?(f.ifModified&&((k=T.getResponseHeader("Last-Modified"))&&(at.lastModified[o]=k),(k=T.getResponseHeader("etag"))&&(at.etag[o]=k)),204===e||"HEAD"===f.type?x="nocontent":304===e?x="notmodified":(x=w.state,u=w.data,c=!(p=w.error))):(p=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(i||x)+"",c?v.resolveWith(m,[u,x,T]):v.rejectWith(m,[T,x,p]),T.statusCode(b),b=void 0,h&&g.trigger(c?"ajaxSuccess":"ajaxError",[T,f,c?u:p]),y.fireWith(m,[T,x]),h&&(g.trigger("ajaxComplete",[T,f]),--at.active||at.event.trigger("ajaxStop")))}"object"==typeof e&&(i=e,e=void 0),i=i||{};var n,o,r,a,l,c,d,h,u,p,f=at.ajaxSetup({},i),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?at(m):at.event,v=at.Deferred(),y=at.Callbacks("once memory"),b=f.statusCode||{},w={},k={},x="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(d){if(!a)for(a={};e=$e.exec(r);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return d?r:null},setRequestHeader:function(t,e){return null==d&&(t=k[t.toLowerCase()]=k[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==d&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(d)T.always(t[T.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return n&&n.abort(e),s(0,e),this}};if(v.promise(T),f.url=((e||f.url||ge.href)+"").replace(Ee,ge.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(xt)||[""],null==f.crossDomain){c=Y.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=De.protocol+"//"+De.host!=c.protocol+"//"+c.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=at.param(f.data,f.traditional)),U(je,f,i,T),d)return T;(h=at.event&&f.global)&&0==at.active++&&at.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ae.test(f.type),o=f.url.replace(Se,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Te,"+")):(p=f.url.slice(o.length),f.data&&(o+=(ye.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Ce,"$1"),p=(ye.test(o)?"&":"?")+"_="+ve+++p),f.url=o+p),f.ifModified&&(at.lastModified[o]&&T.setRequestHeader("If-Modified-Since",at.lastModified[o]),at.etag[o]&&T.setRequestHeader("If-None-Match",at.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Oe+"; q=0.01":""):f.accepts["*"]);for(u in f.headers)T.setRequestHeader(u,f.headers[u]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||d))return T.abort();if(x="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),n=U(Le,f,i,T)){if(T.readyState=1,h&&g.trigger("ajaxSend",[T,f]),d)return T;f.async&&f.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},f.timeout));try{d=!1,n.send(w,s)}catch(t){if(d)throw t;s(-1,t)}}else s(-1,"No Transport");return T},getJSON:function(t,e,i){return at.get(t,e,i,"json")},getScript:function(t,e){return at.get(t,void 0,e,"script")}}),at.each(["get","post"],function(t,e){at[e]=function(t,i,s,n){return at.isFunction(i)&&(n=n||s,s=i,i=void 0),at.ajax(at.extend({url:t,type:e,dataType:n,data:i,success:s},at.isPlainObject(t)&&t))}}),at._evalUrl=function(t){return at.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},at.fn.extend({wrapAll:function(t){var e;return this[0]&&(at.isFunction(t)&&(t=t.call(this[0])),e=at(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return at.isFunction(t)?this.each(function(e){at(this).wrapInner(t.call(this,e))}):this.each(function(){var e=at(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=at.isFunction(t);return this.each(function(i){at(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){at(this).replaceWith(this.childNodes)}),this}}),at.expr.pseudos.hidden=function(t){return!at.expr.pseudos.visible(t)},at.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},at.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Me={0:200,1223:204},Ne=at.ajaxSettings.xhr();rt.cors=!!Ne&&"withCredentials"in Ne,rt.ajax=Ne=!!Ne,at.ajaxTransport(function(e){var i,s;if(rt.cors||Ne&&!e.crossDomain)return{send:function(n,o){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)a.setRequestHeader(r,n[r]);i=function(t){return function(){i&&(i=s=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Me[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),s=a.onerror=i("error"),void 0!==a.onabort?a.onabort=s:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){i&&s()})},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(i)throw t}},abort:function(){i&&i()}}}),at.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),at.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return at.globalEval(t),t}}}),at.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),at.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(s,n){e=at("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&n("error"===t.type?404:200,t.type)}),Y.head.appendChild(e[0])},abort:function(){i&&i()}}}});var Pe=[],He=/(=)\?(?=&|$)|\?\?/;at.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Pe.pop()||at.expando+"_"+ve++;return this[t]=!0,t}}),at.ajaxPrefilter("json jsonp",function(e,i,s){var n,o,r,a=!1!==e.jsonp&&(He.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&He.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=at.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(He,"$1"+n):!1!==e.jsonp&&(e.url+=(ye.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return r||at.error(n+" was not called"),r[0]},e.dataTypes[0]="json",o=t[n],t[n]=function(){r=arguments},s.always(function(){void 0===o?at(t).removeProp(n):t[n]=o,e[n]&&(e.jsonpCallback=i.jsonpCallback,Pe.push(n)),r&&at.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),rt.createHTMLDocument=function(){var t=Y.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),at.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var s,n,o;return e||(rt.createHTMLDocument?((s=(e=Y.implementation.createHTMLDocument("")).createElement("base")).href=Y.location.href,e.head.appendChild(s)):e=Y),n=gt.exec(t),o=!i&&[],n?[e.createElement(n[1])]:(n=y([t],e,o),o&&o.length&&at(o).remove(),at.merge([],n.childNodes))},at.fn.load=function(t,e,i){var s,n,o,r=this,a=t.indexOf(" ");return a>-1&&(s=W(t.slice(a)),t=t.slice(0,a)),at.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(n="POST"),r.length>0&&at.ajax({url:t,type:n||"GET",dataType:"html",data:e}).done(function(t){o=arguments,r.html(s?at("<div>").append(at.parseHTML(t)).find(s):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,o||[t.responseText,e,t])})}),this},at.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){at.fn[e]=function(t){return this.on(e,t)}}),at.expr.pseudos.animated=function(t){return at.grep(at.timers,function(e){return t===e.elem}).length},at.offset={setOffset:function(t,e,i){var s,n,o,r,a,l,c=at.css(t,"position"),d=at(t),h={};"static"===c&&(t.style.position="relative"),a=d.offset(),o=at.css(t,"top"),l=at.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(r=(s=d.position()).top,n=s.left):(r=parseFloat(o)||0,n=parseFloat(l)||0),at.isFunction(e)&&(e=e.call(t,i,at.extend({},a))),null!=e.top&&(h.top=e.top-a.top+r),null!=e.left&&(h.left=e.left-a.left+n),"using"in e?e.using.call(t,h):d.css(h)}},at.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){at.offset.setOffset(this,t,e)});var e,i,s,n,o=this[0];if(o)return o.getClientRects().length?(s=o.getBoundingClientRect(),e=o.ownerDocument,i=e.documentElement,n=e.defaultView,{top:s.top+n.pageYOffset-i.clientTop,left:s.left+n.pageXOffset-i.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,i=this[0],s={top:0,left:0};return"fixed"===at.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),n(t[0],"html")||(s=t.offset()),s={top:s.top+at.css(t[0],"borderTopWidth",!0),left:s.left+at.css(t[0],"borderLeftWidth",!0)}),{top:e.top-s.top-at.css(i,"marginTop",!0),left:e.left-s.left-at.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===at.css(t,"position");)t=t.offsetParent;return t||Wt})}}),at.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;at.fn[t]=function(s){return Ct(this,function(t,s,n){var o;if(at.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===n)return o?o[e]:t[s];o?o.scrollTo(i?o.pageXOffset:n,i?n:o.pageYOffset):t[s]=n},t,s,arguments.length)}}),at.each(["top","left"],function(t,e){at.cssHooks[e]=O(rt.pixelPosition,function(t,i){if(i)return i=L(t,e),Jt.test(i)?at(t).position()[e]+"px":i})}),at.each({Height:"height",Width:"width"},function(t,e){at.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,s){at.fn[s]=function(n,o){var r=arguments.length&&(i||"boolean"!=typeof n),a=i||(!0===n||!0===o?"margin":"border");return Ct(this,function(e,i,n){var o;return at.isWindow(e)?0===s.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===n?at.css(e,i,a):at.style(e,i,n,a)},e,r?n:void 0,r)}})}),at.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,s){return this.on(e,t,i,s)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),at.holdReady=function(t){t?at.readyWait++:at.ready(!0)},at.isArray=Array.isArray,at.parseJSON=JSON.parse,at.nodeName=n,"function"==typeof define&&define.amd&&define("jquery",[],function(){return at});var qe=t.jQuery,ze=t.$;return at.noConflict=function(e){return t.$===at&&(t.$=ze),e&&t.jQuery===at&&(t.jQuery=qe),at},e||(t.jQuery=t.$=at),at}),function(t,e){"object"==typeof module&&module.exports?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Spinner=e()}(this,function(){"use strict";function t(t,e){var i,s=document.createElement(t||"div");for(i in e)s[i]=e[i];return s}function e(t){for(var e=1,i=arguments.length;e<i;e++)t.appendChild(arguments[e]);return t}function i(t,e,i,s){var n=["opacity",e,~~(100*t),i,s].join("-"),o=.01+i/s*100,r=Math.max(1-(1-t)/e*(100-o),t),a=l.substring(0,l.indexOf("Animation")).toLowerCase(),d=a&&"-"+a+"-"||"";return h[n]||(c.insertRule("@"+d+"keyframes "+n+"{0%{opacity:"+r+"}"+o+"%{opacity:"+t+"}"+(o+.01)+"%{opacity:1}"+(o+e)%100+"%{opacity:"+t+"}100%{opacity:"+r+"}}",c.cssRules.length),h[n]=1),n}function s(t,e){var i,s,n=t.style;if(e=e.charAt(0).toUpperCase()+e.slice(1),void 0!==n[e])return e;for(s=0;s<d.length;s++)if(i=d[s]+e,void 0!==n[i])return i}function n(t,e){for(var i in e)t.style[s(t,i)||i]=e[i];return t}function o(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)void 0===t[s]&&(t[s]=i[s])}return t}function r(t,e){return"string"==typeof t?t:t[e%t.length]}function a(t){this.opts=o(t||{},a.defaults,u)}var l,c,d=["webkit","Moz","ms","O"],h={},u={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(a.defaults={},o(a.prototype,{spin:function(e){this.stop();var i=this,s=i.opts,o=i.el=t(null,{className:s.className});if(n(o,{position:s.position,width:0,zIndex:s.zIndex,left:s.left,top:s.top}),e&&e.insertBefore(o,e.firstChild||null),o.setAttribute("role","progressbar"),i.lines(o,i.opts),!l){var r,a=0,c=(s.lines-1)*(1-s.direction)/2,d=s.fps,h=d/s.speed,u=(1-s.opacity)/(h*s.trail/100),p=h/s.lines;!function t(){a++;for(var e=0;e<s.lines;e++)r=Math.max(1-(a+(s.lines-e)*p)%h*u,s.opacity),i.opacity(o,e*s.direction+c,r,s);i.timeout=i.el&&setTimeout(t,~~(1e3/d))}()}return i},stop:function(){var t=this.el;return t&&(clearTimeout(this.timeout),t.parentNode&&t.parentNode.removeChild(t),this.el=void 0),this},lines:function(s,o){function a(e,i){return n(t(),{position:"absolute",width:o.scale*(o.length+o.width)+"px",height:o.scale*o.width+"px",background:e,boxShadow:i,transformOrigin:"left",transform:"rotate("+~~(360/o.lines*d+o.rotate)+"deg) translate("+o.scale*o.radius+"px,0)",borderRadius:(o.corners*o.scale*o.width>>1)+"px"})}for(var c,d=0,h=(o.lines-1)*(1-o.direction)/2;d<o.lines;d++)c=n(t(),{position:"absolute",top:1+~(o.scale*o.width/2)+"px",transform:o.hwaccel?"translate3d(0,0,0)":"",opacity:o.opacity,animation:l&&i(o.opacity,o.trail,h+d*o.direction,o.lines)+" "+1/o.speed+"s linear infinite"}),o.shadow&&e(c,n(a("#000","0 0 4px #000"),{top:"2px"})),e(s,e(c,a(r(o.color,d),"0 0 1px rgba(0,0,0,.1)")));return s},opacity:function(t,e,i){e<t.childNodes.length&&(t.childNodes[e].style.opacity=i)}}),"undefined"!=typeof document){c=function(){var i=t("style",{type:"text/css"});return e(document.getElementsByTagName("head")[0],i),i.sheet||i.styleSheet}();var p=n(t("group"),{behavior:"url(#default#VML)"});!s(p,"transform")&&p.adj?function(){function i(e,i){return t("<"+e+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',i)}c.addRule(".spin-vml","behavior:url(#default#VML)"),a.prototype.lines=function(t,s){function o(){return n(i("group",{coordsize:d+" "+d,coordorigin:-c+" "+-c}),{width:d,height:d})}function a(t,a,l){e(u,e(n(o(),{rotation:360/s.lines*t+"deg",left:~~a}),e(n(i("roundrect",{arcsize:s.corners}),{width:c,height:s.scale*s.width,left:s.scale*s.radius,top:-s.scale*s.width>>1,filter:l}),i("fill",{color:r(s.color,t),opacity:s.opacity}),i("stroke",{opacity:0}))))}var l,c=s.scale*(s.length+s.width),d=2*s.scale*c,h=-(s.width+s.length)*s.scale*2+"px",u=n(o(),{position:"absolute",top:h,left:h});if(s.shadow)for(l=1;l<=s.lines;l++)a(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=s.lines;l++)a(l);return e(t,u)},a.prototype.opacity=function(t,e,i,s){var n=t.firstChild;s=s.shadow&&s.lines||0,n&&e+s<n.childNodes.length&&(n=(n=(n=n.childNodes[e+s])&&n.firstChild)&&n.firstChild)&&(n.opacity=i)}}():l=s(p,"animation")}return a}),function(t){if("object"==typeof exports)t(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],t);else{if(!window.Spinner)throw new Error("Spin.js not present");t(window.jQuery,window.Spinner)}}(function(t,e){t.fn.spin=function(i,s){return this.each(function(){var n=t(this),o=n.data();o.spinner&&(o.spinner.stop(),delete o.spinner),!1!==i&&(i=t.extend({color:s||n.css("color")},t.fn.spin.presets[i]||i),o.spinner=new e(i).spin(this))})},t.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(t,e,i){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(e||i)}(function(t){"use strict";var e=function(e,i,s){var n={invalid:[],getCaret:function(){try{var t,i=0,s=e.get(0),o=document.selection,r=s.selectionStart;return o&&-1===navigator.appVersion.indexOf("MSIE 10")?((t=o.createRange()).moveStart("character",-n.val().length),i=t.text.length):(r||"0"===r)&&(i=r),i}catch(t){}},setCaret:function(t){try{if(e.is(":focus")){var i,s=e.get(0);s.setSelectionRange?s.setSelectionRange(t,t):((i=s.createTextRange()).collapse(!0),i.moveEnd("character",t),i.moveStart("character",t),i.select())}}catch(t){}},events:function(){e.on("keydown.mask",function(t){e.data("mask-keycode",t.keyCode||t.which),e.data("mask-previus-value",e.val()),e.data("mask-previus-caret-pos",n.getCaret()),n.maskDigitPosMapOld=n.maskDigitPosMap}).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",n.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){e.keydown().keyup()},100)}).on("change.mask",function(){e.data("changed",!0)}).on("blur.mask",function(){a===n.val()||e.data("changed")||e.trigger("change"),e.data("changed",!1)}).on("blur.mask",function(){a=n.val()}).on("focus.mask",function(e){!0===s.selectOnFocus&&t(e.target).select()}).on("focusout.mask",function(){s.clearIfNotMatch&&!o.test(n.val())&&n.val("")})},getRegexMask:function(){for(var t,e,s,n,o,a,l=[],c=0;c<i.length;c++)(t=r.translation[i.charAt(c)])?(e=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),s=t.optional,(n=t.recursive)?(l.push(i.charAt(c)),o={digit:i.charAt(c),pattern:e}):l.push(s||n?e+"?":e)):l.push(i.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return a=l.join(""),o&&(a=a.replace(new RegExp("("+o.digit+"(.*"+o.digit+")?)"),"($1)?").replace(new RegExp(o.digit,"g"),o.pattern)),new RegExp(a)},destroyEvents:function(){e.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var i,s=e.is("input")?"val":"text";return arguments.length>0?(e[s]()!==t&&e[s](t),i=e):i=e[s](),i},calculateCaretPosition:function(){var t=e.data("mask-previus-value")||"",i=n.getMasked(),s=n.getCaret();if(t!==i){var o=e.data("mask-previus-caret-pos")||0,r=i.length,a=t.length,l=0,c=0,d=0,h=0,u=0;for(u=s;u<r&&n.maskDigitPosMap[u];u++)c++;for(u=s-1;u>=0&&n.maskDigitPosMap[u];u--)l++;for(u=s-1;u>=0;u--)n.maskDigitPosMap[u]&&d++;for(u=o-1;u>=0;u--)n.maskDigitPosMapOld[u]&&h++;if(s>a)s=10*r;else if(o>=s&&o!==a){if(!n.maskDigitPosMapOld[s]){var p=s;s-=h-d,s-=l,n.maskDigitPosMap[s]&&(s=p)}}else s>o&&(s+=d-h,s+=c)}return s},behaviour:function(i){i=i||window.event,n.invalid=[];var s=e.data("mask-keycode");if(-1===t.inArray(s,r.byPassKeys)){var o=n.getMasked(),a=n.getCaret();return setTimeout(function(){n.setCaret(n.calculateCaretPosition())},10),n.val(o),n.setCaret(a),n.callbacks(i)}},getMasked:function(t,e){var o,a,l=[],c=void 0===e?n.val():e+"",d=0,h=i.length,u=0,p=c.length,f=1,m="push",g=-1,v=0,y=[];s.reverse?(m="unshift",f=-1,o=0,d=h-1,u=p-1,a=function(){return d>-1&&u>-1}):(o=h-1,a=function(){return d<h&&u<p});for(var b;a();){var w=i.charAt(d),k=c.charAt(u),x=r.translation[w];x?(k.match(x.pattern)?(l[m](k),x.recursive&&(-1===g?g=d:d===o&&d!==g&&(d=g-f),o===g&&(d-=f)),d+=f):k===b?(v--,b=void 0):x.optional?(d+=f,u-=f):x.fallback?(l[m](x.fallback),d+=f,u-=f):n.invalid.push({p:u,v:k,e:x.pattern}),u+=f):(t||l[m](w),k===w?(y.push(u),u+=f):(b=w,y.push(u+v),v++),d+=f)}var T=i.charAt(o);h!==p+1||r.translation[T]||l.push(T);var S=l.join("");return n.mapMaskdigitPositions(S,y,p),S},mapMaskdigitPositions:function(t,e,i){var o=s.reverse?t.length-i:0;n.maskDigitPosMap={};for(var r=0;r<e.length;r++)n.maskDigitPosMap[e[r]+o]=1},callbacks:function(t){var o=n.val(),r=o!==a,l=[o,t,e,s],c=function(t,e,i){"function"==typeof s[t]&&e&&s[t].apply(this,i)};c("onChange",!0===r,l),c("onKeyPress",!0===r,l),c("onComplete",o.length===i.length,l),c("onInvalid",n.invalid.length>0,[o,t,e,n.invalid,s])}};e=t(e);var o,r=this,a=n.val();i="function"==typeof i?i(n.val(),void 0,e,s):i,r.mask=i,r.options=s,r.remove=function(){var t=n.getCaret();return n.destroyEvents(),n.val(r.getCleanVal()),n.setCaret(t),e},r.getCleanVal=function(){return n.getMasked(!0)},r.getMaskedVal=function(t){return n.getMasked(!1,t)},r.init=function(a){if(a=a||!1,s=s||{},r.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,r.byPassKeys=t.jMaskGlobals.byPassKeys,r.translation=t.extend({},t.jMaskGlobals.translation,s.translation),r=t.extend(!0,{},r,s),o=n.getRegexMask(),a)n.events(),n.val(n.getMasked());else{s.placeholder&&e.attr("placeholder",s.placeholder),e.data("mask")&&e.attr("autocomplete","off");for(var l=0,c=!0;l<i.length;l++){var d=r.translation[i.charAt(l)];if(d&&d.recursive){c=!1;break}}c&&e.attr("maxlength",i.length),n.destroyEvents(),n.events();var h=n.getCaret();n.val(n.getMasked()),n.setCaret(h)}},r.init(!e.is("input"))};t.maskWatchers={};var i=function(){var i=t(this),n={},o="data-mask-",r=i.attr("data-mask");if(i.attr(o+"reverse")&&(n.reverse=!0),i.attr(o+"clearifnotmatch")&&(n.clearIfNotMatch=!0),"true"===i.attr(o+"selectonfocus")&&(n.selectOnFocus=!0),s(i,r,n))return i.data("mask",new e(this,r,n))},s=function(e,i,s){s=s||{};var n=t(e).data("mask"),o=JSON.stringify,r=t(e).val()||t(e).text();try{return"function"==typeof i&&(i=i(r)),"object"!=typeof n||o(n.options)!==o(s)||n.mask!==i}catch(t){}};t.fn.mask=function(i,n){n=n||{};var o=this.selector,r=t.jMaskGlobals,a=r.watchInterval,l=n.watchInputs||r.watchInputs,c=function(){if(s(this,i,n))return t(this).data("mask",new e(this,i,n))};return t(this).each(c),o&&""!==o&&l&&(clearInterval(t.maskWatchers[o]),t.maskWatchers[o]=setInterval(function(){t(document).find(o).each(c)},a)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each(function(){var e=t(this).data("mask");e&&e.remove().removeData("mask")})},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(e){((e=e||t.jMaskGlobals.maskElements)instanceof t?e:t(e)).filter(t.jMaskGlobals.dataMaskAttr).each(i)};var n={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(t){var e,i=document.createElement("div");return t="on"+t,(e=t in i)||(i.setAttribute(t,"return;"),e="function"==typeof i[t]),i=null,e}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},(n=t.jMaskGlobals=t.extend(!0,{},n,t.jMaskGlobals)).dataMask&&t.applyDataMask(),setInterval(function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()},n.watchInterval)},window.jQuery,window.Zepto),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.Slick||{};(e=function(){var e=0;return function(i,s){var n;this.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(i),appendDots:t(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},this.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(this,this.initials),this.activeBreakpoint=null,this.animType=null,this.animProp=null,this.breakpoints=[],this.breakpointSettings=[],this.cssTransitions=!1,this.focussed=!1,this.interrupted=!1,this.hidden="hidden",this.paused=!0,this.positionProp=null,this.respondTo=null,this.rowCount=1,this.shouldClick=!0,this.$slider=t(i),this.$slidesCache=null,this.transformType=null,this.transitionType=null,this.visibilityChange="visibilitychange",this.windowWidth=0,this.windowTimer=null,n=t(i).data("slick")||{},this.options=t.extend({},this.defaults,s,n),this.currentSlide=this.options.initialSlide,this.originalSettings=this.options,void 0!==document.mozHidden?(this.hidden="mozHidden",this.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(this.hidden="webkitHidden",this.visibilityChange="webkitvisibilitychange"),this.autoPlay=t.proxy(this.autoPlay,this),this.autoPlayClear=t.proxy(this.autoPlayClear,this),this.autoPlayIterator=t.proxy(this.autoPlayIterator,this),this.changeSlide=t.proxy(this.changeSlide,this),this.clickHandler=t.proxy(this.clickHandler,this),this.selectHandler=t.proxy(this.selectHandler,this),this.setPosition=t.proxy(this.setPosition,this),this.swipeHandler=t.proxy(this.swipeHandler,this),this.dragHandler=t.proxy(this.dragHandler,this),this.keyHandler=t.proxy(this.keyHandler,this),this.instanceUid=e++,this.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,this.registerBreakpoints(),this.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},e.prototype.addSlide=e.prototype.slickAdd=function(e,i,s){if("boolean"==typeof i)s=i,i=null;else if(i<0||i>=this.slideCount)return!1;this.unload(),"number"==typeof i?0===i&&0===this.$slides.length?t(e).appendTo(this.$slideTrack):s?t(e).insertBefore(this.$slides.eq(i)):t(e).insertAfter(this.$slides.eq(i)):!0===s?t(e).prependTo(this.$slideTrack):t(e).appendTo(this.$slideTrack),this.$slides=this.$slideTrack.children(this.options.slide),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.append(this.$slides),this.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),this.$slidesCache=this.$slides,this.reinit()},e.prototype.animateHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var t=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.animate({height:t},this.options.speed)}},e.prototype.animateSlide=function(e,i){var s={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(e=-e),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:e},n.options.speed,n.options.easing,i):n.$slideTrack.animate({top:e},n.options.speed,n.options.easing,i):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),t({animStart:n.currentLeft}).animate({animStart:e},{duration:n.options.speed,easing:n.options.easing,step:function(t){t=Math.ceil(t),!1===n.options.vertical?(s[n.animType]="translate("+t+"px, 0px)",n.$slideTrack.css(s)):(s[n.animType]="translate(0px,"+t+"px)",n.$slideTrack.css(s))},complete:function(){i&&i.call()}})):(n.applyTransition(),e=Math.ceil(e),!1===n.options.vertical?s[n.animType]="translate3d("+e+"px, 0px, 0px)":s[n.animType]="translate3d(0px,"+e+"px, 0px)",n.$slideTrack.css(s),i&&setTimeout(function(){n.disableTransition(),i.call()},n.options.speed))},e.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=t(e).not(this.$slider)),e},e.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each(function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)})},e.prototype.applyTransition=function(t){var e={};!1===this.options.fade?e[this.transitionType]=this.transformType+" "+this.options.speed+"ms "+this.options.cssEase:e[this.transitionType]="opacity "+this.options.speed+"ms "+this.options.cssEase,!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},e.prototype.autoPlay=function(){this.autoPlayClear(),this.slideCount>this.options.slidesToShow&&(this.autoPlayTimer=setInterval(this.autoPlayIterator,this.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this.currentSlide+this.options.slidesToScroll;this.paused||this.interrupted||this.focussed||(!1===this.options.infinite&&(1===this.direction&&this.currentSlide+1===this.slideCount-1?this.direction=0:0===this.direction&&(t=this.currentSlide-this.options.slidesToScroll,this.currentSlide-1==0&&(this.direction=1))),this.slideHandler(t))},e.prototype.buildArrows=function(){!0===this.options.arrows&&(this.$prevArrow=t(this.options.prevArrow).addClass("slick-arrow"),this.$nextArrow=t(this.options.nextArrow).addClass("slick-arrow"),this.slideCount>this.options.slidesToShow?(this.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),this.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.prependTo(this.options.appendArrows),this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.appendTo(this.options.appendArrows),!0!==this.options.infinite&&this.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):this.$prevArrow.add(this.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},e.prototype.buildDots=function(){var e,i;if(!0===this.options.dots&&this.slideCount>this.options.slidesToShow){for(this.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(this.options.dotsClass),e=0;e<=this.getDotCount();e+=1)i.append(t("<li />").append(this.options.customPaging.call(this,this,e)));this.$dots=i.appendTo(this.options.appendDots),this.$dots.find("li").first().addClass("slick-active")}},e.prototype.buildOut=function(){this.$slides=this.$slider.children(this.options.slide+":not(.slick-cloned)").addClass("slick-slide"),this.slideCount=this.$slides.length,this.$slides.each(function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")}),this.$slider.addClass("slick-slider"),this.$slideTrack=0===this.slideCount?t('<div class="slick-track"/>').appendTo(this.$slider):this.$slides.wrapAll('<div class="slick-track"/>').parent(),this.$list=this.$slideTrack.wrap('<div class="slick-list"/>').parent(),this.$slideTrack.css("opacity",0),!0!==this.options.centerMode&&!0!==this.options.swipeToSlide||(this.options.slidesToScroll=1),t("img[data-lazy]",this.$slider).not("[src]").addClass("slick-loading"),this.setupInfinite(),this.buildArrows(),this.buildDots(),this.updateDots(),this.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),!0===this.options.draggable&&this.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,s,n,o,r;if(s=document.createDocumentFragment(),o=this.$slider.children(),this.options.rows>0){for(r=this.options.slidesPerRow*this.options.rows,n=Math.ceil(o.length/r),t=0;t<n;t++){var a=document.createElement("div");for(e=0;e<this.options.rows;e++){var l=document.createElement("div");for(i=0;i<this.options.slidesPerRow;i++){var c=t*r+(e*this.options.slidesPerRow+i);o.get(c)&&l.appendChild(o.get(c))}a.appendChild(l)}s.appendChild(a)}this.$slider.empty().append(s),this.$slider.children().children().children().css({width:100/this.options.slidesPerRow+"%",display:"inline-block"})}},e.prototype.checkResponsive=function(e,i){var s,n,o,r=!1,a=this.$slider.width(),l=window.innerWidth||t(window).width();if("window"===this.respondTo?o=l:"slider"===this.respondTo?o=a:"min"===this.respondTo&&(o=Math.min(l,a)),this.options.responsive&&this.options.responsive.length&&null!==this.options.responsive){n=null;for(s in this.breakpoints)this.breakpoints.hasOwnProperty(s)&&(!1===this.originalSettings.mobileFirst?o<this.breakpoints[s]&&(n=this.breakpoints[s]):o>this.breakpoints[s]&&(n=this.breakpoints[s]));null!==n?null!==this.activeBreakpoint?(n!==this.activeBreakpoint||i)&&(this.activeBreakpoint=n,"unslick"===this.breakpointSettings[n]?this.unslick(n):(this.options=t.extend({},this.originalSettings,this.breakpointSettings[n]),!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e)),r=n):(this.activeBreakpoint=n,"unslick"===this.breakpointSettings[n]?this.unslick(n):(this.options=t.extend({},this.originalSettings,this.breakpointSettings[n]),!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e)),r=n):null!==this.activeBreakpoint&&(this.activeBreakpoint=null,this.options=this.originalSettings,!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e),r=n),e||!1===r||this.$slider.trigger("breakpoint",[this,r])}},e.prototype.changeSlide=function(e,i){var s,n,o,r=t(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),o=this.slideCount%this.options.slidesToScroll!=0,s=o?0:(this.slideCount-this.currentSlide)%this.options.slidesToScroll,e.data.message){case"previous":n=0===s?this.options.slidesToScroll:this.options.slidesToShow-s,this.slideCount>this.options.slidesToShow&&this.slideHandler(this.currentSlide-n,!1,i);break;case"next":n=0===s?this.options.slidesToScroll:s,this.slideCount>this.options.slidesToShow&&this.slideHandler(this.currentSlide+n,!1,i);break;case"index":var a=0===e.data.index?0:e.data.index||r.index()*this.options.slidesToScroll;this.slideHandler(this.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},e.prototype.checkNavigable=function(t){var e,i;if(e=this.getNavigableIndexes(),i=0,t>e[e.length-1])t=e[e.length-1];else for(var s in e){if(t<e[s]){t=i;break}i=e[s]}return t},e.prototype.cleanUpEvents=function(){this.options.dots&&null!==this.$dots&&(t("li",this.$dots).off("click.slick",this.changeSlide).off("mouseenter.slick",t.proxy(this.interrupt,this,!0)).off("mouseleave.slick",t.proxy(this.interrupt,this,!1)),!0===this.options.accessibility&&this.$dots.off("keydown.slick",this.keyHandler)),this.$slider.off("focus.slick blur.slick"),!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow&&this.$prevArrow.off("click.slick",this.changeSlide),this.$nextArrow&&this.$nextArrow.off("click.slick",this.changeSlide),!0===this.options.accessibility&&(this.$prevArrow&&this.$prevArrow.off("keydown.slick",this.keyHandler),this.$nextArrow&&this.$nextArrow.off("keydown.slick",this.keyHandler))),this.$list.off("touchstart.slick mousedown.slick",this.swipeHandler),this.$list.off("touchmove.slick mousemove.slick",this.swipeHandler),this.$list.off("touchend.slick mouseup.slick",this.swipeHandler),this.$list.off("touchcancel.slick mouseleave.slick",this.swipeHandler),this.$list.off("click.slick",this.clickHandler),t(document).off(this.visibilityChange,this.visibility),this.cleanUpSlideEvents(),!0===this.options.accessibility&&this.$list.off("keydown.slick",this.keyHandler),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().off("click.slick",this.selectHandler),t(window).off("orientationchange.slick.slick-"+this.instanceUid,this.orientationChange),t(window).off("resize.slick.slick-"+this.instanceUid,this.resize),t("[draggable!=true]",this.$slideTrack).off("dragstart",this.preventDefault),t(window).off("load.slick.slick-"+this.instanceUid,this.setPosition)},e.prototype.cleanUpSlideEvents=function(){this.$list.off("mouseenter.slick",t.proxy(this.interrupt,this,!0)),this.$list.off("mouseleave.slick",t.proxy(this.interrupt,this,!1))},e.prototype.cleanUpRows=function(){var t;this.options.rows>0&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},e.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(e){this.autoPlayClear(),this.touchObject={},this.cleanUpEvents(),t(".slick-cloned",this.$slider).detach(),this.$dots&&this.$dots.remove(),this.$prevArrow&&this.$prevArrow.length&&(this.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.remove()),this.$nextArrow&&this.$nextArrow.length&&(this.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.remove()),this.$slides&&(this.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){t(this).attr("style",t(this).data("originalStyling"))}),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.detach(),this.$list.detach(),this.$slider.append(this.$slides)),this.cleanUpRows(),this.$slider.removeClass("slick-slider"),this.$slider.removeClass("slick-initialized"),this.$slider.removeClass("slick-dotted"),this.unslicked=!0,e||this.$slider.trigger("destroy",[this])},e.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},e.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},e.prototype.fadeSlideOut=function(t){!1===this.cssTransitions?this.$slides.eq(t).animate({opacity:0,zIndex:this.options.zIndex-2},this.options.speed,this.options.easing):(this.applyTransition(t),this.$slides.eq(t).css({opacity:0,zIndex:this.options.zIndex-2}))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){null!==t&&(this.$slidesCache=this.$slides,this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.filter(t).appendTo(this.$slideTrack),this.reinit())},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var s=t(this);setTimeout(function(){e.options.pauseOnFocus&&(e.focussed=s.is(":focus"),e.autoPlay())},0)})},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){return this.currentSlide},e.prototype.getDotCount=function(){var t=0,e=0,i=0;if(!0===this.options.infinite)if(this.slideCount<=this.options.slidesToShow)++i;else for(;t<this.slideCount;)++i,t=e+this.options.slidesToScroll,e+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;else if(!0===this.options.centerMode)i=this.slideCount;else if(this.options.asNavFor)for(;t<this.slideCount;)++i,t=e+this.options.slidesToScroll,e+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;else i=1+Math.ceil((this.slideCount-this.options.slidesToShow)/this.options.slidesToScroll);return i-1},e.prototype.getLeft=function(t){var e,i,s,n,o=0;return this.slideOffset=0,i=this.$slides.first().outerHeight(!0),!0===this.options.infinite?(this.slideCount>this.options.slidesToShow&&(this.slideOffset=this.slideWidth*this.options.slidesToShow*-1,n=-1,!0===this.options.vertical&&!0===this.options.centerMode&&(2===this.options.slidesToShow?n=-1.5:1===this.options.slidesToShow&&(n=-2)),o=i*this.options.slidesToShow*n),this.slideCount%this.options.slidesToScroll!=0&&t+this.options.slidesToScroll>this.slideCount&&this.slideCount>this.options.slidesToShow&&(t>this.slideCount?(this.slideOffset=(this.options.slidesToShow-(t-this.slideCount))*this.slideWidth*-1,o=(this.options.slidesToShow-(t-this.slideCount))*i*-1):(this.slideOffset=this.slideCount%this.options.slidesToScroll*this.slideWidth*-1,o=this.slideCount%this.options.slidesToScroll*i*-1))):t+this.options.slidesToShow>this.slideCount&&(this.slideOffset=(t+this.options.slidesToShow-this.slideCount)*this.slideWidth,o=(t+this.options.slidesToShow-this.slideCount)*i),this.slideCount<=this.options.slidesToShow&&(this.slideOffset=0,o=0),!0===this.options.centerMode&&this.slideCount<=this.options.slidesToShow?this.slideOffset=this.slideWidth*Math.floor(this.options.slidesToShow)/2-this.slideWidth*this.slideCount/2:!0===this.options.centerMode&&!0===this.options.infinite?this.slideOffset+=this.slideWidth*Math.floor(this.options.slidesToShow/2)-this.slideWidth:!0===this.options.centerMode&&(this.slideOffset=0,this.slideOffset+=this.slideWidth*Math.floor(this.options.slidesToShow/2)),e=!1===this.options.vertical?t*this.slideWidth*-1+this.slideOffset:t*i*-1+o,!0===this.options.variableWidth&&(s=this.slideCount<=this.options.slidesToShow||!1===this.options.infinite?this.$slideTrack.children(".slick-slide").eq(t):this.$slideTrack.children(".slick-slide").eq(t+this.options.slidesToShow),e=!0===this.options.rtl?s[0]?-1*(this.$slideTrack.width()-s[0].offsetLeft-s.width()):0:s[0]?-1*s[0].offsetLeft:0,!0===this.options.centerMode&&(s=this.slideCount<=this.options.slidesToShow||!1===this.options.infinite?this.$slideTrack.children(".slick-slide").eq(t):this.$slideTrack.children(".slick-slide").eq(t+this.options.slidesToShow+1),e=!0===this.options.rtl?s[0]?-1*(this.$slideTrack.width()-s[0].offsetLeft-s.width()):0:s[0]?-1*s[0].offsetLeft:0,e+=(this.$list.width()-s.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){return this.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=0,i=0,s=[];for(!1===this.options.infinite?t=this.slideCount:(e=-1*this.options.slidesToScroll,i=-1*this.options.slidesToScroll,t=2*this.slideCount);e<t;)s.push(e),e=i+this.options.slidesToScroll,i+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;return s},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,s=this;return i=!0===s.options.centerMode?s.slideWidth*Math.floor(s.options.slidesToShow/2):0,!0===s.options.swipeToSlide?(s.$slideTrack.find(".slick-slide").each(function(n,o){if(o.offsetLeft-i+t(o).outerWidth()/2>-1*s.swipeLeft)return e=o,!1}),Math.abs(t(e).attr("data-slick-index")-s.currentSlide)||1):s.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(e){t(this.$slider).hasClass("slick-initialized")||(t(this.$slider).addClass("slick-initialized"),this.buildRows(),this.buildOut(),this.setProps(),this.startLoad(),this.loadSlider(),this.initializeEvents(),this.updateArrows(),this.updateDots(),this.checkResponsive(!0),this.focusHandler()),e&&this.$slider.trigger("init",[this]),!0===this.options.accessibility&&this.initADA(),this.options.autoplay&&(this.paused=!1,this.autoPlay())},e.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),s=e.getNavigableIndexes().filter(function(t){return t>=0&&t<e.slideCount});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(i){var n=s.indexOf(i);if(t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),-1!==n){var o="slick-slide-control"+e.instanceUid+n;t("#"+o).length&&t(this).attr({"aria-describedby":o})}}),e.$dots.attr("role","tablist").find("li").each(function(n){var o=s[n];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+n,"aria-controls":"slick-slide"+e.instanceUid+o,"aria-label":n+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var n=e.currentSlide,o=n+e.options.slidesToShow;n<o;n++)e.options.focusOnChange?e.$slides.eq(n).attr({tabindex:"0"}):e.$slides.eq(n).removeAttr("tabindex");e.activateADA()},e.prototype.initArrowEvents=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},this.changeSlide),this.$nextArrow.off("click.slick").on("click.slick",{message:"next"},this.changeSlide),!0===this.options.accessibility&&(this.$prevArrow.on("keydown.slick",this.keyHandler),this.$nextArrow.on("keydown.slick",this.keyHandler)))},e.prototype.initDotEvents=function(){!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&(t("li",this.$dots).on("click.slick",{message:"index"},this.changeSlide),!0===this.options.accessibility&&this.$dots.on("keydown.slick",this.keyHandler)),!0===this.options.dots&&!0===this.options.pauseOnDotsHover&&this.slideCount>this.options.slidesToShow&&t("li",this.$dots).on("mouseenter.slick",t.proxy(this.interrupt,this,!0)).on("mouseleave.slick",t.proxy(this.interrupt,this,!1))},e.prototype.initSlideEvents=function(){this.options.pauseOnHover&&(this.$list.on("mouseenter.slick",t.proxy(this.interrupt,this,!0)),this.$list.on("mouseleave.slick",t.proxy(this.interrupt,this,!1)))},e.prototype.initializeEvents=function(){this.initArrowEvents(),this.initDotEvents(),this.initSlideEvents(),this.$list.on("touchstart.slick mousedown.slick",{action:"start"},this.swipeHandler),this.$list.on("touchmove.slick mousemove.slick",{action:"move"},this.swipeHandler),this.$list.on("touchend.slick mouseup.slick",{action:"end"},this.swipeHandler),this.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},this.swipeHandler),this.$list.on("click.slick",this.clickHandler),t(document).on(this.visibilityChange,t.proxy(this.visibility,this)),!0===this.options.accessibility&&this.$list.on("keydown.slick",this.keyHandler),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().on("click.slick",this.selectHandler),t(window).on("orientationchange.slick.slick-"+this.instanceUid,t.proxy(this.orientationChange,this)),t(window).on("resize.slick.slick-"+this.instanceUid,t.proxy(this.resize,this)),t("[draggable!=true]",this.$slideTrack).on("dragstart",this.preventDefault),t(window).on("load.slick.slick-"+this.instanceUid,this.setPosition),t(this.setPosition)},e.prototype.initUI=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.show(),this.$nextArrow.show()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.show()},e.prototype.keyHandler=function(t){t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===this.options.accessibility?this.changeSlide({data:{message:!0===this.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===this.options.accessibility&&this.changeSlide({data:{message:!0===this.options.rtl?"previous":"next"}}))},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each(function(){var e=t(this),i=t(this).attr("data-lazy"),s=t(this).attr("data-srcset"),n=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){e.animate({opacity:0},100,function(){s&&(e.attr("srcset",s),n&&e.attr("sizes",n)),e.attr("src",i).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,e,i])})},r.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},r.src=i})}var i,s,n,o=this;if(!0===o.options.centerMode?!0===o.options.infinite?n=(s=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(s=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),n=o.options.slidesToShow/2+1+2+o.currentSlide):(s=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,n=Math.ceil(s+o.options.slidesToShow),!0===o.options.fade&&(s>0&&s--,n<=o.slideCount&&n++)),i=o.$slider.find(".slick-slide").slice(s,n),"anticipated"===o.options.lazyLoad)for(var r=s-1,a=n,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)r<0&&(r=o.slideCount-1),i=(i=i.add(l.eq(r))).add(l.eq(a)),r--,a++;e(i),o.slideCount<=o.options.slidesToShow?e(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?e(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&e(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},e.prototype.loadSlider=function(){this.setPosition(),this.$slideTrack.css({opacity:1}),this.$slider.removeClass("slick-loading"),this.initUI(),"progressive"===this.options.lazyLoad&&this.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},e.prototype.postSlide=function(e){if(!this.unslicked&&(this.$slider.trigger("afterChange",[this,e]),this.animating=!1,this.slideCount>this.options.slidesToShow&&this.setPosition(),this.swipeLeft=null,this.options.autoplay&&this.autoPlay(),!0===this.options.accessibility&&(this.initADA(),this.options.focusOnChange))){t(this.$slides.get(this.currentSlide)).attr("tabindex",0).focus()}},e.prototype.prev=e.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(e){e=e||1;var i,s,n,o,r,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),s=i.attr("data-lazy"),n=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){n&&(i.attr("srcset",n),o&&i.attr("sizes",o)),i.attr("src",s).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,s]),a.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){a.progressiveLazyLoad(e+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,s]),a.progressiveLazyLoad())},r.src=s):a.$slider.trigger("allImagesLoaded",[a])},e.prototype.refresh=function(e){var i,s;s=this.slideCount-this.options.slidesToShow,!this.options.infinite&&this.currentSlide>s&&(this.currentSlide=s),this.slideCount<=this.options.slidesToShow&&(this.currentSlide=0),i=this.currentSlide,this.destroy(!0),t.extend(this,this.initials,{currentSlide:i}),this.init(),e||this.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.registerBreakpoints=function(){var e,i,s,n=this,o=n.options.responsive||null;if("array"===t.type(o)&&o.length){n.respondTo=n.options.respondTo||"window";for(e in o)if(s=n.breakpoints.length-1,o.hasOwnProperty(e)){for(i=o[e].breakpoint;s>=0;)n.breakpoints[s]&&n.breakpoints[s]===i&&n.breakpoints.splice(s,1),s--;n.breakpoints.push(i),n.breakpointSettings[i]=o[e].settings}n.breakpoints.sort(function(t,e){return n.options.mobileFirst?t-e:e-t})}},e.prototype.reinit=function(){this.$slides=this.$slideTrack.children(this.options.slide).addClass("slick-slide"),this.slideCount=this.$slides.length,this.currentSlide>=this.slideCount&&0!==this.currentSlide&&(this.currentSlide=this.currentSlide-this.options.slidesToScroll),this.slideCount<=this.options.slidesToShow&&(this.currentSlide=0),this.registerBreakpoints(),this.setProps(),this.setupInfinite(),this.buildArrows(),this.updateArrows(),this.initArrowEvents(),this.buildDots(),this.updateDots(),this.initDotEvents(),this.cleanUpSlideEvents(),this.initSlideEvents(),this.checkResponsive(!1,!0),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().on("click.slick",this.selectHandler),this.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),this.setPosition(),this.focusHandler(),this.paused=!this.options.autoplay,this.autoPlay(),this.$slider.trigger("reInit",[this])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){if(t="boolean"==typeof t?!0===(e=t)?0:this.slideCount-1:!0===e?--t:t,this.slideCount<1||t<0||t>this.slideCount-1)return!1;this.unload(),!0===i?this.$slideTrack.children().remove():this.$slideTrack.children(this.options.slide).eq(t).remove(),this.$slides=this.$slideTrack.children(this.options.slide),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.append(this.$slides),this.$slidesCache=this.$slides,this.reinit()},e.prototype.setCSS=function(t){var e,i,s={};!0===this.options.rtl&&(t=-t),e="left"==this.positionProp?Math.ceil(t)+"px":"0px",i="top"==this.positionProp?Math.ceil(t)+"px":"0px",s[this.positionProp]=t,!1===this.transformsEnabled?this.$slideTrack.css(s):(s={},!1===this.cssTransitions?(s[this.animType]="translate("+e+", "+i+")",this.$slideTrack.css(s)):(s[this.animType]="translate3d("+e+", "+i+", 0px)",this.$slideTrack.css(s)))},e.prototype.setDimensions=function(){!1===this.options.vertical?!0===this.options.centerMode&&this.$list.css({padding:"0px "+this.options.centerPadding}):(this.$list.height(this.$slides.first().outerHeight(!0)*this.options.slidesToShow),!0===this.options.centerMode&&this.$list.css({padding:this.options.centerPadding+" 0px"})),this.listWidth=this.$list.width(),this.listHeight=this.$list.height(),!1===this.options.vertical&&!1===this.options.variableWidth?(this.slideWidth=Math.ceil(this.listWidth/this.options.slidesToShow),this.$slideTrack.width(Math.ceil(this.slideWidth*this.$slideTrack.children(".slick-slide").length))):!0===this.options.variableWidth?this.$slideTrack.width(5e3*this.slideCount):(this.slideWidth=Math.ceil(this.listWidth),this.$slideTrack.height(Math.ceil(this.$slides.first().outerHeight(!0)*this.$slideTrack.children(".slick-slide").length)));var t=this.$slides.first().outerWidth(!0)-this.$slides.first().width();!1===this.options.variableWidth&&this.$slideTrack.children(".slick-slide").width(this.slideWidth-t)},e.prototype.setFade=function(){var e,i=this;i.$slides.each(function(s,n){e=i.slideWidth*s*-1,!0===i.options.rtl?t(n).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(n).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},e.prototype.setHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var t=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.css("height",t)}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,i,s,n,o,r=this,a=!1;if("object"===t.type(arguments[0])?(s=arguments[0],a=arguments[1],o="multiple"):"string"===t.type(arguments[0])&&(s=arguments[0],n=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[s]=n;else if("multiple"===o)t.each(s,function(t,e){r.options[t]=e});else if("responsive"===o)for(i in n)if("array"!==t.type(r.options.responsive))r.options.responsive=[n[i]];else{for(e=r.options.responsive.length-1;e>=0;)r.options.responsive[e].breakpoint===n[i].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(n[i])}a&&(r.unload(),r.reinit())},e.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},e.prototype.setProps=function(){var t=document.body.style;this.positionProp=!0===this.options.vertical?"top":"left","top"===this.positionProp?this.$slider.addClass("slick-vertical"):this.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===this.options.useCSS&&(this.cssTransitions=!0),this.options.fade&&("number"==typeof this.options.zIndex?this.options.zIndex<3&&(this.options.zIndex=3):this.options.zIndex=this.defaults.zIndex),void 0!==t.OTransform&&(this.animType="OTransform",this.transformType="-o-transform",this.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(this.animType=!1)),void 0!==t.MozTransform&&(this.animType="MozTransform",this.transformType="-moz-transform",this.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(this.animType=!1)),void 0!==t.webkitTransform&&(this.animType="webkitTransform",this.transformType="-webkit-transform",this.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(this.animType=!1)),void 0!==t.msTransform&&(this.animType="msTransform",this.transformType="-ms-transform",this.transitionType="msTransition",void 0===t.msTransform&&(this.animType=!1)),void 0!==t.transform&&!1!==this.animType&&(this.animType="transform",this.transformType="transform",this.transitionType="transition"),this.transformsEnabled=this.options.useTransform&&null!==this.animType&&!1!==this.animType},e.prototype.setSlideClasses=function(t){var e,i,s,n;if(i=this.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),this.$slides.eq(t).addClass("slick-current"),!0===this.options.centerMode){var o=this.options.slidesToShow%2==0?1:0;e=Math.floor(this.options.slidesToShow/2),!0===this.options.infinite&&(t>=e&&t<=this.slideCount-1-e?this.$slides.slice(t-e+o,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(s=this.options.slidesToShow+t,i.slice(s-e+1+o,s+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-this.options.slidesToShow).addClass("slick-center"):t===this.slideCount-1&&i.eq(this.options.slidesToShow).addClass("slick-center")),this.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=this.slideCount-this.options.slidesToShow?this.$slides.slice(t,t+this.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=this.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(n=this.slideCount%this.options.slidesToShow,s=!0===this.options.infinite?this.options.slidesToShow+t:t,this.options.slidesToShow==this.options.slidesToScroll&&this.slideCount-t<this.options.slidesToShow?i.slice(s-(this.options.slidesToShow-n),s+n).addClass("slick-active").attr("aria-hidden","false"):i.slice(s,s+this.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==this.options.lazyLoad&&"anticipated"!==this.options.lazyLoad||this.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,s;if(!0===this.options.fade&&(this.options.centerMode=!1),!0===this.options.infinite&&!1===this.options.fade&&(i=null,this.slideCount>this.options.slidesToShow)){for(s=!0===this.options.centerMode?this.options.slidesToShow+1:this.options.slidesToShow,e=this.slideCount;e>this.slideCount-s;e-=1)i=e-1,t(this.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-this.slideCount).prependTo(this.$slideTrack).addClass("slick-cloned");for(e=0;e<s+this.slideCount;e+=1)i=e,t(this.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+this.slideCount).appendTo(this.$slideTrack).addClass("slick-cloned");this.$slideTrack.find(".slick-cloned").find("[id]").each(function(){t(this).attr("id","")})}},e.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},e.prototype.selectHandler=function(e){var i=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),s=parseInt(i.attr("data-slick-index"));s||(s=0),this.slideCount<=this.options.slidesToShow?this.slideHandler(s,!1,!0):this.slideHandler(s)},e.prototype.slideHandler=function(t,e,i){var s,n,o,r,a,l=null,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),s=t,l=c.getLeft(s),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(s=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(s)}):c.postSlide(s));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(s=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(s)}):c.postSlide(s));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),n=s<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+s:s>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:s-c.slideCount:s,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,n]),o=c.currentSlide,c.currentSlide=n,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(o),c.fadeSlide(n,function(){c.postSlide(n)})):c.postSlide(n),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(n)}):c.postSlide(n)}},e.prototype.startLoad=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.hide(),this.$nextArrow.hide()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.hide(),this.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,s;return t=this.touchObject.startX-this.touchObject.curX,e=this.touchObject.startY-this.touchObject.curY,i=Math.atan2(e,t),(s=Math.round(180*i/Math.PI))<0&&(s=360-Math.abs(s)),s<=45&&s>=0?!1===this.options.rtl?"left":"right":s<=360&&s>=315?!1===this.options.rtl?"left":"right":s>=135&&s<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?s>=35&&s<=135?"down":"up":"vertical"},e.prototype.swipeEnd=function(t){var e,i;if(this.dragging=!1,this.swiping=!1,this.scrolling)return this.scrolling=!1,!1;if(this.interrupted=!1,this.shouldClick=!(this.touchObject.swipeLength>10),void 0===this.touchObject.curX)return!1;if(!0===this.touchObject.edgeHit&&this.$slider.trigger("edge",[this,this.swipeDirection()]),this.touchObject.swipeLength>=this.touchObject.minSwipe){switch(i=this.swipeDirection()){case"left":case"down":e=this.options.swipeToSlide?this.checkNavigable(this.currentSlide+this.getSlideCount()):this.currentSlide+this.getSlideCount(),this.currentDirection=0;break;case"right":case"up":e=this.options.swipeToSlide?this.checkNavigable(this.currentSlide-this.getSlideCount()):this.currentSlide-this.getSlideCount(),this.currentDirection=1}"vertical"!=i&&(this.slideHandler(e),this.touchObject={},this.$slider.trigger("swipe",[this,i]))}else this.touchObject.startX!==this.touchObject.curX&&(this.slideHandler(this.currentSlide),this.touchObject={})},e.prototype.swipeHandler=function(t){if(!(!1===this.options.swipe||"ontouchend"in document&&!1===this.options.swipe||!1===this.options.draggable&&-1!==t.type.indexOf("mouse")))switch(this.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,this.touchObject.minSwipe=this.listWidth/this.options.touchThreshold,!0===this.options.verticalSwiping&&(this.touchObject.minSwipe=this.listHeight/this.options.touchThreshold),t.data.action){case"start":this.swipeStart(t);break;case"move":this.swipeMove(t);break;case"end":this.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,s,n,o,r;return o=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!this.dragging||this.scrolling||o&&1!==o.length)&&(e=this.getLeft(this.currentSlide),this.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,this.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,this.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(this.touchObject.curX-this.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(this.touchObject.curY-this.touchObject.startY,2))),!this.options.verticalSwiping&&!this.swiping&&r>4?(this.scrolling=!0,!1):(!0===this.options.verticalSwiping&&(this.touchObject.swipeLength=r),i=this.swipeDirection(),void 0!==t.originalEvent&&this.touchObject.swipeLength>4&&(this.swiping=!0,t.preventDefault()),n=(!1===this.options.rtl?1:-1)*(this.touchObject.curX>this.touchObject.startX?1:-1),!0===this.options.verticalSwiping&&(n=this.touchObject.curY>this.touchObject.startY?1:-1),s=this.touchObject.swipeLength,this.touchObject.edgeHit=!1,!1===this.options.infinite&&(0===this.currentSlide&&"right"===i||this.currentSlide>=this.getDotCount()&&"left"===i)&&(s=this.touchObject.swipeLength*this.options.edgeFriction,this.touchObject.edgeHit=!0),!1===this.options.vertical?this.swipeLeft=e+s*n:this.swipeLeft=e+s*(this.$list.height()/this.listWidth)*n,!0===this.options.verticalSwiping&&(this.swipeLeft=e+s*n),!0!==this.options.fade&&!1!==this.options.touchMove&&(!0===this.animating?(this.swipeLeft=null,!1):void this.setCSS(this.swipeLeft))))},e.prototype.swipeStart=function(t){var e;if(this.interrupted=!0,1!==this.touchObject.fingerCount||this.slideCount<=this.options.slidesToShow)return this.touchObject={},!1;void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),this.touchObject.startX=this.touchObject.curX=void 0!==e?e.pageX:t.clientX,this.touchObject.startY=this.touchObject.curY=void 0!==e?e.pageY:t.clientY,this.dragging=!0},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},e.prototype.unload=function(){t(".slick-cloned",this.$slider).remove(),this.$dots&&this.$dots.remove(),this.$prevArrow&&this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.remove(),this.$nextArrow&&this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.remove(),this.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},e.prototype.updateArrows=function(){Math.floor(this.options.slidesToShow/2),!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&!this.options.infinite&&(this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===this.currentSlide?(this.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):this.currentSlide>=this.slideCount-this.options.slidesToShow&&!1===this.options.centerMode?(this.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):this.currentSlide>=this.slideCount-1&&!0===this.options.centerMode&&(this.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},e.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},e.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},t.fn.slick=function(){var t,i,s=arguments[0],n=Array.prototype.slice.call(arguments,1),o=this.length;for(t=0;t<o;t++)if("object"==typeof s||void 0===s?this[t].slick=new e(this[t],s):i=this[t].slick[s].apply(this[t].slick,n),void 0!==i)return i;return this}}),function(t){"object"==typeof module&&"object"==typeof module.exports?t(require("jquery"),window,document):t(jQuery,window,document)}(function(t,e,i,s){var n=[],o=function(){return n.length?n[n.length-1]:null},r=function(){var t,e=!1;for(t=n.length-1;t>=0;t--)n[t].$blocker&&(n[t].$blocker.toggleClass("current",!e).toggleClass("behind",e),e=!0)};t.modal=function(e,i){var s,r;if(this.$body=t("body"),this.options=t.extend({},t.modal.defaults,i),this.options.doFade=!isNaN(parseInt(this.options.fadeDuration,10)),this.$blocker=null,this.options.closeExisting)for(;t.modal.isActive();)t.modal.close();if(n.push(this),e.is("a"))if(r=e.attr("href"),this.anchor=e,/^#/.test(r)){if(this.$elm=t(r),1!==this.$elm.length)return null;this.$body.append(this.$elm),this.open()}else this.$elm=t("<div>"),this.$body.append(this.$elm),s=function(t,e){e.elm.remove()},this.showSpinner(),e.trigger(t.modal.AJAX_SEND),t.get(r).done(function(i){if(t.modal.isActive()){e.trigger(t.modal.AJAX_SUCCESS);var n=o();n.$elm.empty().append(i).on(t.modal.CLOSE,s),n.hideSpinner(),n.open(),e.trigger(t.modal.AJAX_COMPLETE)}}).fail(function(){e.trigger(t.modal.AJAX_FAIL);o().hideSpinner(),n.pop(),e.trigger(t.modal.AJAX_COMPLETE)});else this.$elm=e,this.anchor=e,this.$body.append(this.$elm),this.open()},t.modal.prototype={constructor:t.modal,open:function(){var e=this;this.block(),this.anchor.blur(),this.options.doFade?setTimeout(function(){e.show()},this.options.fadeDuration*this.options.fadeDelay):this.show(),t(i).off("keydown.modal").on("keydown.modal",function(t){var e=o();27===t.which&&e.options.escapeClose&&e.close()}),this.options.clickClose&&this.$blocker.click(function(e){e.target===this&&t.modal.close()})},close:function(){n.pop(),this.unblock(),this.hide(),t.modal.isActive()||t(i).off("keydown.modal")},block:function(){this.$elm.trigger(t.modal.BEFORE_BLOCK,[this._ctx()]),this.$body.css("overflow","hidden"),this.$blocker=t('<div class="'+this.options.blockerClass+' blocker current"></div>').appendTo(this.$body),r(),this.options.doFade&&this.$blocker.css("opacity",0).animate({opacity:1},this.options.fadeDuration),this.$elm.trigger(t.modal.BLOCK,[this._ctx()])},unblock:function(e){!e&&this.options.doFade?this.$blocker.fadeOut(this.options.fadeDuration,this.unblock.bind(this,!0)):(this.$blocker.children().appendTo(this.$body),this.$blocker.remove(),this.$blocker=null,r(),t.modal.isActive()||this.$body.css("overflow",""))},show:function(){this.$elm.trigger(t.modal.BEFORE_OPEN,[this._ctx()]),this.options.showClose&&(this.closeButton=t('<a href="#close-modal" rel="modal:close" class="close-modal '+this.options.closeClass+'">'+this.options.closeText+"</a>"),this.$elm.append(this.closeButton)),this.$elm.addClass(this.options.modalClass).appendTo(this.$blocker),this.options.doFade?this.$elm.css({opacity:0,display:"inline-block"}).animate({opacity:1},this.options.fadeDuration):this.$elm.css("display","inline-block"),this.$elm.trigger(t.modal.OPEN,[this._ctx()])},hide:function(){this.$elm.trigger(t.modal.BEFORE_CLOSE,[this._ctx()]),this.closeButton&&this.closeButton.remove();var e=this;this.options.doFade?this.$elm.fadeOut(this.options.fadeDuration,function(){e.$elm.trigger(t.modal.AFTER_CLOSE,[e._ctx()])}):this.$elm.hide(0,function(){e.$elm.trigger(t.modal.AFTER_CLOSE,[e._ctx()])}),this.$elm.trigger(t.modal.CLOSE,[this._ctx()])},showSpinner:function(){this.options.showSpinner&&(this.spinner=this.spinner||t('<div class="'+this.options.modalClass+'-spinner"></div>').append(this.options.spinnerHtml),this.$body.append(this.spinner),this.spinner.show())},hideSpinner:function(){this.spinner&&this.spinner.remove()},_ctx:function(){return{elm:this.$elm,$elm:this.$elm,$blocker:this.$blocker,options:this.options}}},t.modal.close=function(e){if(t.modal.isActive()){e&&e.preventDefault();var i=o();return i.close(),i.$elm}},t.modal.isActive=function(){return n.length>0},t.modal.getCurrent=o,t.modal.defaults={closeExisting:!0,escapeClose:!0,clickClose:!0,closeText:"Close",closeClass:"",modalClass:"modal",blockerClass:"jquery-modal",spinnerHtml:'<div class="rect1"></div><div class="rect2"></div><div class="rect3"></div><div class="rect4"></div>',showSpinner:!0,showClose:!0,fadeDuration:null,fadeDelay:1},t.modal.BEFORE_BLOCK="modal:before-block",t.modal.BLOCK="modal:block",t.modal.BEFORE_OPEN="modal:before-open",t.modal.OPEN="modal:open",t.modal.BEFORE_CLOSE="modal:before-close",t.modal.CLOSE="modal:close",t.modal.AFTER_CLOSE="modal:after-close",t.modal.AJAX_SEND="modal:ajax:send",t.modal.AJAX_SUCCESS="modal:ajax:success",t.modal.AJAX_FAIL="modal:ajax:fail",t.modal.AJAX_COMPLETE="modal:ajax:complete",t.fn.modal=function(e){return 1===this.length&&new t.modal(this,e),this},t(i).on("click.modal",'a[rel~="modal:close"]',t.modal.close),t(i).on("click.modal",'a[rel~="modal:open"]',function(e){e.preventDefault(),t(this).modal()})}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof module&&module.exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){t.extend(t.fn,{validate:function(e){if(this.length){var i=t.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(e){i.submitButton=e.currentTarget,t(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(e){function s(){var s,n;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(s=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),!i.settings.submitHandler||(n=i.settings.submitHandler.call(i,i.currentForm,e),s&&s.remove(),void 0!==n&&n)}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,s()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):s():(i.focusInvalid(),!1)})),i)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,i,s;return t(this[0]).is("form")?e=this.validate().form():(s=[],e=!0,i=t(this[0].form).validate(),this.each(function(){(e=i.element(this)&&e)||(s=s.concat(i.errorList))}),i.errorList=s),e},rules:function(e,i){var s,n,o,r,a,l,c=this[0];if(null!=c&&(!c.form&&c.hasAttribute("contenteditable")&&(c.form=this.closest("form")[0],c.name=this.attr("name")),null!=c.form)){if(e)switch(s=t.data(c.form,"validator").settings,n=s.rules,o=t.validator.staticRules(c),e){case"add":t.extend(o,t.validator.normalizeRule(i)),delete o.messages,n[c.name]=o,i.messages&&(s.messages[c.name]=t.extend(s.messages[c.name],i.messages));break;case"remove":return i?(l={},t.each(i.split(/\s/),function(t,e){l[e]=o[e],delete o[e]}),l):(delete n[c.name],o)}return(r=t.validator.normalizeRules(t.extend({},t.validator.classRules(c),t.validator.attributeRules(c),t.validator.dataRules(c),t.validator.staticRules(c)),c)).required&&(a=r.required,delete r.required,r=t.extend({required:a},r)),r.remote&&(a=r.remote,delete r.remote,r=t.extend(r,{remote:a})),r}}}),t.extend(t.expr.pseudos||t.expr[":"],{blank:function(e){return!t.trim(""+t(e).val())},filled:function(e){var i=t(e).val();return null!==i&&!!t.trim(""+i)},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:void 0===i?e:(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,function(t,i){e=e.replace(new RegExp("\\{"+t+"\\}","g"),function(){return i})}),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,i){9===i.which&&""===this.elementValue(e)||-1!==t.inArray(i.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,s){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(s):t(e).addClass(i).removeClass(s)},unhighlight:function(e,i,s){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(s):t(e).removeClass(i).addClass(s)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}."),step:t.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function e(e){!this.form&&this.hasAttribute("contenteditable")&&(this.form=t(this).closest("form")[0],this.name=t(this).attr("name"));var i=t.data(this.form,"validator"),s="on"+e.type.replace(/^validate/,""),n=i.settings;n[s]&&!t(this).is(n.ignore)&&n[s].call(i,this,e)}this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,s=this.groups={};t.each(this.settings.groups,function(e,i){"string"==typeof i&&(i=i.split(/\s/)),t.each(i,function(t,i){s[i]=e})}),i=this.settings.rules,t.each(i,function(e,s){i[e]=t.validator.normalizeRule(s)}),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",e).on("click.validate","select, option, [type='radio'], [type='checkbox']",e),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var i,s,n=this.clean(e),o=this.validationTargetFor(n),r=this,a=!0;return void 0===o?delete this.invalid[n.name]:(this.prepareElement(o),this.currentElements=t(o),(s=this.groups[o.name])&&t.each(this.groups,function(t,e){e===s&&t!==o.name&&(n=r.validationTargetFor(r.clean(r.findByName(t))))&&n.name in r.invalid&&(r.currentElements.push(n),a=r.check(n)&&a)}),i=!1!==this.check(o),a=a&&i,this.invalid[o.name]=!i,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),t(e).attr("aria-invalid",!i)),a},showErrors:function(e){if(e){var i=this;t.extend(this.errorMap,e),this.errorList=t.map(this.errorMap,function(t,e){return{message:t,element:i.findByName(e)[0]}}),this.successList=t.grep(this.successList,function(t){return!(t.name in e)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(t){var e;if(this.settings.unhighlight)for(e=0;t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,""),this.findByName(t[e].name).removeClass(this.settings.validClass);else t.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,i=0;for(e in t)void 0!==t[e]&&null!==t[e]&&!1!==t[e]&&i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(t){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,function(t){return t.element.name===e.name}).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var s=this.name||t(this).attr("name");return!s&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=t(this).closest("form")[0],this.name=s),!(s in i||!e.objectLength(t(this).rules()))&&(i[s]=!0,!0)})},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([])},reset:function(){this.resetInternals(),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i,s,n=t(e),o=e.type;return"radio"===o||"checkbox"===o?this.findByName(e.name).filter(":checked").val():"number"===o&&void 0!==e.validity?e.validity.badInput?"NaN":n.val():(i=e.hasAttribute("contenteditable")?n.text():n.val(),"file"===o?"C:\\fakepath\\"===i.substr(0,12)?i.substr(12):(s=i.lastIndexOf("/"))>=0?i.substr(s+1):(s=i.lastIndexOf("\\"))>=0?i.substr(s+1):i:"string"==typeof i?i.replace(/\r/g,""):i)},check:function(e){e=this.validationTargetFor(this.clean(e));var i,s,n,o,r=t(e).rules(),a=t.map(r,function(t,e){return e}).length,l=!1,c=this.elementValue(e);if("function"==typeof r.normalizer?o=r.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o){if("string"!=typeof(c=o.call(e,c)))throw new TypeError("The normalizer should return a string value.");delete r.normalizer}for(s in r){n={method:s,parameters:r[s]};try{if("dependency-mismatch"===(i=t.validator.methods[s].call(this,c,e,n.parameters))&&1===a){l=!0;continue}if(l=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!i)return this.formatAndAdd(e,n),!1}catch(t){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+n.method+"' method.",t),t instanceof TypeError&&(t.message+=".  Exception occurred when checking element "+e.id+", check the '"+n.method+"' method."),t}}if(!l)return this.objectLength(r)&&this.successList.push(e),!0},customDataMessage:function(e,i){return t(e).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,i){"string"==typeof i&&(i={method:i});var s=this.findDefined(this.customMessage(e.name,i.method),this.customDataMessage(e,i.method),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),n=/\$?\{(\d+)\}/g;return"function"==typeof s?s=s.call(this,i.parameters,e):n.test(s)&&(s=t.validator.format(s.replace(n,"{$1}"),i.parameters)),s},formatAndAdd:function(t,e){var i=this.defaultMessage(t,e);this.errorList.push({message:i,element:t,method:e.method}),this.errorMap[t.name]=i,this.submitted[t.name]=i},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,i;for(t=0;this.errorList[t];t++)i=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map(function(){return this.element})},showLabel:function(e,i){var s,n,o,r,a=this.errorsFor(e),l=this.idOrName(e),c=t(e).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(i)):(s=a=t("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(s=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(s):this.settings.errorPlacement?this.settings.errorPlacement.call(this,s,t(e)):s.insertAfter(e),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=a.attr("id"),c?c.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(c+=" "+o):c=o,t(e).attr("aria-describedby",c),(n=this.groups[e.name])&&(r=this,t.each(r.groups,function(e,i){i===n&&t("[name='"+r.escapeCssMeta(e)+"']",r.currentForm).attr("aria-describedby",a.attr("id"))})))),!i&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,e)),this.toShow=this.toShow.add(a)},errorsFor:function(e){var i=this.escapeCssMeta(this.idOrName(e)),s=t(e).attr("aria-describedby"),n="label[for='"+i+"'], label[for='"+i+"'] *";return s&&(n=n+", #"+this.escapeCssMeta(s).replace(/\s+/g,", #")),this.errors().filter(n)},escapeCssMeta:function(t){return t.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{boolean:function(t){return t},string:function(e,i){return!!t(e,i.form).length},function:function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,t(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],t(e).removeClass(this.settings.pendingClass),i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.submitButton&&t("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e,i){return i="string"==typeof i&&i||"remote",t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:i})})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},s=t(e).attr("class");return s&&t.each(s.split(" "),function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(t,e,i,s){/min|max|step/.test(i)&&(null===e||/number|range|text/.test(e))&&(s=Number(s),isNaN(s)&&(s=void 0)),s||0===s?t[i]=s:e===i&&"range"!==e&&(t[i]=!0)},attributeRules:function(e){var i,s,n={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)"required"===i?(""===(s=e.getAttribute(i))&&(s=!0),s=!!s):s=o.attr(i),this.normalizeAttributeRule(n,r,i,s);return n.maxlength&&/-1|2147483647|524288/.test(n.maxlength)&&delete n.maxlength,n},dataRules:function(e){var i,s,n={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)s=o.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),this.normalizeAttributeRule(n,r,i,s);return n},staticRules:function(e){var i={},s=t.data(e.form,"validator");return s.settings.rules&&(i=t.validator.normalizeRule(s.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,function(s,n){if(!1!==n){if(n.param||n.depends){var o=!0;switch(typeof n.depends){case"string":o=!!t(n.depends,i.form).length;break;case"function":o=n.depends.call(i,i)}o?e[s]=void 0===n.param||n.param:(t.data(i.form,"validator").resetElements(t(i)),delete e[s])}}else delete e[s]}),t.each(e,function(s,n){e[s]=t.isFunction(n)&&"normalizer"!==s?n(i):n}),t.each(["minlength","maxlength"],function(){e[this]&&(e[this]=Number(e[this]))}),t.each(["rangelength","range"],function(){var i;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(i=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(i[0]),Number(i[1])]))}),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),function(){i[this]=!0}),e=i}return e},addMethod:function(e,i,s){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==s?s:t.validator.messages[e],i.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,s){if(!this.depend(s,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var n=t(i).val();return n&&n.length>0}return this.checkable(i)?this.getLength(e,i)>0:e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(t)},date:function(t,e){return this.optional(e)||!/Invalid|NaN/.test(new Date(t).toString())},dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},minlength:function(e,i,s){var n=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||n>=s},maxlength:function(e,i,s){var n=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||n<=s},rangelength:function(e,i,s){var n=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||n>=s[0]&&n<=s[1]},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||t<=i},range:function(t,e,i){return this.optional(e)||t>=i[0]&&t<=i[1]},step:function(e,i,s){var n,o=t(i).attr("type"),r="Step attribute on input type "+o+" is not supported.",a=new RegExp("\\b"+o+"\\b"),l=function(t){var e=(""+t).match(/(?:\.(\d+))?$/);return e&&e[1]?e[1].length:0},c=function(t){return Math.round(t*Math.pow(10,n))},d=!0;if(o&&!a.test(["text","number","range"].join()))throw new Error(r);return n=l(s),(l(e)>n||c(e)%c(s)!=0)&&(d=!1),this.optional(i)||d},equalTo:function(e,i,s){var n=t(s);return this.settings.onfocusout&&n.not(".validate-equalTo-blur").length&&n.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){t(i).valid()}),e===n.val()},remote:function(e,i,s,n){if(this.optional(i))return"dependency-mismatch";n="string"==typeof n&&n||"remote";var o,r,a,l=this.previousValue(i,n);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[i.name][n],this.settings.messages[i.name][n]=l.message,s="string"==typeof s&&{url:s}||s,a=t.param(t.extend({data:e},s.data)),l.old===a?l.valid:(l.old=a,o=this,this.startRequest(i),r={},r[i.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:r,context:o.currentForm,success:function(t){var s,r,a,c=!0===t||"true"===t;o.settings.messages[i.name][n]=l.originalMessage,c?(a=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(i),o.formSubmitted=a,o.successList.push(i),o.invalid[i.name]=!1,o.showErrors()):(s={},r=t||o.defaultMessage(i,{method:n,parameters:e}),s[i.name]=l.message=r,o.invalid[i.name]=!0,o.showErrors(s)),l.valid=c,o.stopRequest(i,c)}},s)),"pending")}}});var e,i={};return t.ajaxPrefilter?t.ajaxPrefilter(function(t,e,s){var n=t.port;"abort"===t.mode&&(i[n]&&i[n].abort(),i[n]=s)}):(e=t.ajax,t.ajax=function(s){var n=("mode"in s?s:t.ajaxSettings).mode,o=("port"in s?s:t.ajaxSettings).port;return"abort"===n?(i[o]&&i[o].abort(),i[o]=e.apply(this,arguments),i[o]):e.apply(this,arguments)}),t}),function(t){function e(s){if(i[s])return i[s].exports;var n=i[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,e),n.l=!0,n.exports}var i={};e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:s})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,i){"use strict";function s(t,e){for(var i in t)t.hasOwnProperty(i)&&e(i,t[i])}var n=!1;try{var o=Object.defineProperty({},"passive",{get:function(){n=!0}});window.addEventListener("test",null,o)}catch(t){}t.exports.event=function(t,e,i,s){var o="on"==s?"add":"remove";e.split(" ").forEach(function(e){var s=!1;-1!=["scroll","touchstart","touchmove"].indexOf(e)&&n&&(s={passive:!0}),t[o+"EventListener"](e,i,s)})},t.exports.css=function(t,e,i){var n;if(void 0===i){if("string"==typeof e)return t.style[e];n=e}else n={},n[e]=i;s(n,function(e,i){t.style[e]=i})},t.exports.add=function(t,e){e&&t.classList.add(e)},t.exports.rm=function(t,e){e&&t.classList.remove(e)},t.exports.has=function(t,e){return!!e&&t.classList.contains(e)},t.exports.clone=function(t){var e={};return s(t||{},function(t,i){e[t]=i}),e},t.exports.qs=function(t,e){return t instanceof HTMLElement?t:(e||document).querySelector(t)},t.exports.each=s},function(t,e,i){"use strict";function s(t){var e,i,n=t&&t[0]||t,a="string"==typeof t||n instanceof HTMLElement?{root:t}:m(t),l={direction:"v",barOnCls:"_scrollbar",resizeDebounce:0,event:d,cssGuru:!1,impact:"scroller",position:"static"};a=a||{};for(var h in l)null==a[h]&&(a[h]=l[h]);e=this&&this instanceof c.jQuery,a._chain?i=a.root:e?a.root=i=this[0]:i=g(a.root||a.scroller);var u=r(i,a.direction),p=+u;if(a.index=p,p==p&&null!==u&&b[p])return b[p];a.root&&a.scroller?a.scroller=g(a.scroller,i):a.scroller=i,a.root=i;var f=function(t){var e=new s.prototype.constructor(t);return o(e,t.event,"on"),r(e.root,t.direction,"on",b.length),b.push(e),e.update(),e}(a);return f.autoUpdate&&f.autoUpdate(),f}function n(){return(new Date).getTime()}function o(t,e,i){t._eventHandlers=t._eventHandlers||[{element:t.scroller,handler:function(e){t.scroll(e)},type:"scroll"},{element:t.root,handler:function(){t.update()},type:"transitionend animationend"},{element:t.scroller,handler:function(){t.update()},type:"keyup"},{element:t.bar,handler:function(e){e.preventDefault(),t.selection(),t.drag.now=1,t.draggingCls&&u(t.root,t.draggingCls)},type:"touchstart mousedown"},{element:document,handler:function(){t.selection(1),t.drag.now=0,t.draggingCls&&f(t.root,t.draggingCls)},type:"mouseup blur touchend"},{element:document,handler:function(e){2!=e.button&&t._pos0(e)},type:"touchstart mousedown"},{element:document,handler:function(e){t.drag.now&&t.drag(e)},type:"mousemove touchmove"},{element:c,handler:function(){t.update()},type:"resize"},{element:t.root,handler:function(){t.update()},type:"sizeChange"},{element:t.clipper,handler:function(){t.clipperOnScroll()},type:"scroll"}],function(t,e){var i=0,s=t;for(void 0!==s.length&&s!==c||(s=[s]);s[i];)e.call(this,s[i],i),i++}(t._eventHandlers,function(t){if(t.element)if(t.element.length&&t.element!==c)for(var s=0;s<t.element.length;s++)e(t.element[s],t.type,t.handler,i);else e(t.element,t.type,t.handler,i)})}function r(t,e,i,s){var n="data-baron-"+e+"-id";return"on"==i?t.setAttribute(n,s):"off"==i&&t.removeAttribute(n),t.getAttribute(n)}function a(t){if(this.events&&this.events[t])for(var e=0;e<this.events[t].length;e++){var i=Array.prototype.slice.call(arguments,1);this.events[t][e].apply(this,i)}}var l=function(){return this||(0,eval)("this")}(),c=l&&l.window||l,d=i(0).event,h=i(0).css,u=i(0).add,p=i(0).has,f=i(0).rm,m=i(0).clone,g=i(0).qs,v=s,y=["left","top","right","bottom","width","height"],b=[],w={v:{x:"Y",pos:y[1],oppos:y[3],crossPos:y[0],crossOpPos:y[2],size:y[5],crossSize:y[4],crossMinSize:"min-"+y[4],crossMaxSize:"max-"+y[4],client:"clientHeight",crossClient:"clientWidth",scrollEdge:"scrollLeft",offset:"offsetHeight",crossOffset:"offsetWidth",offsetPos:"offsetTop",scroll:"scrollTop",scrollSize:"scrollHeight"},h:{x:"X",pos:y[0],oppos:y[2],crossPos:y[1],crossOpPos:y[3],size:y[4],crossSize:y[5],crossMinSize:"min-"+y[5],crossMaxSize:"max-"+y[5],client:"clientWidth",crossClient:"clientHeight",scrollEdge:"scrollTop",offset:"offsetWidth",crossOffset:"offsetHeight",offsetPos:"offsetLeft",scroll:"scrollLeft",scrollSize:"scrollWidth"}},k=15,x=/[\s\S]*Macintosh[\s\S]*\) Gecko[\s\S]*/.test(c.navigator&&c.navigator.userAgent);(s.prototype={_debounce:function(t,e){var i,s,o=this,r=function(){if(o._disposed)return clearTimeout(i),void(i=o=null);var a=n()-s;a<e&&a>=0?i=setTimeout(r,e-a):(i=null,t())};return function(){s=n(),i||(i=setTimeout(r,e))}},constructor:function(t){function e(){return r[this.origin.client]-this.barTopLimit-this.bar[this.origin.offset]}function i(){return!1}var s,o,r,l,d,m,v;if(m=n(),this.params=t,this.event=t.event,this.events={},this.root=t.root,this.scroller=g(t.scroller),this.bar=g(t.bar,this.root),r=this.track=g(t.track,this.root),!this.track&&this.bar&&(r=this.bar.parentNode),this.clipper=this.scroller.parentNode,this.direction=t.direction,this.rtl=t.rtl,this.origin=w[this.direction],this.barOnCls=t.barOnCls,this.scrollingCls=t.scrollingCls,this.draggingCls=t.draggingCls,this.impact=t.impact,this.position=t.position,this.rtl=t.rtl,this.barTopLimit=0,this.resizeDebounce=t.resizeDebounce,this.cursor=function(t){return t["client"+this.origin.x]||(((t.originalEvent||t).touches||{})[0]||{})["page"+this.origin.x]},this.pos=function(t){var e="page"+this.origin.x+"Offset",i=this.scroller[e]?e:this.origin.scroll;return void 0!==t&&(this.scroller[i]=t),this.scroller[i]},this.rpos=function(t){var e=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];return(t?this.pos(t*e):this.pos())/(e||1)},this.barOn=function(t){if(this.barOnCls){var e=this.scroller[this.origin.client]>=this.scroller[this.origin.scrollSize];t||e?p(this.root,this.barOnCls)&&f(this.root,this.barOnCls):p(this.root,this.barOnCls)||u(this.root,this.barOnCls)}},this._pos0=function(t){o=this.cursor(t)-s},this.drag=function(t){var i=function(t){return(t-this.barTopLimit)/e.call(this)}.call(this,this.cursor(t)-o),s=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];this.scroller[this.origin.scroll]=i*s},this.selection=function(t){this.event(document,"selectpos selectstart",i,t?"off":"on")},this.resize=function(){function t(){var t,i,s=e.scroller[e.origin.crossOffset],o=e.scroller[e.origin.crossClient],r=0;if(x?r=k:o>0&&0===s&&(s=o+17),s)if(e.barOn(),"scroller"==e.impact){var l=s-o+r;if("static"==e.position)t=h(e.scroller,e.origin.crossSize),i=e.clipper[e.origin.crossClient]+l+"px",t!=i&&e._setCrossSizes(e.scroller,i);else{var c={},d=e.rtl?"Left":"Right";"h"==e.direction&&(d="Bottom"),c["padding"+d]=l+"px",h(e.scroller,c)}}else t=h(e.clipper,e.origin.crossSize),i=o+"px",t!=i&&e._setCrossSizes(e.clipper,i);Array.prototype.unshift.call(arguments,"resize"),a.apply(e,arguments),m=n()}var e=this,i=void 0===e.resizeDebounce?300:e.resizeDebounce,s=0;n()-m<i&&(clearTimeout(l),s=i),s?l=setTimeout(t,s):t()},this.updatePositions=function(t){var i;this.bar&&(i=(r[this.origin.client]-this.barTopLimit)*this.scroller[this.origin.client]/this.scroller[this.origin.scrollSize],(t||parseInt(v,10)!=parseInt(i,10))&&(function(t){var e=this.barMinSize||20,i=t;i>0&&i<e&&(i=e),this.bar&&h(this.bar,this.origin.size,parseInt(i,10)+"px")}.call(this,i),v=i),s=function(t){return t*e.call(this)+this.barTopLimit}.call(this,this.rpos()),function(t){if(this.bar){var e=h(this.bar,this.origin.pos),i=+t+"px";i&&i!=e&&h(this.bar,this.origin.pos,i)}}.call(this,s)),Array.prototype.unshift.call(arguments,"scroll"),a.apply(this,arguments)},this.scroll=function(){var t=this;t.updatePositions(),t.scrollingCls&&(d||u(t.root,t.scrollingCls),clearTimeout(d),d=setTimeout(function(){f(t.root,t.scrollingCls),d=void 0},300))},this.clipperOnScroll=function(){this.rtl?this.clipper[this.origin.scrollEdge]=this.clipper[this.origin.scrollSize]:this.clipper[this.origin.scrollEdge]=0},this._setCrossSizes=function(t,e){var i={};i[this.origin.crossSize]=e,i[this.origin.crossMinSize]=e,i[this.origin.crossMaxSize]=e,h(t,i)},this._dumbCss=function(e){if(!t.cssGuru){var i=e?"hidden":null,s=e?"none":null;h(this.clipper,{overflow:i,msOverflowStyle:s,position:"static"==this.position?"":"relative"});var n=e?"scroll":null,o={};o["overflow-"+("v"==this.direction?"y":"x")]=n,o["box-sizing"]="border-box",o.margin="0",o.border="0","absolute"==this.position&&(o.position="absolute",o.top="0","h"==this.direction?o.left=o.right="0":(o.bottom="0",o.right=this.rtl?"0":"",o.left=this.rtl?"":"0")),h(this.scroller,o)}},this._dumbCss(!0),x){var y="paddingRight",b={},T=c.getComputedStyle(this.scroller)[[y]];"h"==t.direction?y="paddingBottom":t.rtl&&(y="paddingLeft");var S=parseInt(T,10);S!=S&&(S=0),b[y]=k+S+"px",h(this.scroller,b)}return this},update:function(t){return a.call(this,"upd",t),this.resize(1),this.updatePositions(1),this},dispose:function(){o(this,this.event,"off"),r(this.root,this.params.direction,"off"),"v"==this.params.direction?this._setCrossSizes(this.scroller,""):this._setCrossSizes(this.clipper,""),this._dumbCss(!1),this.barOn(!0),a.call(this,"dispose"),b[this.params.index]=null,this.params=null,this._disposed=!0},on:function(t,e,i){for(var s=t.split(" "),n=0;n<s.length;n++)"init"==s[n]?e.call(this,i):(this.events[s[n]]=this.events[s[n]]||[],this.events[s[n]].push(function(t){e.call(this,t||i)}))},baron:function(t){return t.root=this.params.root,t.scroller=this.params.scroller,t.direction="v"==this.params.direction?"h":"v",t._chain=!0,s(t)}}).constructor.prototype=s.prototype,s.noConflict=function(){return c.baron=v,s},s.version="3.0.1",s.prototype.autoUpdate=i(2)(c),s.prototype.fix=i(5),s.prototype.controls=i(4),t.exports=s},function(t,e,i){"use strict";function s(t){function e(){n.root[n.origin.offset]?i():s||(s=setInterval(function(){n.root[n.origin.offset]&&(i(),n.update())},300))}function i(){clearInterval(s),s=null}var s,n=this;if(!this._au){var o=n._debounce(function(){n.update()},300);this._observer=new t(function(){e(),n.update(),o()}),this.on("init",function(){n._observer.observe(n.root,{childList:!0,subtree:!0,characterData:!0}),e()}),this.on("dispose",function(){n._observer.disconnect(),i(),delete n._observer}),this._au=!0}}t.exports=function(t){var e=t.MutationObserver||t.WebKitMutationObserver||t.MozMutationObserver||null;return function(){return e?(s.call(this,e),this):this}}},function(t,e,i){var s=i(1);window.baron=s,window.jQuery&&window.jQuery.fn&&(window.jQuery.fn.baron=s)},function(t,e,i){"use strict";var s=i(0).qs;t.exports=function(t){var e,i,n,o,r,a=this;o=t.screen||.9,t.forward&&(e=s(t.forward,this.clipper),r={element:e,handler:function(){var e=a.pos()+(t.delta||30);a.pos(e)},type:"click"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on")),t.backward&&(i=s(t.backward,this.clipper),r={element:i,handler:function(){var e=a.pos()-(t.delta||30);a.pos(e)},type:"click"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on")),t.track&&(n=!0===t.track?this.track:s(t.track,this.clipper))&&(r={element:n,handler:function(t){if(t.target==n){var e=t["offset"+a.origin.x],i=a.bar[a.origin.offsetPos],s=0;e<i?s=-1:e>i+a.bar[a.origin.offset]&&(s=1);var r=a.pos()+s*o*a.scroller[a.origin.client];a.pos(r)}},type:"mousedown"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on"))}},function(t,e,i){"use strict";var s=(i(6),i(0).css),n=i(0).add,o=i(0).rm;t.exports=function(t){function e(t,e,i){var r=e,d=1==i?"pos":"oppos";l<(c.minView||0)&&(r=void 0),s(a[t],this.origin.pos,""),s(a[t],this.origin.oppos,""),o(a[t],c.outside),void 0!==r&&(r+="px",s(a[t],this.origin[d],r),n(a[t],c.outside))}function i(t){try{var e=document.createEvent("WheelEvent");e.initWebKitWheelEvent(t.originalEvent.wheelDeltaX,t.originalEvent.wheelDeltaY),p.dispatchEvent(e),t.preventDefault()}catch(t){}}function r(t){var e;for(var n in t)c[n]=t[n];if(c.elements instanceof HTMLElement?a=[c.elements]:"string"==typeof c.elements?a=this.scroller.querySelectorAll(c.elements):c.elements&&c.elements[0]instanceof HTMLElement&&(a=c.elements),a){l=this.scroller[this.origin.client];for(var o=0;o<a.length;o++)e={},e[this.origin.size]=a[o][this.origin.offset]+"px",a[o].parentNode!==this.scroller&&s(a[o].parentNode,e),e={},e[this.origin.crossSize]=a[o].parentNode[this.origin.crossClient]+"px",s(a[o],e),l-=a[o][this.origin.offset],u[o]=a[o].parentNode[this.origin.offsetPos],d[o]=d[o-1]||0,h[o]=h[o-1]||Math.min(u[o],0),a[o-1]&&(d[o]+=a[o-1][this.origin.offset],h[o]+=a[o-1][this.origin.offset]),0==o&&0==u[o]||(this.event(a[o],"mousewheel",i,"off"),this.event(a[o],"mousewheel",i));c.limiter&&a[0]&&(this.track&&this.track!=this.scroller?(e={},e[this.origin.pos]=a[0].parentNode[this.origin.offset]+"px",s(this.track,e)):this.barTopLimit=a[0].parentNode[this.origin.offset],this.scroll()),!1===c.limiter&&(this.barTopLimit=0)}var r={element:a,handler:function(){for(var t,e=this.parentNode.offsetTop,i=0;i<a.length;i++)a[i]===this&&(t=i);var s=e-d[t];c.scroll?c.scroll({x1:m.scroller.scrollTop,x2:s}):m.scroller.scrollTop=s},type:"click"};if(c.clickable){this._eventHandlers.push(r);for(var p=0;p<r.element.length;p++)f(r.element[p],r.type,r.handler,"on")}}var a,l,c={outside:"",inside:"",before:"",after:"",past:"",future:"",radius:0,minView:0},d=[],h=[],u=[],p=this.scroller,f=this.event,m=this;this.on("init",r,t);var g=[],v=[];return this.on("init scroll",function(){var t,i,s,r;if(a){var p;for(r=0;r<a.length;r++)t=0,u[r]-this.pos()<h[r]+c.radius?(t=1,i=d[r]):u[r]-this.pos()>h[r]+l-c.radius?(t=2,i=this.scroller[this.origin.client]-a[r][this.origin.offset]-d[r]-l):(t=3,i=void 0),s=!1,(u[r]-this.pos()<h[r]||u[r]-this.pos()>h[r]+l)&&(s=!0),t==g[r]&&s==v[r]||(e.call(this,r,i,t),g[r]=t,v[r]=s,p=!0);if(p)for(r=0;r<a.length;r++)1==g[r]&&c.past&&(n(a[r],c.past),o(a[r],c.future)),2==g[r]&&c.future&&(n(a[r],c.future),o(a[r],c.past)),3==g[r]&&(o(a[r],c.past),o(a[r],c.future),n(a[r],c.inside)),g[r]!=g[r+1]&&1==g[r]?(n(a[r],c.before),o(a[r],c.after)):g[r]!=g[r-1]&&2==g[r]?(n(a[r],c.after),o(a[r],c.before)):(o(a[r],c.before),o(a[r],c.after)),c.grad&&(v[r]?n(a[r],c.grad):o(a[r],c.grad))}}),this.on("resize upd",function(t){r.call(this,t&&t.fix)}),this}},function(t,e){t.exports=function(t,e,i){var s=console[t]||console.log,n=["Baron: "+e,i];Function.prototype.apply.call(s,console,n)}}]),$(".js-events-slider").slick({infinite:!0,slidesToShow:3,slidesToScroll:1,appendArrows:".events-block-slider-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:2}},{breakpoint:760,settings:{slidesToShow:1}}]}),function(t){t.fn.formAjax=function(){this.each(function(){t(this).on("submit",function(){function e(){r?t(r).addClass("active").spin("large","#000"):t("body").spin("large","#000"),t.ajax({url:s,type:n,data:o,processData:!1,contentType:!1,cache:!1,dataType:"json"}).done(function(e){e&&e.success?(i[0].reset(),initSideModal(e.message,"message-modal",!1,!1)):e&&e.message&&(i.find(".js-form-messages").addClass("active").html(e.message),e.errors&&e.errors.forEach(function(e){var i=t('[name="'+e.name+'"]');i.length&&(i.addClass("error"),i.siblings(".form-label").addClass("form-label-error"),i.siblings(".form-control-errors").addClass("active").html(e.message))})),e&&e.redirect&&(window.location.href=e.redirect),e&&e.reload&&window.location.reload()}).fail(function(t,e,i){alert("Ошибка отправки данных. Пожалуйста, попробуйте ещё раз."),console.log(t),console.log(i)}).always(function(){r?t(r).removeClass("active").spin(!1):t("body").spin(!1)})}var i=t(this),s=i.attr("action"),n=i.attr("method"),o=new FormData(i[0]),r=i.data("form-ajax-overlay"),a=i.is("[data-validate]");return a&&i.valid()?e():a||e(),!1})})}}(jQuery),function(t){var e=!!window.File,i=function(){var t=["B","KB","MB","GB","TB"];return function(e,i){var s,n=t.indexOf(i);if(-1===n)s=!1;else{for(;n>0;)e*=1024,n-=1;s=e}return s}}(),s=t.validator.format;t.validator.addMethod("dateRange",function(t,e,i){try{var s="YYYY.MM.DD",n=i.split(","),o=n[0].split(".").reverse(),r=moment(o,s).unix(),a=n[1].split(".").reverse(),l=moment(a,s).unix(),c=t.split(".").reverse(),d=moment(c,s).unix();return r<=d&&d<=l}catch(t){return!1}}),t.validator.addMethod("maxFileSize",function(t,s,n){var o,r=n.unit||"KB",a=n.size||100,l=i(a,r);return!(e&&!this.optional(s))||!((o=s.files).length<1)&&o[0].size<=l},function(t,e){return s("File cannot be larger than {0}{1}.",[t.size||100,t.unit||"KB"])}),t.validator.methods.email=function(t,e){return this.optional(e)||/.+@.+\..{2,}/i.test(t)},t.fn.formValidation=function(){this.each(function(){t(this).validate({errorPlacement:function(t,e){},highlight:function(e,i,s){t(e).closest(".form-group").find(".form-label").addClass("form-label-error").removeClass("form-label-valid"),t(e).closest(".form-control").addClass(i).removeClass(s),t(e).addClass(i).removeClass(s)},unhighlight:function(e,i,s){t(e).closest(".form-group").find(".form-label").removeClass("form-label-error").addClass("form-label-valid"),t(e).closest(".form-control").removeClass(i).addClass(s),t(e).removeClass(i).addClass(s)}})})}}(jQuery),function(t){t.fn.maskedinput=function(){this.each(function(){var e=t(this).data("masked-input"),i=t(this).data("masked-input-placeholder"),s=t(this).is("[data-masked-input-clearifnotmatch]");t(this).mask(e,{placeholder:i,clearIfNotMatch:s})})}}(jQuery),function(){var t=$(".js-media-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".media-block-header-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:700,settings:{arrows:!1,dots:!0,rows:1,slidesToShow:2,slidesToScroll:2}},{breakpoint:600,settings:{arrows:!1,dots:!0,rows:1,slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<600&&t.slick("slickFilter",function(t){return t<10})}(),function(){var t=$(".js-news-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".news-block-header-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:900,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{arrows:!1,dots:!0,rows:1,slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<520&&t.slick("slickFilter",function(t){return t<10})}(),function(){function t(e,i,s){$(e.target).closest(i).length||(s(),$(document).off("click","body",t))}function e(){$(".js-offcanvas, "+i).removeClass("active")}var i="#offcanvas",s="#offcanvas > .main-offcanvas";$(".js-offcanvas").click(function(){return $(this).hasClass("active")?e():($(".js-offcanvas").addClass("active"),$(i).addClass("active"),$(document).on("click","body",function(i){t(i,s,e)})),!1})}(),function(){var t=$(".js-partners-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".partners-block-header-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:700,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}}]}),$(window).width()<520&&t.slick("slickFilter",function(t){return t<10})}(),function(){var t=$(".js-programs-slider");t.slick({infinite:!0,slidesToShow:3,slidesToScroll:3,arrows:!1,dots:!0,responsive:[{breakpoint:767,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:580,settings:{slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<580&&t.slick("slickFilter",function(t){return t<10})}(),$(document).on("click","[data-side-modal]",function(t){var e=$(this).attr("href"),i=$(this).data("side-modal-url"),s=$(this).data("side-modal"),n=$(this).data("side-modal-class"),o=$(this).is("[data-side-modal-prevent-mobile]"),r=$(this).is("[data-side-modal-prevent-overlay-close]"),a=$(this).is("[data-side-modal-prevent-esc-close]");{if(!(o&&window.outerWidth<768))return s?($modalContent=$(s).clone(),initSideModal($modalContent,n,r,a)):($("body").spin("large","#000"),$.ajax({url:i||e,method:"GET",cache:!1}).done(function(t){$modalContent=t,initSideModal($modalContent,n,r,a)}).fail(function(t,e,i){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(t),console.log(i)}).always(function(){$("body").spin(!1)})),!1;window.location.href=e}}),$(".js-speakers-slider").slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".speakers-block-header-arrows",prevArrow:'<button type="button" class="slick-arrow slick-arrow-white slick-prev"></button>',nextArrow:'<button type="button" class="slick-arrow slick-arrow-white slick-next"></button>',responsive:[{breakpoint:1080,settings:{rows:1,slidesToShow:3,slidesToScroll:3}},{breakpoint:700,settings:{rows:1,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{rows:1,slidesToShow:1,slidesToScroll:1}}]}),function(){var t=$(".js-summits-slider");t.on("init",function(t,e){setTimeout(function(){e.slickGoTo(999,!1)})}),t.on("beforeChange",function(t,e,i,s){var n=$(e.$slides[s]).find("[data-summits-year]").data("summits-year");n&&$(".js-summits-slider-current-year").html(n)}),t.slick({infinite:!1,slidesToShow:1,slidesToScroll:1,appendArrows:".summits-block-header-arrows"})}(),$(document).ready(function(){$(".js-slick-slider").slick(),$("[data-masked-input]").maskedinput(),$("[data-validate]").formValidation(),$(".js-smooth-scroll").click(function(){history.pushState(null,null,$(this).attr("href"));var t=window.location.hash;return $(t).length>0&&$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top-10},700),!1})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZGUtbW9kYWwuanMiLCJqcXVlcnkuanMiLCJzcGluLmpzIiwianF1ZXJ5LnNwaW4uanMiLCJqcXVlcnkubWFzay5qcyIsInNsaWNrLmpzIiwianF1ZXJ5Lm1vZGFsLmpzIiwianF1ZXJ5LnZhbGlkYXRlLmpzIiwiYmFyb24ubWluLmpzIiwiZXZlbnRzLXNsaWRlci5qcyIsImZvcm0tYWpheC5qcyIsImZvcm0tdmFsaWRhdGlvbi5qcyIsImlucHV0LW1hc2suanMiLCJtZWRpYS1zbGlkZXIuanMiLCJuZXdzLXNsaWRlci5qcyIsIm9mZmNhbnZhcy5qcyIsInBhcnRuZXJzLXNsaWRlci5qcyIsInByb2dyYW1zLXNsaWRlci5qcyIsInNwZWFrZXJzLXNsaWRlci5qcyIsInN1bW1pdHMtc2xpZGVyLmpzIiwic2NyaXB0cy5qcyJdLCJuYW1lcyI6WyJpbml0U2lkZU1vZGFsV3JhcHBlciIsImNsYXNzTmFtZXMiLCIkbW9kYWxXcmFwcGVyIiwiJCIsIiRvdmVybGF5IiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJyZW1vdmUiLCJhcHBlbmQiLCJpbml0U2lkZU1vZGFsIiwiY29udGVudCIsInByZXZlbnRPdmVybGF5Q2xvc2UiLCJwcmV2ZW50RXNjQ2xvc2UiLCIkd3JhcHBlciIsImZpbmQiLCJodG1sIiwibWFza2VkaW5wdXQiLCJmb3JtVmFsaWRhdGlvbiIsImZvcm1BamF4Iiwic2V0VGltZW91dCIsImFkZENsYXNzIiwiZmlyc3QiLCJmb2N1cyIsImRvY3VtZW50Iiwib24iLCJoaWRlIiwiZSIsInRhcmdldCIsImNsb3Nlc3QiLCJpcyIsIndoaWNoIiwicmVtb3ZlQ2xhc3MiLCJvZmYiLCJjbGljayIsImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwidyIsIkVycm9yIiwid2luZG93IiwidGhpcyIsIm5vR2xvYmFsIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlzQXJyYXlMaWtlIiwib2JqIiwidHlwZSIsImpRdWVyeSIsImlzV2luZG93Iiwibm9kZU5hbWUiLCJlbGVtIiwibmFtZSIsInRvTG93ZXJDYXNlIiwid2lubm93IiwiZWxlbWVudHMiLCJxdWFsaWZpZXIiLCJub3QiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImkiLCJjYWxsIiwibm9kZVR5cGUiLCJpbmRleE9mIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwidmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJhcHBseSIsInVuZGVmaW5lZCIsInNsaWNlIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJkYXRhQXR0ciIsImtleSIsImRhdGEiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsInJicmFjZSIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJkYXRhVXNlciIsInNldCIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzcyIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJleGVjIiwic3R5bGUiLCJzdGFydCIsImVuZCIsImdldERlZmF1bHREaXNwbGF5IiwidGVtcCIsIm93bmVyRG9jdW1lbnQiLCJkaXNwbGF5IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaW5kZXgiLCJkYXRhUHJpdiIsImdldCIsImlzSGlkZGVuV2l0aGluVHJlZSIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJyZXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwibCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsInRtcCIsIndyYXAiLCJjb250YWlucyIsImoiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsInR5cGVzIiwic2VsZWN0b3IiLCJmbiIsIm9uZSIsIm9yaWdGbiIsImV2ZW50IiwiYXJndW1lbnRzIiwiZ3VpZCIsImVhY2giLCJhZGQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsIm1hdGNoIiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImV2ZW50cyIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJleHRlbmQiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImFyZ3MiLCJjYWxsYmFjayIsImNvbmNhdCIsImhhc1NjcmlwdHMiLCJub2RlIiwiaU5vQ2xvbmUiLCJzdXBwb3J0IiwiY2hlY2tDbG9uZSIsInJjaGVja2VkIiwic2VsZiIsImVxIiwibWFwIiwiY2xvbmUiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJjc3NQcmVmaXhlcyIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJUd2VlbiIsIm9wdGlvbnMiLCJlYXNpbmciLCJwcm90b3R5cGUiLCJpbml0Iiwic2NoZWR1bGUiLCJpblByb2dyZXNzIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZngiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImZ4Tm93Iiwibm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsImFsd2F5cyIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvcHMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsImhvb2tzIiwiY2FtZWxDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wRmlsdGVyIiwiX3F1ZXVlSG9va3MiLCJxdWV1ZSIsInByb3h5IiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInN0cmlwQW5kQ29sbGFwc2UiLCJybm90aHRtbHdoaXRlIiwiam9pbiIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJfIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJwcmV2T2JqZWN0IiwibGFzdCIsImxlbiIsInNvcnQiLCJzcGxpY2UiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsImlzTnVtZXJpYyIsImlzTmFOIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJzdHJpbmciLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiRGF0ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3BsaXQiLCJTaXp6bGUiLCJzZWVkIiwibSIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJjb21waWxlckNhY2hlIiwicmJ1Z2d5UVNBIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWRBbmNlc3RvciIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsIm5leHQiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwicHJldiIsInRhcmdldHMiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsIm9iamVjdCIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwic3RhdGUiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsIlR5cGVFcnJvciIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInN3YXAiLCJvbGQiLCJ0b2dnbGUiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJlYXNlZCIsInBvcyIsInN0ZXAiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJyZnh0eXBlcyIsInJydW4iLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJmb2N1c01vcnBoIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaGVhZGVycyIsImlzU3VjY2VzcyIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwidXJsQW5jaG9yIiwidW5jYWNoZWQiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCJub0NvbmZsaWN0IiwiU3Bpbm5lciIsImNyZWF0ZUVsIiwiaW5zIiwiYWRkQW5pbWF0aW9uIiwiYWxwaGEiLCJ0cmFpbCIsImxpbmVzIiwieiIsInVzZUNzc0FuaW1hdGlvbnMiLCJzdWJzdHJpbmciLCJwcmUiLCJhbmltYXRpb25zIiwic2hlZXQiLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJ2ZW5kb3IiLCJwcCIsImNoYXJBdCIsInByZWZpeGVzIiwiZGVmIiwiZ2V0Q29sb3IiLCJjb2xvciIsIm8iLCJkZWZhdWx0cyIsInJhZGl1cyIsImNvcm5lcnMiLCJyb3RhdGUiLCJkaXJlY3Rpb24iLCJmcHMiLCJzaGFkb3ciLCJod2FjY2VsIiwic3BpbiIsImYiLCJvc3RlcCIsImFzdGVwIiwiZmlsbCIsImJhY2tncm91bmQiLCJib3hTaGFkb3ciLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm0iLCJib3JkZXJSYWRpdXMiLCJzZWciLCJzdHlsZVNoZWV0IiwicHJvYmUiLCJiZWhhdmlvciIsImFkaiIsInZtbCIsImFkZFJ1bGUiLCJncnAiLCJjb29yZHNpemUiLCJjb29yZG9yaWdpbiIsInIiLCJkeCIsImciLCJyb3RhdGlvbiIsImFyY3NpemUiLCJjIiwiaW5pdFZNTCIsInJlcXVpcmUiLCIkdGhpcyIsInNwaW5uZXIiLCJwcmVzZXRzIiwidGlueSIsInNtYWxsIiwibGFyZ2UiLCJaZXB0byIsIk1hc2siLCJtYXNrIiwiaW52YWxpZCIsImdldENhcmV0IiwiY3RybCIsImRTZWwiLCJjU2VsU3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsIm5hdmlnYXRvciIsImFwcFZlcnNpb24iLCJjcmVhdGVSYW5nZSIsIm1vdmVTdGFydCIsInNldENhcmV0IiwicmFuZ2UiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsImNvbGxhcHNlIiwibW92ZUVuZCIsIm1hc2tEaWdpdFBvc01hcE9sZCIsIm1hc2tEaWdpdFBvc01hcCIsImpNYXNrR2xvYmFscyIsInVzZUlucHV0IiwiYmVoYXZpb3VyIiwia2V5ZG93biIsImtleXVwIiwib2xkVmFsdWUiLCJzZWxlY3RPbkZvY3VzIiwiY2xlYXJJZk5vdE1hdGNoIiwicmVnZXhNYXNrIiwiZ2V0UmVnZXhNYXNrIiwidHJhbnNsYXRpb24iLCJvcHRpb25hbCIsInJlY3Vyc2l2ZSIsIm9SZWN1cnNpdmUiLCJtYXNrQ2h1bmtzIiwiak1hc2siLCJkaWdpdCIsImRlc3Ryb3lFdmVudHMiLCJjYWxjdWxhdGVDYXJldFBvc2l0aW9uIiwib2xkVmFsIiwibmV3VmFsIiwiZ2V0TWFza2VkIiwiY2FyZXRQb3NOZXciLCJjYXJldFBvc09sZCIsIm5ld1ZhbEwiLCJvbGRWYWxMIiwibWFza0RpZ2l0c0JlZm9yZUNhcmV0IiwibWFza0RpZ2l0c0FmdGVyQ2FyZXQiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQiLCJjYXJldFBvcyIsImJ5UGFzc0tleXMiLCJjYWxsYmFja3MiLCJza2lwTWFza0NoYXJzIiwibGFzdE1hc2tDaGFyIiwiYnVmIiwibWFza0xlbiIsInZhbExlbiIsImFkZE1ldGhvZCIsInJlc2V0UG9zIiwibWFza0RpZ2l0Q291bnQiLCJtYXNrRGlnaXRQb3NBcnIiLCJsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIiLCJtYXNrRGlnaXQiLCJ2YWxEaWdpdCIsImZhbGxiYWNrIiwibGFzdE1hc2tDaGFyRGlnaXQiLCJtYXBNYXNrZGlnaXRQb3NpdGlvbnMiLCJtYXNrRGlmZiIsImNoYW5nZWQiLCJkZWZhdWx0QXJncyIsImNyaXRlcmlhIiwiY2FyZXQiLCJnZXRDbGVhblZhbCIsImdldE1hc2tlZFZhbCIsIm9ubHlNYXNrIiwicGxhY2Vob2xkZXIiLCJtYXhsZW5ndGgiLCJtYXNrV2F0Y2hlcnMiLCJIVE1MQXR0cmlidXRlcyIsIm5vdFNhbWVNYXNrT2JqZWN0IiwiZmllbGQiLCJtYXNrT2JqZWN0Iiwic3RyaW5naWZ5IiwiZ2xvYmFscyIsIndhdGNoSW50ZXJ2YWwiLCJ3YXRjaElucHV0cyIsIm1hc2tGdW5jdGlvbiIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIm1hc2tlZCIsInVubWFzayIsImRhdGFNYXNrIiwiY2xlYW5WYWwiLCJhcHBseURhdGFNYXNrIiwibWFza0VsZW1lbnRzIiwiZGF0YU1hc2tBdHRyIiwidXNlckFnZW50IiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJldmVudFN1cHBvcnRlZCIsIndhdGNoRGF0YU1hc2siLCI5IiwiIyIsIkEiLCJTIiwiU2xpY2siLCJpbnN0YW5jZVVpZCIsImVsZW1lbnQiLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXJyb3dzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJkb3RzIiwiZG90c0NsYXNzIiwiZHJhZ2dhYmxlIiwiZWRnZUZyaWN0aW9uIiwiZmFkZSIsImZvY3VzT25TZWxlY3QiLCJmb2N1c09uQ2hhbmdlIiwiaW5maW5pdGUiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJlc3BvbnNpdmUiLCJyb3dzIiwicnRsIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWwiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImh0bWxFeHByIiwicmVnaXN0ZXJCcmVha3BvaW50cyIsImFjdGl2YXRlQURBIiwiYXJpYS1oaWRkZW4iLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwibWFya3VwIiwiYWRkQmVmb3JlIiwidW5sb2FkIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImNlaWwiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwidHJhbnNpdGlvbiIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImFyaWEtZGlzYWJsZWQiLCJidWlsZERvdHMiLCJkb3QiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsInJvdyIsImNoZWNrUmVzcG9uc2l2ZSIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJpbm5lcldpZHRoIiwibWluIiwidW5zbGljayIsInJlZnJlc2giLCJkb250QW5pbWF0ZSIsImluZGV4T2Zmc2V0IiwidW5ldmVuT2Zmc2V0IiwiJHRhcmdldCIsImNoZWNrTmF2aWdhYmxlIiwibmF2aWdhYmxlcyIsInByZXZOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwicmVzaXplIiwiY2xlYW5VcFJvd3MiLCJkZXN0cm95IiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwiY29lZiIsInZlcnRpY2FsT2Zmc2V0IiwiZmxvb3IiLCJvZmZzZXRMZWZ0Iiwib3V0ZXJXaWR0aCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiaW5kZXhlcyIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0IiwiYWJzIiwiZ29UbyIsInNsaWNrR29UbyIsImNyZWF0aW9uIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJudW1Eb3RHcm91cHMiLCJ0YWJDb250cm9sSW5kZXhlcyIsInNsaWRlQ29udHJvbEluZGV4Iiwicm9sZSIsImFyaWFCdXR0b25Db250cm9sIiwiYXJpYS1kZXNjcmliZWRieSIsIm1hcHBlZFNsaWRlSW5kZXgiLCJhcmlhLWNvbnRyb2xzIiwiYXJpYS1sYWJlbCIsImFyaWEtc2VsZWN0ZWQiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwidGFnTmFtZSIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiaW1hZ2VUb0xvYWQiLCJsb2FkUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwiY3VycmVudEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJ4IiwieSIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInJpZ2h0Iiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJpdGVtIiwiYm9keVN0eWxlIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsImFsbFNsaWRlcyIsInJlbWFpbmRlciIsImV2ZW5Db2VmIiwiaW5maW5pdGVDb3VudCIsInRhcmdldEVsZW1lbnQiLCJzeW5jIiwiYW5pbVNsaWRlIiwib2xkU2xpZGUiLCJzbGlkZUxlZnQiLCJuYXZUYXJnZXQiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJzd2lwZUFuZ2xlIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInJvdW5kIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwic3dpcGVTdGFydCIsInN3aXBlTW92ZSIsInBvc2l0aW9uT2Zmc2V0IiwidmVydGljYWxTd2lwZUxlbmd0aCIsInNxcnQiLCJwb3ciLCJ1bmZpbHRlclNsaWRlcyIsInNsaWNrVW5maWx0ZXIiLCJmcm9tQnJlYWtwb2ludCIsIm1vZGFscyIsInNlbGVjdEN1cnJlbnQiLCIkYmxvY2tlciIsIm1vZGFsIiwiJGJvZHkiLCJkb0ZhZGUiLCJmYWRlRHVyYXRpb24iLCJjbG9zZUV4aXN0aW5nIiwiaXNBY3RpdmUiLCJjbG9zZSIsImFuY2hvciIsIiRlbG0iLCJlbG0iLCJzaG93U3Bpbm5lciIsIkFKQVhfU0VORCIsIkFKQVhfU1VDQ0VTUyIsIkNMT1NFIiwiaGlkZVNwaW5uZXIiLCJBSkFYX0NPTVBMRVRFIiwiQUpBWF9GQUlMIiwiYmxvY2siLCJmYWRlRGVsYXkiLCJlc2NhcGVDbG9zZSIsImNsaWNrQ2xvc2UiLCJ1bmJsb2NrIiwiQkVGT1JFX0JMT0NLIiwiX2N0eCIsImJsb2NrZXJDbGFzcyIsIkJMT0NLIiwiQkVGT1JFX09QRU4iLCJzaG93Q2xvc2UiLCJjbG9zZUJ1dHRvbiIsImNsb3NlQ2xhc3MiLCJjbG9zZVRleHQiLCJtb2RhbENsYXNzIiwiT1BFTiIsIkJFRk9SRV9DTE9TRSIsIl90aGlzIiwiQUZURVJfQ0xPU0UiLCJzcGlubmVySHRtbCIsInZhbGlkYXRlIiwidmFsaWRhdG9yIiwib25zdWJtaXQiLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxTdWJtaXQiLCJzdWJtaXRIYW5kbGVyIiwiZm9ybVN1Ym1pdHRlZCIsImN1cnJlbnRGb3JtIiwiZGVidWciLCJmb3JtIiwicGVuZGluZ1JlcXVlc3QiLCJmb2N1c0ludmFsaWQiLCJ2YWxpZCIsImVycm9yTGlzdCIsInJ1bGVzIiwiY29tbWFuZCIsInN0YXRpY1J1bGVzIiwiZXhpc3RpbmdSdWxlcyIsImZpbHRlcmVkIiwiaGFzQXR0cmlidXRlIiwibm9ybWFsaXplUnVsZSIsIm1lc3NhZ2VzIiwibm9ybWFsaXplUnVsZXMiLCJjbGFzc1J1bGVzIiwiYXR0cmlidXRlUnVsZXMiLCJkYXRhUnVsZXMiLCJyZXF1aXJlZCIsInJlbW90ZSIsImJsYW5rIiwiZmlsbGVkIiwidW5jaGVja2VkIiwiZm9ybWF0IiwiZXJyb3JDbGFzcyIsInBlbmRpbmdDbGFzcyIsInZhbGlkQ2xhc3MiLCJlcnJvckVsZW1lbnQiLCJmb2N1c0NsZWFudXAiLCJlcnJvckNvbnRhaW5lciIsImVycm9yTGFiZWxDb250YWluZXIiLCJpZ25vcmUiLCJpZ25vcmVUaXRsZSIsIm9uZm9jdXNpbiIsImxhc3RBY3RpdmUiLCJ1bmhpZ2hsaWdodCIsImhpZGVUaGVzZSIsImVycm9yc0ZvciIsIm9uZm9jdXNvdXQiLCJjaGVja2FibGUiLCJzdWJtaXR0ZWQiLCJvbmtleXVwIiwiZWxlbWVudFZhbHVlIiwib25jbGljayIsImhpZ2hsaWdodCIsImZpbmRCeU5hbWUiLCJzZXREZWZhdWx0cyIsImVtYWlsIiwiZGF0ZSIsImRhdGVJU08iLCJudW1iZXIiLCJkaWdpdHMiLCJlcXVhbFRvIiwibWlubGVuZ3RoIiwicmFuZ2VsZW5ndGgiLCJhdXRvQ3JlYXRlUmFuZ2VzIiwiZXZlbnRUeXBlIiwibGFiZWxDb250YWluZXIiLCJlcnJvckNvbnRleHQiLCJjb250YWluZXJzIiwidmFsdWVDYWNoZSIsInBlbmRpbmciLCJpbnZhbGlkSGFuZGxlciIsImNoZWNrRm9ybSIsImVycm9yTWFwIiwic2hvd0Vycm9ycyIsInByZXBhcmVGb3JtIiwiY3VycmVudEVsZW1lbnRzIiwicnMiLCJncm91cCIsImNsZWFuRWxlbWVudCIsImNsZWFuIiwiY2hlY2tFbGVtZW50IiwidmFsaWRhdGlvblRhcmdldEZvciIsInByZXBhcmVFbGVtZW50IiwidGVzdGdyb3VwIiwibnVtYmVyT2ZJbnZhbGlkcyIsInRvSGlkZSIsImVycm9ycyIsInN1Y2Nlc3NMaXN0IiwiZGVmYXVsdFNob3dFcnJvcnMiLCJyZXNldEZvcm0iLCJoaWRlRXJyb3JzIiwicmVzZXRFbGVtZW50cyIsIm9iamVjdExlbmd0aCIsImFkZFdyYXBwZXIiLCJzaXplIiwiZmluZExhc3RBY3RpdmUiLCJydWxlc0NhY2hlIiwicmVzZXRJbnRlcm5hbHMiLCJ0b1Nob3ciLCIkZWxlbWVudCIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsInJ1bGUiLCJub3JtYWxpemVyIiwicnVsZXNDb3VudCIsImRlcGVuZGVuY3lNaXNtYXRjaCIsInBhcmFtZXRlcnMiLCJtZXRob2RzIiwiZm9ybWF0QW5kQWRkIiwibG9nIiwiY3VzdG9tRGF0YU1lc3NhZ2UiLCJjdXN0b21NZXNzYWdlIiwiZmluZERlZmluZWQiLCJkZWZhdWx0TWVzc2FnZSIsInRpdGxlIiwidGhlcmVnZXgiLCJ0b1RvZ2dsZSIsIndyYXBwZXIiLCJzaG93TGFiZWwiLCJ2YWxpZEVsZW1lbnRzIiwiaW52YWxpZEVsZW1lbnRzIiwicGxhY2UiLCJlcnJvcklEIiwiZWxlbWVudElEIiwiaWRPck5hbWUiLCJkZXNjcmliZWRCeSIsImVycm9yUGxhY2VtZW50IiwiZXNjYXBlQ3NzTWV0YSIsImRlc2NyaWJlciIsImdldExlbmd0aCIsImRlcGVuZCIsImRlcGVuZFR5cGVzIiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwic3RhcnRSZXF1ZXN0Iiwic3RvcFJlcXVlc3QiLCJwcmV2aW91c1ZhbHVlIiwiY2xhc3NSdWxlU2V0dGluZ3MiLCJjcmVkaXRjYXJkIiwiYWRkQ2xhc3NSdWxlcyIsIm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUiLCJOdW1iZXIiLCJkZXBlbmRzIiwia2VlcFJ1bGUiLCJwYXJhbWV0ZXIiLCJ0cmFuc2Zvcm1lZCIsImRlY2ltYWxzIiwiZXJyb3JNZXNzYWdlIiwicmUiLCJkZWNpbWFsUGxhY2VzIiwidG9JbnQiLCJvcHRpb25EYXRhU3RyaW5nIiwicHJldmlvdXMiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtb2RlIiwicG9ydCIsInBlbmRpbmdSZXF1ZXN0cyIsImQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZvckVhY2giLCJwYXNzaXZlIiwiY2xhc3NMaXN0Iiwicm0iLCJxcyIsIkhUTUxFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImJhck9uQ2xzIiwicmVzaXplRGVib3VuY2UiLCJjc3NHdXJ1IiwiaW1wYWN0IiwidSIsIl9jaGFpbiIsInNjcm9sbGVyIiwiaCIsInVwZGF0ZSIsImF1dG9VcGRhdGUiLCJnZXRUaW1lIiwiX2V2ZW50SGFuZGxlcnMiLCJzY3JvbGwiLCJiYXIiLCJkcmFnIiwiZHJhZ2dpbmdDbHMiLCJfcG9zMCIsImNsaXBwZXIiLCJjbGlwcGVyT25TY3JvbGwiLCJldmFsIiwib3Bwb3MiLCJjcm9zc1BvcyIsImNyb3NzT3BQb3MiLCJjcm9zc1NpemUiLCJjcm9zc01pblNpemUiLCJjcm9zc01heFNpemUiLCJjbGllbnQiLCJjcm9zc0NsaWVudCIsInNjcm9sbEVkZ2UiLCJjcm9zc09mZnNldCIsIm9mZnNldFBvcyIsInNjcm9sbFNpemUiLCJDIiwiX2RlYm91bmNlIiwiX2Rpc3Bvc2VkIiwib3JpZ2luIiwiYmFyVG9wTGltaXQiLCJ0cmFjayIsInNjcm9sbGluZ0NscyIsImN1cnNvciIsInJwb3MiLCJiYXJPbiIsIl9zZXRDcm9zc1NpemVzIiwidXBkYXRlUG9zaXRpb25zIiwiYmFyTWluU2l6ZSIsIl9kdW1iQ3NzIiwibXNPdmVyZmxvd1N0eWxlIiwiYm90dG9tIiwiTyIsIlQiLCJMIiwiZGlzcG9zZSIsImJhcm9uIiwidmVyc2lvbiIsImNvbnRyb2xzIiwiX2F1IiwiX29ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjaGFyYWN0ZXJEYXRhIiwiZGlzY29ubmVjdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsInNjcmVlbiIsImRlbHRhIiwiYmFja3dhcmQiLCJtaW5WaWV3Iiwib3V0c2lkZSIsImNyZWF0ZUV2ZW50IiwiaW5pdFdlYktpdFdoZWVsRXZlbnQiLCJ3aGVlbERlbHRhWCIsIndoZWVsRGVsdGFZIiwiZGlzcGF0Y2hFdmVudCIsImxpbWl0ZXIiLCJvZmZzZXRUb3AiLCJ4MSIsIngyIiwiY2xpY2thYmxlIiwiaW5zaWRlIiwicGFzdCIsImZ1dHVyZSIsImdyYWQiLCJGdW5jdGlvbiIsInN1Ym1pdEZvcm0iLCJmb3JtT3ZlcmxheSIsImZvcm1EYXRhIiwiJGZvcm0iLCIkZmllbGQiLCJyZWRpcmVjdCIsInJlbG9hZCIsInRleHRTdGF0dXMiLCJlcnJvclRocm93biIsImFsZXJ0IiwiRm9ybURhdGEiLCJ2YWxpZGF0aW9uIiwiaXNfc3VwcG9ydGVkX2Jyb3dzZXIiLCJGaWxlIiwiZmlsZVNpemVUb0J5dGVzIiwidW5pdHMiLCJjb3ZlcnRlZF9zaXplIiwiaW5kZXhfb2ZfdW5pdCIsImZvcm1hdHRlciIsImRhdGVGb3JtYXQiLCJkYXRlUmFuZ2UiLCJkYXRlRnJvbSIsInRpbWVzdGFtcEZyb20iLCJtb21lbnQiLCJ1bml4IiwiZGF0ZVRvIiwidGltZXN0YW1wVG8iLCJkYXRlVmFsdWUiLCJ0aW1lc3RhbXBWYWx1ZSIsImZpbGVzIiwibWF4X2ZpbGVfc2l6ZSIsImhpZGVFdmVudCIsImNsb3Nlc3RFbCIsImhpZGVGdW5jIiwib2ZmY2FudmFzT3ZlcmxheSIsIm9mZmNhbnZhcyIsImFsdFVybCIsIm1vZGFsQ29udGVudFNlbGVjdG9yIiwicHJldmVudE1vYmlsZSIsIiRtb2RhbENvbnRlbnQiLCJ5ZWFyIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImVsZW1lbnRJZCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBQUEscUJBQUFDLEdBQ0EsSUFBQUMsRUFBQUMsRUFDQSwwREFDQUYsRUFBQSx3SEFRQUcsRUFBQUQsRUFBQSxRQUFBRSxTQUFBLHVCQVFBLE9BTkFELEVBQUFFLFFBQ0FGLEVBQUFHLFNBR0FKLEVBQUEsUUFBQUssT0FBQU4sR0FFQUMsRUFBQSxRQUFBRSxTQUFBLHVCQUdBLFNBQUFJLGNBQUFDLEVBQUFULEVBQUFVLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQWIscUJBQUFDLEdBQ0FZLEVBQUFDLEtBQUEsd0JBQUFDLEtBQUFMLEdBQ0FHLEVBQUFDLEtBQUEsdUJBQUFFLGNBQ0FILEVBQUFDLEtBQUEsbUJBQUFHLGlCQUNBSixFQUFBQyxLQUFBLG9CQUFBSSxXQUVBQyxXQUFBLFdBQ0FOLEVBQUFPLFNBQUEsVUFFQVAsRUFBQUMsS0FBQSxTQUFBTyxRQUFBQyxRQUNBWCxHQUNBUixFQUFBb0IsVUFBQUMsR0FBQSxRQUFBLE9BQUFDLEdBR0FiLEdBQ0FULEVBQUFvQixVQUFBQyxHQUFBLFFBQUFDLElBRUEsS0FFQSxJQUFBQSxFQUFBLFNBQUFDLElBRUF2QixFQUFBdUIsRUFBQUMsUUFBQUMsUUFBQSxlQUFBdEIsUUFBQUgsRUFBQXVCLEVBQUFDLFFBQUFFLEdBQUEsaUJBQUExQixFQUFBdUIsRUFBQUMsUUFBQUUsR0FBQSxVQUNBLEtBQUFILEVBQUFJLFFBRUFqQixFQUFBa0IsWUFBQSxVQUNBNUIsRUFBQW9CLFVBQUFTLElBQUEsUUFBQSxPQUFBUCxHQUVBYixHQUNBVCxFQUFBb0IsVUFBQVMsSUFBQSxRQUFBUCxLQUtBWixFQUFBQyxLQUFBLDJCQUFBbUIsTUFBQSxXQVVBLE9BVEF0QixHQUNBUixFQUFBb0IsVUFBQVMsSUFBQSxRQUFBLE9BQUFQLEdBR0FiLEdBQ0FULEVBQUFvQixVQUFBUyxJ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NUMsR0FBQSxPQUFBLFNBQUFFLEVBQUFrOEMsR0FDQXo4QyxXQUFBLFdBRUF5OEMsRUFBQTBFLFVBQUEsS0FBQSxPQUlBbEgsRUFBQTU1QyxHQUFBLGVBQUEsU0FBQUUsRUFBQWs4QyxFQUFBeEUsRUFBQW9MLEdBQ0EsSUFFQTBaLEVBRkEvOUQsRUFBQXk5QyxFQUFBN0QsUUFBQXlLLElBQUExakQsS0FBQSx1QkFFQXlGLEtBQUEsZ0JBRUEyM0QsR0FDQS85RCxFQUFBLG1DQUFBWSxLQUFBbTlELEtBSUE5aUIsRUFBQXdDLE9BQ0F2RyxVQUFBLEVBQ0FhLGFBQUEsRUFDQUMsZUFBQSxFQUNBbEMsYUFBQSxpQ0F4QkEsR0NBQTkxQyxFQUFBb0IsVUFBQTBFLE1BQUEsV0FDQTlGLEVBQUEsb0JBQUF5OUMsUUFDQXo5QyxFQUFBLHVCQUFBYSxjQUNBYixFQUFBLG1CQUFBYyxpQkFFQWQsRUFBQSxxQkFBQThCLE1BQUEsV0FDQWs4RCxRQUFBQyxVQUFBLEtBQUEsS0FBQWorRCxFQUFBc0MsTUFBQW1pQixLQUFBLFNBQ0EsSUFBQXk1QyxFQUFBNzdELE9BQUF3a0IsU0FBQUQsS0FRQSxPQVBBNW1CLEVBQUFrK0QsR0FBQS85RCxPQUFBLEdBQ0FILEVBQUEsY0FBQWs4QixTQUNBMUIsVUFBQXg2QixFQUFBQSxFQUFBeWtCLEtBQUFuaUIsS0FBQSxTQUFBa21DLFNBQUF4bEIsSUFBQSxJQUNBLE1BSUEiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbml0U2lkZU1vZGFsV3JhcHBlcihjbGFzc05hbWVzKSB7XG4gICAgdmFyICRtb2RhbFdyYXBwZXIgPSAkKFxuICAgICAgICAnPGRpdiBjbGFzcz1cInNpZGUtbW9kYWwtb3ZlcmxheVwiPicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzaWRlLW1vZGFsICcgKyBjbGFzc05hbWVzICsgJ1wiPicgK1xuICAgICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiIGNsYXNzPVwic2lkZS1tb2RhbC1jbG9zZVwiIGRhdGEtc2lkZS1tb2RhbC1jbG9zZT48L2E+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzaWRlLW1vZGFsLW92ZXJmbG93XCI+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPC9kaXY+J1xuICAgICk7XG5cbiAgICB2YXIgJG92ZXJsYXkgPSAkKCdib2R5JykuY2hpbGRyZW4oJy5zaWRlLW1vZGFsLW92ZXJsYXknKTtcblxuICAgIGlmICgkb3ZlcmxheS5sZW5ndGgpIHtcbiAgICAgICAgJG92ZXJsYXkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgJCgnYm9keScpLmFwcGVuZCgkbW9kYWxXcmFwcGVyKTtcblxuICAgIHJldHVybiAkKCdib2R5JykuY2hpbGRyZW4oJy5zaWRlLW1vZGFsLW92ZXJsYXknKTtcbn1cblxuZnVuY3Rpb24gaW5pdFNpZGVNb2RhbChjb250ZW50LCBjbGFzc05hbWVzLCBwcmV2ZW50T3ZlcmxheUNsb3NlLCBwcmV2ZW50RXNjQ2xvc2UpIHtcbiAgICB2YXIgJHdyYXBwZXIgPSBpbml0U2lkZU1vZGFsV3JhcHBlcihjbGFzc05hbWVzKTtcbiAgICAkd3JhcHBlci5maW5kKCcuc2lkZS1tb2RhbC1vdmVyZmxvdycpLmh0bWwoY29udGVudCk7XG4gICAgJHdyYXBwZXIuZmluZCgnW2RhdGEtbWFza2VkLWlucHV0XScpLm1hc2tlZGlucHV0KCk7XG4gICAgJHdyYXBwZXIuZmluZCgnW2RhdGEtdmFsaWRhdGVdJykuZm9ybVZhbGlkYXRpb24oKTtcbiAgICAkd3JhcHBlci5maW5kKCdbZGF0YS1mb3JtLWFqYXhdJykuZm9ybUFqYXgoKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkd3JhcHBlci5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIC8vIEZvY3VzIG9uIGZpcnN0IGlucHV0IGluIG1vZGFsXG4gICAgICAgICR3cmFwcGVyLmZpbmQoJ2lucHV0JykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICBpZiAoIXByZXZlbnRPdmVybGF5Q2xvc2UpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdib2R5JywgaGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXByZXZlbnRFc2NDbG9zZSkge1xuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2tleXVwJywgaGlkZSk7XG4gICAgICAgIH1cbiAgICB9LCAyMDApO1xuXG4gICAgdmFyIGhpZGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICggISQoZS50YXJnZXQpLmNsb3Nlc3QoJy5zaWRlLW1vZGFsJykubGVuZ3RoICYmICEkKGUudGFyZ2V0KS5pcygnaW5wdXQsIGxhYmVsJykgJiYgISQoZS50YXJnZXQpLmlzKCdib2R5JykgKSB8fFxuICAgICAgICAgICAgKCBlLndoaWNoID09PSAyNyApXG4gICAgICAgICkge1xuICAgICAgICAgICAgJHdyYXBwZXIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdjbGljaycsICdib2R5JywgaGlkZSk7XG5cbiAgICAgICAgICAgIGlmICghcHJldmVudEVzY0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKCdrZXl1cCcsIGhpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgICR3cmFwcGVyLmZpbmQoJ1tkYXRhLXNpZGUtbW9kYWwtY2xvc2VdJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXByZXZlbnRPdmVybGF5Q2xvc2UpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignY2xpY2snLCAnYm9keScsIGhpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcmV2ZW50RXNjQ2xvc2UpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZigna2V5dXAnLCBoaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICR3cmFwcGVyLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xufVxuXG4kKGRvY3VtZW50KS5vbignY2xpY2snLCAnW2RhdGEtc2lkZS1tb2RhbF0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKSxcbiAgICAgICAgYWx0VXJsID0gJCh0aGlzKS5kYXRhKCdzaWRlLW1vZGFsLXVybCcpLFxuICAgICAgICBtb2RhbENvbnRlbnRTZWxlY3RvciA9ICQodGhpcykuZGF0YSgnc2lkZS1tb2RhbCcpLFxuICAgICAgICBjbGFzc05hbWVzID0gJCh0aGlzKS5kYXRhKCdzaWRlLW1vZGFsLWNsYXNzJyksXG4gICAgICAgIHByZXZlbnRNb2JpbGUgPSAkKHRoaXMpLmlzKCdbZGF0YS1zaWRlLW1vZGFsLXByZXZlbnQtbW9iaWxlXScpLFxuICAgICAgICBwcmV2ZW50T3ZlcmxheUNsb3NlID0gJCh0aGlzKS5pcygnW2RhdGEtc2lkZS1tb2RhbC1wcmV2ZW50LW92ZXJsYXktY2xvc2VdJyksXG4gICAgICAgIHByZXZlbnRFc2NDbG9zZSA9ICQodGhpcykuaXMoJ1tkYXRhLXNpZGUtbW9kYWwtcHJldmVudC1lc2MtY2xvc2VdJyk7XG5cbiAgICBpZiAocHJldmVudE1vYmlsZSkge1xuICAgICAgICBpZiAod2luZG93Lm91dGVyV2lkdGggPCA3NjgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZGFsQ29udGVudFNlbGVjdG9yKSB7XG4gICAgICAgICRtb2RhbENvbnRlbnQgPSAkKG1vZGFsQ29udGVudFNlbGVjdG9yKS5jbG9uZSgpO1xuICAgICAgICBpbml0U2lkZU1vZGFsKCRtb2RhbENvbnRlbnQsIGNsYXNzTmFtZXMsIHByZXZlbnRPdmVybGF5Q2xvc2UsIHByZXZlbnRFc2NDbG9zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJCgnYm9keScpLnNwaW4oJ2xhcmdlJywgJyMwMDAnKTtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBhbHRVcmwgfHwgdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZVxuICAgICAgICB9KS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAkbW9kYWxDb250ZW50ID0gZGF0YTtcbiAgICAgICAgICAgIGluaXRTaWRlTW9kYWwoJG1vZGFsQ29udGVudCwgY2xhc3NOYW1lcywgcHJldmVudE92ZXJsYXlDbG9zZSwgcHJldmVudEVzY0Nsb3NlKTtcbiAgICAgICAgfSkuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGFsZXJ0KCfQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDQtNCw0L3QvdGL0YUuINCf0L7QttCw0LvRg9C50YHRgtCwLCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQv9C10YDQtdC30LDQs9GA0YPQt9C40YLRjCDRgdGC0YDQsNC90LjRhtGDLicpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coanFYSFIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JUaHJvd24pO1xuICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCgnYm9keScpLnNwaW4oZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59KTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMi4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNy0wMy0yMFQxODo1OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMi4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggXCI+dGJvZHlcIiwgZWxlbSApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiApIHtcblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICkgXTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jLCBkb2NFbGVtLCByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHdpbiA9IGRvYy5kZWZhdWx0VmlldztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE0IEZlbGl4IEduYXNzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9zcGluLmpzLm9yZy9cbiAqXG4gKiBFeGFtcGxlOlxuICAgIHZhciBvcHRzID0ge1xuICAgICAgbGluZXM6IDEyICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gZHJhd1xuICAgICwgbGVuZ3RoOiA3ICAgICAgICAgICAgIC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXG4gICAgLCB3aWR0aDogNSAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgdGhpY2tuZXNzXG4gICAgLCByYWRpdXM6IDEwICAgICAgICAgICAgLy8gVGhlIHJhZGl1cyBvZiB0aGUgaW5uZXIgY2lyY2xlXG4gICAgLCBzY2FsZTogMS4wICAgICAgICAgICAgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxuICAgICwgY29ybmVyczogMSAgICAgICAgICAgIC8vIFJvdW5kbmVzcyAoMC4uMSlcbiAgICAsIGNvbG9yOiAnIzAwMCcgICAgICAgICAvLyAjcmdiIG9yICNycmdnYmJcbiAgICAsIG9wYWNpdHk6IDEvNCAgICAgICAgICAvLyBPcGFjaXR5IG9mIHRoZSBsaW5lc1xuICAgICwgcm90YXRlOiAwICAgICAgICAgICAgIC8vIFJvdGF0aW9uIG9mZnNldFxuICAgICwgZGlyZWN0aW9uOiAxICAgICAgICAgIC8vIDE6IGNsb2Nrd2lzZSwgLTE6IGNvdW50ZXJjbG9ja3dpc2VcbiAgICAsIHNwZWVkOiAxICAgICAgICAgICAgICAvLyBSb3VuZHMgcGVyIHNlY29uZFxuICAgICwgdHJhaWw6IDEwMCAgICAgICAgICAgIC8vIEFmdGVyZ2xvdyBwZXJjZW50YWdlXG4gICAgLCBmcHM6IDIwICAgICAgICAgICAgICAgLy8gRnJhbWVzIHBlciBzZWNvbmQgd2hlbiB1c2luZyBzZXRUaW1lb3V0KClcbiAgICAsIHpJbmRleDogMmU5ICAgICAgICAgICAvLyBVc2UgYSBoaWdoIHotaW5kZXggYnkgZGVmYXVsdFxuICAgICwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgIC8vIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIGVsZW1lbnRcbiAgICAsIHRvcDogJzUwJScgICAgICAgICAgICAvLyBjZW50ZXIgdmVydGljYWxseVxuICAgICwgbGVmdDogJzUwJScgICAgICAgICAgIC8vIGNlbnRlciBob3Jpem9udGFsbHlcbiAgICAsIHNoYWRvdzogZmFsc2UgICAgICAgICAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xuICAgICwgaHdhY2NlbDogZmFsc2UgICAgICAgIC8vIFdoZXRoZXIgdG8gdXNlIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiAobWlnaHQgYmUgYnVnZ3kpXG4gICAgLCBwb3NpdGlvbjogJ2Fic29sdXRlJyAgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xuICAgIH1cbiAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpXG4gICAgdmFyIHNwaW5uZXIgPSBuZXcgU3Bpbm5lcihvcHRzKS5zcGluKHRhcmdldClcbiAqL1xuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXG4gIC8qIENvbW1vbkpTICovXG4gIGlmICh0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKVxuXG4gIC8qIEFNRCBtb2R1bGUgKi9cbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShmYWN0b3J5KVxuXG4gIC8qIEJyb3dzZXIgZ2xvYmFsICovXG4gIGVsc2Ugcm9vdC5TcGlubmVyID0gZmFjdG9yeSgpXG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCJcblxuICB2YXIgcHJlZml4ZXMgPSBbJ3dlYmtpdCcsICdNb3onLCAnbXMnLCAnTyddIC8qIFZlbmRvciBwcmVmaXhlcyAqL1xuICAgICwgYW5pbWF0aW9ucyA9IHt9IC8qIEFuaW1hdGlvbiBydWxlcyBrZXllZCBieSB0aGVpciBuYW1lICovXG4gICAgLCB1c2VDc3NBbmltYXRpb25zIC8qIFdoZXRoZXIgdG8gdXNlIENTUyBhbmltYXRpb25zIG9yIHNldFRpbWVvdXQgKi9cbiAgICAsIHNoZWV0IC8qIEEgc3R5bGVzaGVldCB0byBob2xkIHRoZSBAa2V5ZnJhbWUgb3IgVk1MIHJ1bGVzLiAqL1xuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBlbGVtZW50cy4gSWYgbm8gdGFnIG5hbWUgaXMgZ2l2ZW4sXG4gICAqIGEgRElWIGlzIGNyZWF0ZWQuIE9wdGlvbmFsbHkgcHJvcGVydGllcyBjYW4gYmUgcGFzc2VkLlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlRWwgKHRhZywgcHJvcCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnIHx8ICdkaXYnKVxuICAgICAgLCBuXG5cbiAgICBmb3IgKG4gaW4gcHJvcCkgZWxbbl0gPSBwcm9wW25dXG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyBjaGlsZHJlbiBhbmQgcmV0dXJucyB0aGUgcGFyZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gaW5zIChwYXJlbnQgLyogY2hpbGQxLCBjaGlsZDIsIC4uLiovKSB7XG4gICAgZm9yICh2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoYXJndW1lbnRzW2ldKVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG9wYWNpdHkga2V5ZnJhbWUgYW5pbWF0aW9uIHJ1bGUgYW5kIHJldHVybnMgaXRzIG5hbWUuXG4gICAqIFNpbmNlIG1vc3QgbW9iaWxlIFdlYmtpdHMgaGF2ZSB0aW1pbmcgaXNzdWVzIHdpdGggYW5pbWF0aW9uLWRlbGF5LFxuICAgKiB3ZSBjcmVhdGUgc2VwYXJhdGUgcnVsZXMgZm9yIGVhY2ggbGluZS9zZWdtZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gYWRkQW5pbWF0aW9uIChhbHBoYSwgdHJhaWwsIGksIGxpbmVzKSB7XG4gICAgdmFyIG5hbWUgPSBbJ29wYWNpdHknLCB0cmFpbCwgfn4oYWxwaGEgKiAxMDApLCBpLCBsaW5lc10uam9pbignLScpXG4gICAgICAsIHN0YXJ0ID0gMC4wMSArIGkvbGluZXMgKiAxMDBcbiAgICAgICwgeiA9IE1hdGgubWF4KDEgLSAoMS1hbHBoYSkgLyB0cmFpbCAqICgxMDAtc3RhcnQpLCBhbHBoYSlcbiAgICAgICwgcHJlZml4ID0gdXNlQ3NzQW5pbWF0aW9ucy5zdWJzdHJpbmcoMCwgdXNlQ3NzQW5pbWF0aW9ucy5pbmRleE9mKCdBbmltYXRpb24nKSkudG9Mb3dlckNhc2UoKVxuICAgICAgLCBwcmUgPSBwcmVmaXggJiYgJy0nICsgcHJlZml4ICsgJy0nIHx8ICcnXG5cbiAgICBpZiAoIWFuaW1hdGlvbnNbbmFtZV0pIHtcbiAgICAgIHNoZWV0Lmluc2VydFJ1bGUoXG4gICAgICAgICdAJyArIHByZSArICdrZXlmcmFtZXMgJyArIG5hbWUgKyAneycgK1xuICAgICAgICAnMCV7b3BhY2l0eTonICsgeiArICd9JyArXG4gICAgICAgIHN0YXJ0ICsgJyV7b3BhY2l0eTonICsgYWxwaGEgKyAnfScgK1xuICAgICAgICAoc3RhcnQrMC4wMSkgKyAnJXtvcGFjaXR5OjF9JyArXG4gICAgICAgIChzdGFydCt0cmFpbCkgJSAxMDAgKyAnJXtvcGFjaXR5OicgKyBhbHBoYSArICd9JyArXG4gICAgICAgICcxMDAle29wYWNpdHk6JyArIHogKyAnfScgK1xuICAgICAgICAnfScsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aClcblxuICAgICAgYW5pbWF0aW9uc1tuYW1lXSA9IDFcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWVzIHZhcmlvdXMgdmVuZG9yIHByZWZpeGVzIGFuZCByZXR1cm5zIHRoZSBmaXJzdCBzdXBwb3J0ZWQgcHJvcGVydHkuXG4gICAqL1xuICBmdW5jdGlvbiB2ZW5kb3IgKGVsLCBwcm9wKSB7XG4gICAgdmFyIHMgPSBlbC5zdHlsZVxuICAgICAgLCBwcFxuICAgICAgLCBpXG5cbiAgICBwcm9wID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSlcbiAgICBpZiAoc1twcm9wXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHJvcFxuICAgIGZvciAoaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHAgPSBwcmVmaXhlc1tpXStwcm9wXG4gICAgICBpZiAoc1twcF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIHBwXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgbXVsdGlwbGUgc3R5bGUgcHJvcGVydGllcyBhdCBvbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gY3NzIChlbCwgcHJvcCkge1xuICAgIGZvciAodmFyIG4gaW4gcHJvcCkge1xuICAgICAgZWwuc3R5bGVbdmVuZG9yKGVsLCBuKSB8fCBuXSA9IHByb3Bbbl1cbiAgICB9XG5cbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxscyBpbiBkZWZhdWx0IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlZiA9IGFyZ3VtZW50c1tpXVxuICAgICAgZm9yICh2YXIgbiBpbiBkZWYpIHtcbiAgICAgICAgaWYgKG9ialtuXSA9PT0gdW5kZWZpbmVkKSBvYmpbbl0gPSBkZWZbbl1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpbmUgY29sb3IgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nIG9yIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Q29sb3IgKGNvbG9yLCBpZHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbG9yID09ICdzdHJpbmcnID8gY29sb3IgOiBjb2xvcltpZHggJSBjb2xvci5sZW5ndGhdXG4gIH1cblxuICAvLyBCdWlsdC1pbiBkZWZhdWx0c1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBsaW5lczogMTIgICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XG4gICwgbGVuZ3RoOiA3ICAgICAgICAgICAgIC8vIFRoZSBsZW5ndGggb2YgZWFjaCBsaW5lXG4gICwgd2lkdGg6IDUgICAgICAgICAgICAgIC8vIFRoZSBsaW5lIHRoaWNrbmVzc1xuICAsIHJhZGl1czogMTAgICAgICAgICAgICAvLyBUaGUgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcbiAgLCBzY2FsZTogMS4wICAgICAgICAgICAgLy8gU2NhbGVzIG92ZXJhbGwgc2l6ZSBvZiB0aGUgc3Bpbm5lclxuICAsIGNvcm5lcnM6IDEgICAgICAgICAgICAvLyBSb3VuZG5lc3MgKDAuLjEpXG4gICwgY29sb3I6ICcjMDAwJyAgICAgICAgIC8vICNyZ2Igb3IgI3JyZ2diYlxuICAsIG9wYWNpdHk6IDEvNCAgICAgICAgICAvLyBPcGFjaXR5IG9mIHRoZSBsaW5lc1xuICAsIHJvdGF0ZTogMCAgICAgICAgICAgICAvLyBSb3RhdGlvbiBvZmZzZXRcbiAgLCBkaXJlY3Rpb246IDEgICAgICAgICAgLy8gMTogY2xvY2t3aXNlLCAtMTogY291bnRlcmNsb2Nrd2lzZVxuICAsIHNwZWVkOiAxICAgICAgICAgICAgICAvLyBSb3VuZHMgcGVyIHNlY29uZFxuICAsIHRyYWlsOiAxMDAgICAgICAgICAgICAvLyBBZnRlcmdsb3cgcGVyY2VudGFnZVxuICAsIGZwczogMjAgICAgICAgICAgICAgICAvLyBGcmFtZXMgcGVyIHNlY29uZCB3aGVuIHVzaW5nIHNldFRpbWVvdXQoKVxuICAsIHpJbmRleDogMmU5ICAgICAgICAgICAvLyBVc2UgYSBoaWdoIHotaW5kZXggYnkgZGVmYXVsdFxuICAsIGNsYXNzTmFtZTogJ3NwaW5uZXInICAvLyBDU1MgY2xhc3MgdG8gYXNzaWduIHRvIHRoZSBlbGVtZW50XG4gICwgdG9wOiAnNTAlJyAgICAgICAgICAgIC8vIGNlbnRlciB2ZXJ0aWNhbGx5XG4gICwgbGVmdDogJzUwJScgICAgICAgICAgIC8vIGNlbnRlciBob3Jpem9udGFsbHlcbiAgLCBzaGFkb3c6IGZhbHNlICAgICAgICAgLy8gV2hldGhlciB0byByZW5kZXIgYSBzaGFkb3dcbiAgLCBod2FjY2VsOiBmYWxzZSAgICAgICAgLy8gV2hldGhlciB0byB1c2UgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIChtaWdodCBiZSBidWdneSlcbiAgLCBwb3NpdGlvbjogJ2Fic29sdXRlJyAgLy8gRWxlbWVudCBwb3NpdGlvbmluZ1xuICB9XG5cbiAgLyoqIFRoZSBjb25zdHJ1Y3RvciAqL1xuICBmdW5jdGlvbiBTcGlubmVyIChvKSB7XG4gICAgdGhpcy5vcHRzID0gbWVyZ2UobyB8fCB7fSwgU3Bpbm5lci5kZWZhdWx0cywgZGVmYXVsdHMpXG4gIH1cblxuICAvLyBHbG9iYWwgZGVmYXVsdHMgdGhhdCBvdmVycmlkZSB0aGUgYnVpbHQtaW5zOlxuICBTcGlubmVyLmRlZmF1bHRzID0ge31cblxuICBtZXJnZShTcGlubmVyLnByb3RvdHlwZSwge1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHNwaW5uZXIgdG8gdGhlIGdpdmVuIHRhcmdldCBlbGVtZW50LiBJZiB0aGlzIGluc3RhbmNlIGlzIGFscmVhZHlcbiAgICAgKiBzcGlubmluZywgaXQgaXMgYXV0b21hdGljYWxseSByZW1vdmVkIGZyb20gaXRzIHByZXZpb3VzIHRhcmdldCBiIGNhbGxpbmdcbiAgICAgKiBzdG9wKCkgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICBzcGluOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLnN0b3AoKVxuXG4gICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgLCBvID0gc2VsZi5vcHRzXG4gICAgICAgICwgZWwgPSBzZWxmLmVsID0gY3JlYXRlRWwobnVsbCwge2NsYXNzTmFtZTogby5jbGFzc05hbWV9KVxuXG4gICAgICBjc3MoZWwsIHtcbiAgICAgICAgcG9zaXRpb246IG8ucG9zaXRpb25cbiAgICAgICwgd2lkdGg6IDBcbiAgICAgICwgekluZGV4OiBvLnpJbmRleFxuICAgICAgLCBsZWZ0OiBvLmxlZnRcbiAgICAgICwgdG9wOiBvLnRvcFxuICAgICAgfSlcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKGVsLCB0YXJnZXQuZmlyc3RDaGlsZCB8fCBudWxsKVxuICAgICAgfVxuXG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAncHJvZ3Jlc3NiYXInKVxuICAgICAgc2VsZi5saW5lcyhlbCwgc2VsZi5vcHRzKVxuXG4gICAgICBpZiAoIXVzZUNzc0FuaW1hdGlvbnMpIHtcbiAgICAgICAgLy8gTm8gQ1NTIGFuaW1hdGlvbiBzdXBwb3J0LCB1c2Ugc2V0VGltZW91dCgpIGluc3RlYWRcbiAgICAgICAgdmFyIGkgPSAwXG4gICAgICAgICAgLCBzdGFydCA9IChvLmxpbmVzIC0gMSkgKiAoMSAtIG8uZGlyZWN0aW9uKSAvIDJcbiAgICAgICAgICAsIGFscGhhXG4gICAgICAgICAgLCBmcHMgPSBvLmZwc1xuICAgICAgICAgICwgZiA9IGZwcyAvIG8uc3BlZWRcbiAgICAgICAgICAsIG9zdGVwID0gKDEgLSBvLm9wYWNpdHkpIC8gKGYgKiBvLnRyYWlsIC8gMTAwKVxuICAgICAgICAgICwgYXN0ZXAgPSBmIC8gby5saW5lc1xuXG4gICAgICAgIDsoZnVuY3Rpb24gYW5pbSAoKSB7XG4gICAgICAgICAgaSsrXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvLmxpbmVzOyBqKyspIHtcbiAgICAgICAgICAgIGFscGhhID0gTWF0aC5tYXgoMSAtIChpICsgKG8ubGluZXMgLSBqKSAqIGFzdGVwKSAlIGYgKiBvc3RlcCwgby5vcGFjaXR5KVxuXG4gICAgICAgICAgICBzZWxmLm9wYWNpdHkoZWwsIGogKiBvLmRpcmVjdGlvbiArIHN0YXJ0LCBhbHBoYSwgbylcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi50aW1lb3V0ID0gc2VsZi5lbCAmJiBzZXRUaW1lb3V0KGFuaW0sIH5+KDEwMDAgLyBmcHMpKVxuICAgICAgICB9KSgpXG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFuZCByZW1vdmVzIHRoZSBTcGlubmVyLlxuICAgICAqL1xuICAsIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuZWxcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbClcbiAgICAgICAgdGhpcy5lbCA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBkcmF3cyB0aGUgaW5kaXZpZHVhbCBsaW5lcy4gV2lsbCBiZSBvdmVyd3JpdHRlblxuICAgICAqIGluIFZNTCBmYWxsYmFjayBtb2RlIGJlbG93LlxuICAgICAqL1xuICAsIGxpbmVzOiBmdW5jdGlvbiAoZWwsIG8pIHtcbiAgICAgIHZhciBpID0gMFxuICAgICAgICAsIHN0YXJ0ID0gKG8ubGluZXMgLSAxKSAqICgxIC0gby5kaXJlY3Rpb24pIC8gMlxuICAgICAgICAsIHNlZ1xuXG4gICAgICBmdW5jdGlvbiBmaWxsIChjb2xvciwgc2hhZG93KSB7XG4gICAgICAgIHJldHVybiBjc3MoY3JlYXRlRWwoKSwge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICwgd2lkdGg6IG8uc2NhbGUgKiAoby5sZW5ndGggKyBvLndpZHRoKSArICdweCdcbiAgICAgICAgLCBoZWlnaHQ6IG8uc2NhbGUgKiBvLndpZHRoICsgJ3B4J1xuICAgICAgICAsIGJhY2tncm91bmQ6IGNvbG9yXG4gICAgICAgICwgYm94U2hhZG93OiBzaGFkb3dcbiAgICAgICAgLCB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0J1xuICAgICAgICAsIHRyYW5zZm9ybTogJ3JvdGF0ZSgnICsgfn4oMzYwL28ubGluZXMqaSArIG8ucm90YXRlKSArICdkZWcpIHRyYW5zbGF0ZSgnICsgby5zY2FsZSpvLnJhZGl1cyArICdweCcgKyAnLDApJ1xuICAgICAgICAsIGJvcmRlclJhZGl1czogKG8uY29ybmVycyAqIG8uc2NhbGUgKiBvLndpZHRoID4+IDEpICsgJ3B4J1xuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IG8ubGluZXM7IGkrKykge1xuICAgICAgICBzZWcgPSBjc3MoY3JlYXRlRWwoKSwge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICwgdG9wOiAxICsgfihvLnNjYWxlICogby53aWR0aCAvIDIpICsgJ3B4J1xuICAgICAgICAsIHRyYW5zZm9ybTogby5od2FjY2VsID8gJ3RyYW5zbGF0ZTNkKDAsMCwwKScgOiAnJ1xuICAgICAgICAsIG9wYWNpdHk6IG8ub3BhY2l0eVxuICAgICAgICAsIGFuaW1hdGlvbjogdXNlQ3NzQW5pbWF0aW9ucyAmJiBhZGRBbmltYXRpb24oby5vcGFjaXR5LCBvLnRyYWlsLCBzdGFydCArIGkgKiBvLmRpcmVjdGlvbiwgby5saW5lcykgKyAnICcgKyAxIC8gby5zcGVlZCArICdzIGxpbmVhciBpbmZpbml0ZSdcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoby5zaGFkb3cpIGlucyhzZWcsIGNzcyhmaWxsKCcjMDAwJywgJzAgMCA0cHggIzAwMCcpLCB7dG9wOiAnMnB4J30pKVxuICAgICAgICBpbnMoZWwsIGlucyhzZWcsIGZpbGwoZ2V0Q29sb3Ioby5jb2xvciwgaSksICcwIDAgMXB4IHJnYmEoMCwwLDAsLjEpJykpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgbWV0aG9kIHRoYXQgYWRqdXN0cyB0aGUgb3BhY2l0eSBvZiBhIHNpbmdsZSBsaW5lLlxuICAgICAqIFdpbGwgYmUgb3ZlcndyaXR0ZW4gaW4gVk1MIGZhbGxiYWNrIG1vZGUgYmVsb3cuXG4gICAgICovXG4gICwgb3BhY2l0eTogZnVuY3Rpb24gKGVsLCBpLCB2YWwpIHtcbiAgICAgIGlmIChpIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGgpIGVsLmNoaWxkTm9kZXNbaV0uc3R5bGUub3BhY2l0eSA9IHZhbFxuICAgIH1cblxuICB9KVxuXG5cbiAgZnVuY3Rpb24gaW5pdFZNTCAoKSB7XG5cbiAgICAvKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFZNTCB0YWcgKi9cbiAgICBmdW5jdGlvbiB2bWwgKHRhZywgYXR0cikge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsKCc8JyArIHRhZyArICcgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQuY29tOnZtbFwiIGNsYXNzPVwic3Bpbi12bWxcIj4nLCBhdHRyKVxuICAgIH1cblxuICAgIC8vIE5vIENTUyB0cmFuc2Zvcm1zIGJ1dCBWTUwgc3VwcG9ydCwgYWRkIGEgQ1NTIHJ1bGUgZm9yIFZNTCBlbGVtZW50czpcbiAgICBzaGVldC5hZGRSdWxlKCcuc3Bpbi12bWwnLCAnYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTCknKVxuXG4gICAgU3Bpbm5lci5wcm90b3R5cGUubGluZXMgPSBmdW5jdGlvbiAoZWwsIG8pIHtcbiAgICAgIHZhciByID0gby5zY2FsZSAqIChvLmxlbmd0aCArIG8ud2lkdGgpXG4gICAgICAgICwgcyA9IG8uc2NhbGUgKiAyICogclxuXG4gICAgICBmdW5jdGlvbiBncnAgKCkge1xuICAgICAgICByZXR1cm4gY3NzKFxuICAgICAgICAgIHZtbCgnZ3JvdXAnLCB7XG4gICAgICAgICAgICBjb29yZHNpemU6IHMgKyAnICcgKyBzXG4gICAgICAgICAgLCBjb29yZG9yaWdpbjogLXIgKyAnICcgKyAtclxuICAgICAgICAgIH0pXG4gICAgICAgICwgeyB3aWR0aDogcywgaGVpZ2h0OiBzIH1cbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB2YXIgbWFyZ2luID0gLShvLndpZHRoICsgby5sZW5ndGgpICogby5zY2FsZSAqIDIgKyAncHgnXG4gICAgICAgICwgZyA9IGNzcyhncnAoKSwge3Bvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IG1hcmdpbiwgbGVmdDogbWFyZ2lufSlcbiAgICAgICAgLCBpXG5cbiAgICAgIGZ1bmN0aW9uIHNlZyAoaSwgZHgsIGZpbHRlcikge1xuICAgICAgICBpbnMoXG4gICAgICAgICAgZ1xuICAgICAgICAsIGlucyhcbiAgICAgICAgICAgIGNzcyhncnAoKSwge3JvdGF0aW9uOiAzNjAgLyBvLmxpbmVzICogaSArICdkZWcnLCBsZWZ0OiB+fmR4fSlcbiAgICAgICAgICAsIGlucyhcbiAgICAgICAgICAgICAgY3NzKFxuICAgICAgICAgICAgICAgIHZtbCgncm91bmRyZWN0Jywge2FyY3NpemU6IG8uY29ybmVyc30pXG4gICAgICAgICAgICAgICwgeyB3aWR0aDogclxuICAgICAgICAgICAgICAgICwgaGVpZ2h0OiBvLnNjYWxlICogby53aWR0aFxuICAgICAgICAgICAgICAgICwgbGVmdDogby5zY2FsZSAqIG8ucmFkaXVzXG4gICAgICAgICAgICAgICAgLCB0b3A6IC1vLnNjYWxlICogby53aWR0aCA+PiAxXG4gICAgICAgICAgICAgICAgLCBmaWx0ZXI6IGZpbHRlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgLCB2bWwoJ2ZpbGwnLCB7Y29sb3I6IGdldENvbG9yKG8uY29sb3IsIGkpLCBvcGFjaXR5OiBvLm9wYWNpdHl9KVxuICAgICAgICAgICAgLCB2bWwoJ3N0cm9rZScsIHtvcGFjaXR5OiAwfSkgLy8gdHJhbnNwYXJlbnQgc3Ryb2tlIHRvIGZpeCBjb2xvciBibGVlZGluZyB1cG9uIG9wYWNpdHkgY2hhbmdlXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGlmIChvLnNoYWRvdylcbiAgICAgICAgZm9yIChpID0gMTsgaSA8PSBvLmxpbmVzOyBpKyspIHtcbiAgICAgICAgICBzZWcoaSwgLTIsICdwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmx1cihwaXhlbHJhZGl1cz0yLG1ha2VzaGFkb3c9MSxzaGFkb3dvcGFjaXR5PS4zKScpXG4gICAgICAgIH1cblxuICAgICAgZm9yIChpID0gMTsgaSA8PSBvLmxpbmVzOyBpKyspIHNlZyhpKVxuICAgICAgcmV0dXJuIGlucyhlbCwgZylcbiAgICB9XG5cbiAgICBTcGlubmVyLnByb3RvdHlwZS5vcGFjaXR5ID0gZnVuY3Rpb24gKGVsLCBpLCB2YWwsIG8pIHtcbiAgICAgIHZhciBjID0gZWwuZmlyc3RDaGlsZFxuICAgICAgbyA9IG8uc2hhZG93ICYmIG8ubGluZXMgfHwgMFxuICAgICAgaWYgKGMgJiYgaSArIG8gPCBjLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIGMgPSBjLmNoaWxkTm9kZXNbaSArIG9dOyBjID0gYyAmJiBjLmZpcnN0Q2hpbGQ7IGMgPSBjICYmIGMuZmlyc3RDaGlsZFxuICAgICAgICBpZiAoYykgYy5vcGFjaXR5ID0gdmFsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzaGVldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZWwgPSBjcmVhdGVFbCgnc3R5bGUnLCB7dHlwZSA6ICd0ZXh0L2Nzcyd9KVxuICAgICAgaW5zKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sIGVsKVxuICAgICAgcmV0dXJuIGVsLnNoZWV0IHx8IGVsLnN0eWxlU2hlZXRcbiAgICB9KCkpXG5cbiAgICB2YXIgcHJvYmUgPSBjc3MoY3JlYXRlRWwoJ2dyb3VwJyksIHtiZWhhdmlvcjogJ3VybCgjZGVmYXVsdCNWTUwpJ30pXG5cbiAgICBpZiAoIXZlbmRvcihwcm9iZSwgJ3RyYW5zZm9ybScpICYmIHByb2JlLmFkaikgaW5pdFZNTCgpXG4gICAgZWxzZSB1c2VDc3NBbmltYXRpb25zID0gdmVuZG9yKHByb2JlLCAnYW5pbWF0aW9uJylcbiAgfVxuXG4gIHJldHVybiBTcGlubmVyXG5cbn0pKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTQgRmVsaXggR25hc3NcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL3NwaW4uanMub3JnL1xuICovXG5cbi8qXG5cbkJhc2ljIFVzYWdlOlxuPT09PT09PT09PT09XG5cbiQoJyNlbCcpLnNwaW4oKSAvLyBDcmVhdGVzIGEgZGVmYXVsdCBTcGlubmVyIHVzaW5nIHRoZSB0ZXh0IGNvbG9yIG9mICNlbC5cbiQoJyNlbCcpLnNwaW4oeyAuLi4gfSkgLy8gQ3JlYXRlcyBhIFNwaW5uZXIgdXNpbmcgdGhlIHByb3ZpZGVkIG9wdGlvbnMuXG5cbiQoJyNlbCcpLnNwaW4oZmFsc2UpIC8vIFN0b3BzIGFuZCByZW1vdmVzIHRoZSBzcGlubmVyLlxuXG5Vc2luZyBQcmVzZXRzOlxuPT09PT09PT09PT09PT1cblxuJCgnI2VsJykuc3Bpbignc21hbGwnKSAvLyBDcmVhdGVzIGEgJ3NtYWxsJyBTcGlubmVyIHVzaW5nIHRoZSB0ZXh0IGNvbG9yIG9mICNlbC5cbiQoJyNlbCcpLnNwaW4oJ2xhcmdlJywgJyNmZmYnKSAvLyBDcmVhdGVzIGEgJ2xhcmdlJyB3aGl0ZSBTcGlubmVyLlxuXG5BZGRpbmcgYSBjdXN0b20gcHJlc2V0OlxuPT09PT09PT09PT09PT09PT09PT09PT1cblxuJC5mbi5zcGluLnByZXNldHMuZmxvd2VyID0ge1xuICBsaW5lczogICA5XG4sIGxlbmd0aDogMTBcbiwgd2lkdGg6ICAyMFxuLCByYWRpdXM6ICAwXG59XG5cbiQoJyNlbCcpLnNwaW4oJ2Zsb3dlcicsICdyZWQnKVxuXG4qL1xuXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcblxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcpIHtcbiAgICAvLyBDb21tb25KU1xuICAgIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ3NwaW4uanMnKSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRCwgcmVnaXN0ZXIgYXMgYW5vbnltb3VzIG1vZHVsZVxuICAgIGRlZmluZShbJ2pxdWVyeScsICdzcGluJ10sIGZhY3RvcnkpXG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgaWYgKCF3aW5kb3cuU3Bpbm5lcikgdGhyb3cgbmV3IEVycm9yKCdTcGluLmpzIG5vdCBwcmVzZW50JylcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnksIHdpbmRvdy5TcGlubmVyKVxuICB9XG5cbn0oZnVuY3Rpb24oJCwgU3Bpbm5lcikge1xuXG4gICQuZm4uc3BpbiA9IGZ1bmN0aW9uKG9wdHMsIGNvbG9yKSB7XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgICAsIGRhdGEgPSAkdGhpcy5kYXRhKClcblxuICAgICAgaWYgKGRhdGEuc3Bpbm5lcikge1xuICAgICAgICBkYXRhLnNwaW5uZXIuc3RvcCgpXG4gICAgICAgIGRlbGV0ZSBkYXRhLnNwaW5uZXJcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzICE9PSBmYWxzZSkge1xuICAgICAgICBvcHRzID0gJC5leHRlbmQoXG4gICAgICAgICAgeyBjb2xvcjogY29sb3IgfHwgJHRoaXMuY3NzKCdjb2xvcicpIH1cbiAgICAgICAgLCAkLmZuLnNwaW4ucHJlc2V0c1tvcHRzXSB8fCBvcHRzXG4gICAgICAgIClcbiAgICAgICAgZGF0YS5zcGlubmVyID0gbmV3IFNwaW5uZXIob3B0cykuc3Bpbih0aGlzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAkLmZuLnNwaW4ucHJlc2V0cyA9IHtcbiAgICB0aW55OiAgeyBsaW5lczogIDgsIGxlbmd0aDogMiwgd2lkdGg6IDIsIHJhZGl1czogMyB9XG4gICwgc21hbGw6IHsgbGluZXM6ICA4LCBsZW5ndGg6IDQsIHdpZHRoOiAzLCByYWRpdXM6IDUgfVxuICAsIGxhcmdlOiB7IGxpbmVzOiAxMCwgbGVuZ3RoOiA4LCB3aWR0aDogNCwgcmFkaXVzOiA4IH1cbiAgfVxuXG59KSk7XG4iLCIvKipcbiAqIGpxdWVyeS5tYXNrLmpzXG4gKiBAdmVyc2lvbjogdjEuMTQuMTNcbiAqIEBhdXRob3I6IElnb3IgRXNjb2JhclxuICpcbiAqIENyZWF0ZWQgYnkgSWdvciBFc2NvYmFyIG9uIDIwMTItMDMtMTAuIFBsZWFzZSByZXBvcnQgYW55IGJ1ZyBhdCBnaXRodWIuY29tL2lnb3Jlc2NvYmFyL2pRdWVyeS1NYXNrLVBsdWdpblxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBJZ29yIEVzY29iYXIgaHR0cDovL2lnb3Jlc2NvYmFyLmNvbVxuICpcbiAqIFRoZSBNSVQgTGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXRcbiAqIHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuICogY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZVxuICogU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbiAqIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVNcbiAqIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuICogSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1JcbiAqIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKiBqc2hpbnQgbGF4YnJlYWs6IHRydWUgKi9cbi8qIGpzaGludCBtYXhjb21wbGV4aXR5OjE3ICovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKSBwYXR0ZXJucyBmb3IgSmF2YVNjcmlwdCBtb2R1bGVzIHRoYXQgd29yayBldmVyeXdoZXJlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci90ZW1wbGF0ZXMvanF1ZXJ5UGx1Z2luLmpzXG4oZnVuY3Rpb24gKGZhY3RvcnksIGpRdWVyeSwgWmVwdG8pIHtcblxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkgfHwgWmVwdG8pO1xuICAgIH1cblxufShmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBNYXNrID0gZnVuY3Rpb24gKGVsLCBtYXNrLCBvcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICBpbnZhbGlkOiBbXSxcbiAgICAgICAgICAgIGdldENhcmV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsID0gZWwuZ2V0KDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZFNlbCA9IGRvY3VtZW50LnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNTZWxTdGFydCA9IGN0cmwuc2VsZWN0aW9uU3RhcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgU3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBpZiAoZFNlbCAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwgPSBkU2VsLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtcC52YWwoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gc2VsLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggc3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjU2VsU3RhcnQgfHwgY1NlbFN0YXJ0ID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGNTZWxTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRDYXJldDogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBjdHJsID0gZWwuZ2V0KDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94LCBXZWJLaXQsIGV0Yy4uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC5zZXRTZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSUVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGN0cmwuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICAgICAub24oJ2tleWRvd24ubWFzaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1rZXljb2RlJywgZS5rZXlDb2RlIHx8IGUud2hpY2gpO1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnLCBlbC52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnLCBwLmdldENhcmV0KCkpO1xuICAgICAgICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcE9sZCA9IHAubWFza0RpZ2l0UG9zTWFwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCQuak1hc2tHbG9iYWxzLnVzZUlucHV0ID8gJ2lucHV0Lm1hc2snIDogJ2tleXVwLm1hc2snLCBwLmJlaGF2aW91cilcbiAgICAgICAgICAgICAgICAub24oJ3Bhc3RlLm1hc2sgZHJvcC5tYXNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5rZXlkb3duKCkua2V5dXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignY2hhbmdlLm1hc2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gcC52YWwoKSAmJiAhZWwuZGF0YSgnY2hhbmdlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdjaGFuZ2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gaXQncyB2ZXJ5IGltcG9ydGFudCB0aGF0IHRoaXMgY2FsbGJhY2sgcmVtYWlucyBpbiB0aGlzIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aGlzZSBvbGRWYWx1ZSBpdCdzIGdvaW5nIHRvIHdvcmsgYnVnZ3lcbiAgICAgICAgICAgICAgICAub24oJ2JsdXIubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHAudmFsKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYWxsIHRleHQgb24gZm9jdXNcbiAgICAgICAgICAgICAgICAub24oJ2ZvY3VzLm1hc2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3RPbkZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGUudGFyZ2V0KS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIHZhbHVlIGlmIGl0IG5vdCBjb21wbGV0ZSB0aGUgbWFza1xuICAgICAgICAgICAgICAgIC5vbignZm9jdXNvdXQubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggJiYgIXJlZ2V4TWFzay50ZXN0KHAudmFsKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHAudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UmVnZXhNYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFza0NodW5rcyA9IFtdLCB0cmFuc2xhdGlvbiwgcGF0dGVybiwgb3B0aW9uYWwsIHJlY3Vyc2l2ZSwgb1JlY3Vyc2l2ZSwgcjtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHRyYW5zbGF0aW9uLnBhdHRlcm4udG9TdHJpbmcoKS5yZXBsYWNlKC8uezF9JHxeLnsxfS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbCA9IHRyYW5zbGF0aW9uLm9wdGlvbmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlID0gdHJhbnNsYXRpb24ucmVjdXJzaXZlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKG1hc2suY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvUmVjdXJzaXZlID0ge2RpZ2l0OiBtYXNrLmNoYXJBdChpKSwgcGF0dGVybjogcGF0dGVybn07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaCghb3B0aW9uYWwgJiYgIXJlY3Vyc2l2ZSA/IHBhdHRlcm4gOiAocGF0dGVybiArICc/JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2gobWFzay5jaGFyQXQoaSkucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgciA9IG1hc2tDaHVua3Muam9pbignJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAob1JlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICByID0gci5yZXBsYWNlKG5ldyBSZWdFeHAoJygnICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcoLionICsgb1JlY3Vyc2l2ZS5kaWdpdCArICcpPyknKSwgJygkMSk/JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKG9SZWN1cnNpdmUuZGlnaXQsICdnJyksIG9SZWN1cnNpdmUucGF0dGVybik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveUV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWwub2ZmKFsnaW5wdXQnLCAna2V5ZG93bicsICdrZXl1cCcsICdwYXN0ZScsICdkcm9wJywgJ2JsdXInLCAnZm9jdXNvdXQnLCAnJ10uam9pbignLm1hc2sgJykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbDogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHZhciBpc0lucHV0ID0gZWwuaXMoJ2lucHV0JyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IGlzSW5wdXQgPyAndmFsJyA6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgcjtcblxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxbbWV0aG9kXSgpICE9PSB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbFttZXRob2RdKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHIgPSBlbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByID0gZWxbbWV0aG9kXSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGN1bGF0ZUNhcmV0UG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBvbGRWYWwgPSBlbC5kYXRhKCdtYXNrLXByZXZpdXMtdmFsdWUnKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsID0gcC5nZXRNYXNrZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvc09sZCA9IGVsLmRhdGEoJ21hc2stcHJldml1cy1jYXJldC1wb3MnKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsTCA9IG5ld1ZhbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWxMID0gb2xkVmFsLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3OyBpIDwgbmV3VmFsTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQWZ0ZXJDYXJldCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXcgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldyAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zT2xkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLm1hc2tEaWdpdFBvc01hcE9sZFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGN1cnNvciBpcyBhdCB0aGUgZW5kIGtlZXAgaXQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zTmV3ID4gb2xkVmFsTCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gbmV3VmFsTCAqIDEwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNhcmV0UG9zT2xkID49IGNhcmV0UG9zTmV3ICYmIGNhcmV0UG9zT2xkICE9PSBvbGRWYWxMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwT2xkW2NhcmV0UG9zTmV3XSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3IC09IG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCAtIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgLT0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBbY2FyZXRQb3NOZXddKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFBvc05ldyA+IGNhcmV0UG9zT2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwgLSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyArPSBtYXNrRGlnaXRzQWZ0ZXJDYXJldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZXRQb3NOZXc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgICAgIHAuaW52YWxpZCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlbC5kYXRhKCdtYXNrLWtleWNvZGUnKTtcblxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoa2V5Q29kZSwgak1hc2suYnlQYXNzS2V5cykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgICA9IHAuZ2V0TWFza2VkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IHAuZ2V0Q2FyZXQoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgY29tcGVuc2F0aW9uIHRvIGRldmljZXMvYnJvd3NlcnMgdGhhdCBkb24ndCBjb21wZW5zYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhcmV0IHBvc2l0aW9uaW5nIHRoZSByaWdodCB3YXlcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwLnNldENhcmV0KHAuY2FsY3VsYXRlQ2FyZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgIHAudmFsKG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQoY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5jYWxsYmFja3MoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1hc2tlZDogZnVuY3Rpb24oc2tpcE1hc2tDaGFycywgdmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IFtdLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbCA9PT0gdW5kZWZpbmVkID8gcC52YWwoKSA6IHZhbCArICcnLFxuICAgICAgICAgICAgICAgICAgICBtID0gMCwgbWFza0xlbiA9IG1hc2subGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB2ID0gMCwgdmFsTGVuID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAxLCBhZGRNZXRob2QgPSAncHVzaCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gLTEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdENvdW50ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0UG9zQXJyID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXNrQ2hhcixcbiAgICAgICAgICAgICAgICAgICAgY2hlY2s7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE1ldGhvZCA9ICd1bnNoaWZ0JztcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXNrQ2hhciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG0gPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgdiA9IHZhbExlbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPiAtMSAmJiB2ID4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gbWFza0xlbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPCBtYXNrTGVuICYmIHYgPCB2YWxMZW47XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza0RpZ2l0ID0gbWFzay5jaGFyQXQobSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxEaWdpdCA9IHZhbHVlLmNoYXJBdCh2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gak1hc2sudHJhbnNsYXRpb25bbWFza0RpZ2l0XTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxEaWdpdC5tYXRjaCh0cmFuc2xhdGlvbi5wYXR0ZXJuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZlthZGRNZXRob2RdKHZhbERpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXRQb3MgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldFBvcyA9IG07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobSA9PT0gbGFzdE1hc2tDaGFyICYmIG0gIT09IHJlc2V0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gcmVzZXRQb3MgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hc2tDaGFyID09PSByZXNldFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbERpZ2l0ID09PSBsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaGVkIHRoZSBsYXN0IHVudHJhbnNsYXRlZCAocmF3KSBtYXNrIGNoYXJhY3RlciB0aGF0IHdlIGVuY291bnRlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGlrZWx5IGFuIGluc2VydCBvZmZzZXQgdGhlIG1hc2sgY2hhcmFjdGVyIGZyb20gdGhlIGxhc3QgZW50cnk7IGZhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdWdoIGFuZCBvbmx5IGluY3JlbWVudCB2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0aW9uLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0aW9uLmZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odHJhbnNsYXRpb24uZmFsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcC5pbnZhbGlkLnB1c2goe3A6IHYsIHY6IHZhbERpZ2l0LCBlOiB0cmFuc2xhdGlvbi5wYXR0ZXJufSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcE1hc2tDaGFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZlthZGRNZXRob2RdKG1hc2tEaWdpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxEaWdpdCA9PT0gbWFza0RpZ2l0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0UG9zQXJyLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IG1hc2tEaWdpdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2ICsgbWFza0RpZ2l0Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RNYXNrQ2hhckRpZ2l0ID0gbWFzay5jaGFyQXQobGFzdE1hc2tDaGFyKTtcbiAgICAgICAgICAgICAgICBpZiAobWFza0xlbiA9PT0gdmFsTGVuICsgMSAmJiAhak1hc2sudHJhbnNsYXRpb25bbGFzdE1hc2tDaGFyRGlnaXRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKGxhc3RNYXNrQ2hhckRpZ2l0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsID0gYnVmLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIHAubWFwTWFza2RpZ2l0UG9zaXRpb25zKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdWYWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFwTWFza2RpZ2l0UG9zaXRpb25zOiBmdW5jdGlvbihuZXdWYWwsIG1hc2tEaWdpdFBvc0FyciwgdmFsTGVuKSB7XG4gICAgICAgICAgICAgIHZhciBtYXNrRGlmZiA9IG9wdGlvbnMucmV2ZXJzZSA/IG5ld1ZhbC5sZW5ndGggLSB2YWxMZW4gOiAwO1xuICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcCA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc2tEaWdpdFBvc0Fyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwW21hc2tEaWdpdFBvc0FycltpXSArIG1hc2tEaWZmXSA9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHAudmFsKCksXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB2YWwgIT09IG9sZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QXJncyA9IFt2YWwsIGUsIGVsLCBvcHRpb25zXSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihuYW1lLCBjcml0ZXJpYSwgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW25hbWVdID09PSAnZnVuY3Rpb24nICYmIGNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tuYW1lXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNoYW5nZScsIGNoYW5nZWQgPT09IHRydWUsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25LZXlQcmVzcycsIGNoYW5nZWQgPT09IHRydWUsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25Db21wbGV0ZScsIHZhbC5sZW5ndGggPT09IG1hc2subGVuZ3RoLCBkZWZhdWx0QXJncyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uSW52YWxpZCcsIHAuaW52YWxpZC5sZW5ndGggPiAwLCBbdmFsLCBlLCBlbCwgcC5pbnZhbGlkLCBvcHRpb25zXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZWwgPSAkKGVsKTtcbiAgICAgICAgdmFyIGpNYXNrID0gdGhpcywgb2xkVmFsdWUgPSBwLnZhbCgpLCByZWdleE1hc2s7XG5cbiAgICAgICAgbWFzayA9IHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nID8gbWFzayhwLnZhbCgpLCB1bmRlZmluZWQsIGVsLCAgb3B0aW9ucykgOiBtYXNrO1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIGpNYXNrLm1hc2sgPSBtYXNrO1xuICAgICAgICBqTWFzay5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgak1hc2sucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICBwLmRlc3Ryb3lFdmVudHMoKTtcbiAgICAgICAgICAgIHAudmFsKGpNYXNrLmdldENsZWFuVmFsKCkpO1xuICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZ2V0IHZhbHVlIHdpdGhvdXQgbWFza1xuICAgICAgICBqTWFzay5nZXRDbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQodHJ1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZ2V0IG1hc2tlZCB2YWx1ZSB3aXRob3V0IHRoZSB2YWx1ZSBiZWluZyBpbiB0aGUgaW5wdXQgb3IgZWxlbWVudFxuICAgICAgICBqTWFzay5nZXRNYXNrZWRWYWwgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgcmV0dXJuIHAuZ2V0TWFza2VkKGZhbHNlLCB2YWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgak1hc2suaW5pdCA9IGZ1bmN0aW9uKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICBvbmx5TWFzayA9IG9ubHlNYXNrIHx8IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgICAgIGpNYXNrLmNsZWFySWZOb3RNYXRjaCAgPSAkLmpNYXNrR2xvYmFscy5jbGVhcklmTm90TWF0Y2g7XG4gICAgICAgICAgICBqTWFzay5ieVBhc3NLZXlzICAgICAgID0gJC5qTWFza0dsb2JhbHMuYnlQYXNzS2V5cztcbiAgICAgICAgICAgIGpNYXNrLnRyYW5zbGF0aW9uICAgICAgPSAkLmV4dGVuZCh7fSwgJC5qTWFza0dsb2JhbHMudHJhbnNsYXRpb24sIG9wdGlvbnMudHJhbnNsYXRpb24pO1xuXG4gICAgICAgICAgICBqTWFzayA9ICQuZXh0ZW5kKHRydWUsIHt9LCBqTWFzaywgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJlZ2V4TWFzayA9IHAuZ2V0UmVnZXhNYXNrKCk7XG5cbiAgICAgICAgICAgIGlmIChvbmx5TWFzaykge1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ3BsYWNlaG9sZGVyJyAsIG9wdGlvbnMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5LCBvdGhlcndpc2UgaWYgdGhlIHVzZXIgc3VibWl0IHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgLy8gYW5kIHRoZW4gcHJlc3MgdGhlIFwiYmFja1wiIGJ1dHRvbiwgdGhlIGF1dG9jb21wbGV0ZSB3aWxsIGVyYXNlXG4gICAgICAgICAgICAgICAgLy8gdGhlIGRhdGEuIFdvcmtzIGZpbmUgb24gSUU5KywgRkYsIE9wZXJhLCBTYWZhcmkuXG4gICAgICAgICAgICAgICAgaWYgKGVsLmRhdGEoJ21hc2snKSkge1xuICAgICAgICAgICAgICAgICAgZWwuYXR0cignYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRldGVjdCBpZiBpcyBuZWNlc3NhcnkgbGV0IHRoZSB1c2VyIHR5cGUgZnJlZWx5LlxuICAgICAgICAgICAgICAgIC8vIGZvciBpcyBhIGxvdCBmYXN0ZXIgdGhhbiBmb3JFYWNoLlxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXhsZW5ndGggPSB0cnVlOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrLmNoYXJBdChpKV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbiAmJiB0cmFuc2xhdGlvbi5yZWN1cnNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWF4bGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ21heGxlbmd0aCcsIG1hc2subGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwLmRlc3Ryb3lFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLmV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0ID0gcC5nZXRDYXJldCgpO1xuICAgICAgICAgICAgICAgIHAudmFsKHAuZ2V0TWFza2VkKCkpO1xuICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQoY2FyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGpNYXNrLmluaXQoIWVsLmlzKCdpbnB1dCcpKTtcbiAgICB9O1xuXG4gICAgJC5tYXNrV2F0Y2hlcnMgPSB7fTtcbiAgICB2YXIgSFRNTEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyksXG4gICAgICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICAgICAgICBwcmVmaXggPSAnZGF0YS1tYXNrLScsXG4gICAgICAgICAgICBtYXNrID0gaW5wdXQuYXR0cignZGF0YS1tYXNrJyk7XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ3JldmVyc2UnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dC5hdHRyKHByZWZpeCArICdjbGVhcmlmbm90bWF0Y2gnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ3NlbGVjdG9uZm9jdXMnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgIG9wdGlvbnMuc2VsZWN0T25Gb2N1cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm90U2FtZU1hc2tPYmplY3QoaW5wdXQsIG1hc2ssIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuZGF0YSgnbWFzaycsIG5ldyBNYXNrKHRoaXMsIG1hc2ssIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbm90U2FtZU1hc2tPYmplY3QgPSBmdW5jdGlvbihmaWVsZCwgbWFzaywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIG1hc2tPYmplY3QgPSAkKGZpZWxkKS5kYXRhKCdtYXNrJyksXG4gICAgICAgICAgICBzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSxcbiAgICAgICAgICAgIHZhbHVlID0gJChmaWVsZCkudmFsKCkgfHwgJChmaWVsZCkudGV4dCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbWFzayA9IG1hc2sodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBtYXNrT2JqZWN0ICE9PSAnb2JqZWN0JyB8fCBzdHJpbmdpZnkobWFza09iamVjdC5vcHRpb25zKSAhPT0gc3RyaW5naWZ5KG9wdGlvbnMpIHx8IG1hc2tPYmplY3QubWFzayAhPT0gbWFzaztcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9LFxuICAgIGV2ZW50U3VwcG9ydGVkID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBpc1N1cHBvcnRlZDtcblxuICAgICAgICBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lO1xuICAgICAgICBpc1N1cHBvcnRlZCA9IChldmVudE5hbWUgaW4gZWwpO1xuXG4gICAgICAgIGlmICggIWlzU3VwcG9ydGVkICkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsW2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgICB9O1xuXG4gICAgJC5mbi5tYXNrID0gZnVuY3Rpb24obWFzaywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcixcbiAgICAgICAgICAgIGdsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyxcbiAgICAgICAgICAgIGludGVydmFsID0gZ2xvYmFscy53YXRjaEludGVydmFsLFxuICAgICAgICAgICAgd2F0Y2hJbnB1dHMgPSBvcHRpb25zLndhdGNoSW5wdXRzIHx8IGdsb2JhbHMud2F0Y2hJbnB1dHMsXG4gICAgICAgICAgICBtYXNrRnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAobm90U2FtZU1hc2tPYmplY3QodGhpcywgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgnbWFzaycsIG5ldyBNYXNrKHRoaXMsIG1hc2ssIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcykuZWFjaChtYXNrRnVuY3Rpb24pO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciAmJiBzZWxlY3RvciAhPT0gJycgJiYgd2F0Y2hJbnB1dHMpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdKTtcbiAgICAgICAgICAgICQubWFza1dhdGNoZXJzW3NlbGVjdG9yXSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZmluZChzZWxlY3RvcikuZWFjaChtYXNrRnVuY3Rpb24pO1xuICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2tlZCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0TWFza2VkVmFsKHZhbCk7XG4gICAgfTtcblxuICAgICQuZm4udW5tYXNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoJC5tYXNrV2F0Y2hlcnNbdGhpcy5zZWxlY3Rvcl0pO1xuICAgICAgICBkZWxldGUgJC5tYXNrV2F0Y2hlcnNbdGhpcy5zZWxlY3Rvcl07XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YU1hc2sgPSAkKHRoaXMpLmRhdGEoJ21hc2snKTtcbiAgICAgICAgICAgIGlmIChkYXRhTWFzaykge1xuICAgICAgICAgICAgICAgIGRhdGFNYXNrLnJlbW92ZSgpLnJlbW92ZURhdGEoJ21hc2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQuZm4uY2xlYW5WYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgnbWFzaycpLmdldENsZWFuVmFsKCk7XG4gICAgfTtcblxuICAgICQuYXBwbHlEYXRhTWFzayA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJC5qTWFza0dsb2JhbHMubWFza0VsZW1lbnRzO1xuICAgICAgICB2YXIgJHNlbGVjdG9yID0gKHNlbGVjdG9yIGluc3RhbmNlb2YgJCkgPyBzZWxlY3RvciA6ICQoc2VsZWN0b3IpO1xuICAgICAgICAkc2VsZWN0b3IuZmlsdGVyKCQuak1hc2tHbG9iYWxzLmRhdGFNYXNrQXR0cikuZWFjaChIVE1MQXR0cmlidXRlcyk7XG4gICAgfTtcblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgICBtYXNrRWxlbWVudHM6ICdpbnB1dCx0ZCxzcGFuLGRpdicsXG4gICAgICAgIGRhdGFNYXNrQXR0cjogJypbZGF0YS1tYXNrXScsXG4gICAgICAgIGRhdGFNYXNrOiB0cnVlLFxuICAgICAgICB3YXRjaEludGVydmFsOiAzMDAsXG4gICAgICAgIHdhdGNoSW5wdXRzOiB0cnVlLFxuICAgICAgICAvLyBvbGQgdmVyc2lvbnMgb2YgY2hyb21lIGRvbnQgd29yayBncmVhdCB3aXRoIGlucHV0IGV2ZW50XG4gICAgICAgIHVzZUlucHV0OiAhL0Nocm9tZVxcL1syLTRdWzAtOV18U2Ftc3VuZ0Jyb3dzZXIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpICYmIGV2ZW50U3VwcG9ydGVkKCdpbnB1dCcpLFxuICAgICAgICB3YXRjaERhdGFNYXNrOiBmYWxzZSxcbiAgICAgICAgYnlQYXNzS2V5czogWzksIDE2LCAxNywgMTgsIDM2LCAzNywgMzgsIDM5LCA0MCwgOTFdLFxuICAgICAgICB0cmFuc2xhdGlvbjoge1xuICAgICAgICAgICAgJzAnOiB7cGF0dGVybjogL1xcZC99LFxuICAgICAgICAgICAgJzknOiB7cGF0dGVybjogL1xcZC8sIG9wdGlvbmFsOiB0cnVlfSxcbiAgICAgICAgICAgICcjJzoge3BhdHRlcm46IC9cXGQvLCByZWN1cnNpdmU6IHRydWV9LFxuICAgICAgICAgICAgJ0EnOiB7cGF0dGVybjogL1thLXpBLVowLTldL30sXG4gICAgICAgICAgICAnUyc6IHtwYXR0ZXJuOiAvW2EtekEtWl0vfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuak1hc2tHbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgfHwge307XG4gICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzID0gJC5leHRlbmQodHJ1ZSwge30sIGdsb2JhbHMsICQuak1hc2tHbG9iYWxzKTtcblxuICAgIC8vIGxvb2tpbmcgZm9yIGlucHV0cyB3aXRoIGRhdGEtbWFzayBhdHRyaWJ1dGVcbiAgICBpZiAoZ2xvYmFscy5kYXRhTWFzaykge1xuICAgICAgICAkLmFwcGx5RGF0YU1hc2soKTtcbiAgICB9XG5cbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCQuak1hc2tHbG9iYWxzLndhdGNoRGF0YU1hc2spIHtcbiAgICAgICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgICAgICB9XG4gICAgfSwgZ2xvYmFscy53YXRjaEludGVydmFsKTtcbn0sIHdpbmRvdy5qUXVlcnksIHdpbmRvdy5aZXB0bykpO1xuIiwiLypcbiAgICAgXyBfICAgICAgXyAgICAgICBfXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cbiAgICAgICAgICAgICAgICAgICB8X18vXG5cbiBWZXJzaW9uOiAxLjguMVxuICBBdXRob3I6IEtlbiBXaGVlbGVyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXG5cbiAqL1xuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xuOyhmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cblxufShmdW5jdGlvbigkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBTbGljayA9IHdpbmRvdy5TbGljayB8fCB7fTtcblxuICAgIFNsaWNrID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBpbnN0YW5jZVVpZCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gU2xpY2soZWxlbWVudCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLCBkYXRhU2V0dGluZ3M7XG5cbiAgICAgICAgICAgIF8uZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFwcGVuZERvdHM6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdHlwZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbihzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIC8+JykudGV4dChpICsgMSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkb3RzQ2xhc3M6ICdzbGljay1kb3RzJyxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPbkNoYW5nZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGxhenlMb2FkOiAnb25kZW1hbmQnLFxuICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJ3dpbmRvdycsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgIHJ0bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGU6ICcnLFxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICBzd2lwZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzd2lwZVRvU2xpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogNSxcbiAgICAgICAgICAgICAgICB1c2VDU1M6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlVHJhbnNmb3JtOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhaXRGb3JBbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgXy5pbml0aWFscyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgICAgICAgICAgICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMSxcbiAgICAgICAgICAgICAgICAkZG90czogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2FkSW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgJG5leHRBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICAkcHJldkFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgIHNjcm9sbGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodFxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IF8uY3VycmVudExlZnRcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgwcHgsJyArIHRhcmdldExlZnQgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLm9wdGlvbnMuYXNOYXZGb3I7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5zbGljaygnZ2V0U2xpY2snKTtcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICggIV8ucGF1c2VkICYmICFfLmludGVycnVwdGVkICYmICFfLmZvY3Vzc2VkICkge1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggXy5kaXJlY3Rpb24gPT09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggXy5jdXJyZW50U2xpZGUgLSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlVG8gKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucHJlcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkKCBfLiRuZXh0QXJyb3cgKVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICAgICAgZG90ID0gJCgnPHVsIC8+JykuYWRkQ2xhc3MoXy5vcHRpb25zLmRvdHNDbGFzcyk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gXy5nZXREb3RDb3VudCgpOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBkb3QuYXBwZW5kKCQoJzxsaSAvPicpLmFwcGVuZChfLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcywgXywgaSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kZG90cyA9IGRvdC5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kRG90cyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5maXJzdCgpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkT3V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oIF8ub3B0aW9ucy5zbGlkZSArICc6bm90KC5zbGljay1jbG9uZWQpJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpXG4gICAgICAgICAgICAgICAgLmRhdGEoJ29yaWdpbmFsU3R5bGluZycsICQoZWxlbWVudCkuYXR0cignc3R5bGUnKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stc2xpZGVyJyk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjayA9IChfLnNsaWRlQ291bnQgPT09IDApID9cbiAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhfLiRzbGlkZXIpIDpcbiAgICAgICAgICAgIF8uJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCk7XG5cbiAgICAgICAgXy4kbGlzdCA9IF8uJHNsaWRlVHJhY2sud3JhcChcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2xpY2stbGlzdFwiLz4nKS5wYXJlbnQoKTtcbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoJ29wYWNpdHknLCAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyKS5ub3QoJ1tzcmNdJykuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcblxuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG5cbiAgICAgICAgXy5idWlsZERvdHMoKTtcblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcblxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0LmFkZENsYXNzKCdkcmFnZ2FibGUnKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGEsIGIsIGMsIG5ld1NsaWRlcywgbnVtT2ZTbGlkZXMsIG9yaWdpbmFsU2xpZGVzLHNsaWRlc1BlclNlY3Rpb247XG5cbiAgICAgICAgbmV3U2xpZGVzID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlci5jaGlsZHJlbigpO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMCkge1xuXG4gICAgICAgICAgICBzbGlkZXNQZXJTZWN0aW9uID0gXy5vcHRpb25zLnNsaWRlc1BlclJvdyAqIF8ub3B0aW9ucy5yb3dzO1xuICAgICAgICAgICAgbnVtT2ZTbGlkZXMgPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMubGVuZ3RoIC8gc2xpZGVzUGVyU2VjdGlvblxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yKGEgPSAwOyBhIDwgbnVtT2ZTbGlkZXM7IGErKyl7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZm9yKGIgPSAwOyBiIDwgXy5vcHRpb25zLnJvd3M7IGIrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihjID0gMDsgYyA8IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3c7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IChhICogc2xpZGVzUGVyU2VjdGlvbiArICgoYiAqIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTbGlkZXMuYXBwZW5kQ2hpbGQoc2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobmV3U2xpZGVzKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOigxMDAgLyBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArICclJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tSZXNwb25zaXZlID0gZnVuY3Rpb24oaW5pdGlhbCwgZm9yY2VVcGRhdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha3BvaW50LCB0YXJnZXRCcmVha3BvaW50LCByZXNwb25kVG9XaWR0aCwgdHJpZ2dlckJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNsaWRlcldpZHRoID0gXy4kc2xpZGVyLndpZHRoKCk7XG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIHx8ICQod2luZG93KS53aWR0aCgpO1xuXG4gICAgICAgIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gd2luZG93V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdzbGlkZXInKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHNsaWRlcldpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnbWluJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBNYXRoLm1pbih3aW5kb3dXaWR0aCwgc2xpZGVyV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yIChicmVha3BvaW50IGluIF8uYnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoIDwgXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoID4gXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IF8uYWN0aXZlQnJlYWtwb2ludCB8fCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gXy5vcmlnaW5hbFNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gb25seSB0cmlnZ2VyIGJyZWFrcG9pbnRzIGR1cmluZyBhbiBhY3R1YWwgYnJlYWsuIG5vdCBvbiBpbml0aWFsaXplLlxuICAgICAgICAgICAgaWYoICFpbml0aWFsICYmIHRyaWdnZXJCcmVha3BvaW50ICE9PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYnJlYWtwb2ludCcsIFtfLCB0cmlnZ2VyQnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24oZXZlbnQsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCksXG4gICAgICAgICAgICBpbmRleE9mZnNldCwgc2xpZGVPZmZzZXQsIHVuZXZlbk9mZnNldDtcblxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgYSBsaW5rLCBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICBpZigkdGFyZ2V0LmlzKCdhJykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgbm90IHRoZSA8bGk+IGVsZW1lbnQgKGllOiBhIGNoaWxkKSwgZmluZCB0aGUgPGxpPi5cbiAgICAgICAgaWYoISR0YXJnZXQuaXMoJ2xpJykpIHtcbiAgICAgICAgICAgICR0YXJnZXQgPSAkdGFyZ2V0LmNsb3Nlc3QoJ2xpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB1bmV2ZW5PZmZzZXQgPSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKTtcbiAgICAgICAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKF8uc2xpZGVDb3VudCAtIF8uY3VycmVudFNsaWRlKSAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEubWVzc2FnZSkge1xuXG4gICAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlICsgc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdpbmRleCc6XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuZGF0YS5pbmRleCA9PT0gMCA/IDAgOlxuICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4IHx8ICR0YXJnZXQuaW5kZXgoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY2hlY2tOYXZpZ2FibGUoaW5kZXgpLCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgICR0YXJnZXQuY2hpbGRyZW4oKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbmF2aWdhYmxlcywgcHJldk5hdmlnYWJsZTtcblxuICAgICAgICBuYXZpZ2FibGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCk7XG4gICAgICAgIHByZXZOYXZpZ2FibGUgPSAwO1xuICAgICAgICBpZiAoaW5kZXggPiBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgbmF2aWdhYmxlc1tuXSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHByZXZOYXZpZ2FibGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2TmF2aWdhYmxlID0gbmF2aWdhYmxlc1tuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzICYmIF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoXy52aXNpYmlsaXR5Q2hhbmdlLCBfLnZpc2liaWxpdHkpO1xuXG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vZmYoJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vZmYoJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLm9yaWVudGF0aW9uQ2hhbmdlKTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ucmVzaXplKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9mZignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgb3JpZ2luYWxTbGlkZXM7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG9yaWdpbmFsU2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihyZWZyZXNoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICBfLmNsZWFuVXBFdmVudHMoKTtcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLnByZXZBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMubmV4dEFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChfLiRzbGlkZXMpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zbGljay1pbmRleCcpXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJGxpc3QuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hcHBlbmQoXy4kc2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uY2xlYW5VcFJvd3MoKTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgXy51bnNsaWNrZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmKCFyZWZyZXNoKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZGVzdHJveScsIFtfXSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJyc7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZU91dCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5maWx0ZXIoZmlsdGVyKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKVxuICAgICAgICAgICAgLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJywgJyonLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5wYXVzZU9uRm9jdXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9jdXNzZWQgPSAkc2YuaXMoJzpmb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfLmN1cnJlbnRTbGlkZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0RG90Q291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2UgaWYoIV8ub3B0aW9ucy5hc05hdkZvcikge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSAxICsgTWF0aC5jZWlsKChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYWdlclF0eSAtIDE7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldExlZnQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgIHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0U2xpZGUsXG4gICAgICAgICAgICBjb2VmO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgICAgIGNvZWYgPSAtMVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29lZiA9IC0xLjU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29lZiA9IC0yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAodmVydGljYWxIZWlnaHQgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIGNvZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPiBfLnNsaWRlQ291bnQgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIHZlcnRpY2FsSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkgLyAyKSAtICgoXy5zbGlkZVdpZHRoICogXy5zbGlkZUNvdW50KSAvIDIpO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfLm9wdGlvbnNbb3B0aW9uXTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSAwLFxuICAgICAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgICBtYXg7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudCAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkLCBzd2lwZWRTbGlkZSwgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlID8gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1zbGlkZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uKHNsaWRlLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZG9udEFuaW1hdGUpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY3JlYXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgICBfLmJ1aWxkUm93cygpO1xuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICAgICAgXy5zdGFydExvYWQoKTtcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSh0cnVlKTtcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2luaXQnLCBbX10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbnVtRG90R3JvdXBzID0gTWF0aC5jZWlsKF8uc2xpZGVDb3VudCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLFxuICAgICAgICAgICAgICAgIHRhYkNvbnRyb2xJbmRleGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCkuZmlsdGVyKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbCA+PSAwKSAmJiAodmFsIDwgXy5zbGlkZUNvdW50KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuYWRkKF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMubm90KF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVDb250cm9sSW5kZXggPSB0YWJDb250cm9sSW5kZXhlcy5pbmRleE9mKGkpO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVDb250cm9sSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgdmFyIGFyaWFCdXR0b25Db250cm9sID0gJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIHNsaWRlQ29udHJvbEluZGV4XG4gICAgICAgICAgICAgICAgICAgaWYgKCQoJyMnICsgYXJpYUJ1dHRvbkNvbnRyb2wpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFCdXR0b25Db250cm9sXG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGVkU2xpZGVJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdidXR0b24nKS5maXJzdCgpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIG1hcHBlZFNsaWRlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogKGkgKyAxKSArICcgb2YgJyArIG51bURvdEdyb3VwcyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pLmVxKF8uY3VycmVudFNsaWRlKS5maW5kKCdidXR0b24nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgICAgIH0pLmVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaT1fLmN1cnJlbnRTbGlkZSwgbWF4PWkrXy5vcHRpb25zLnNsaWRlc1RvU2hvdzsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uQ2hhbmdlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkuYXR0cih7J3RhYmluZGV4JzogJzAnfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uYWN0aXZhdGVBREEoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0RG90RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnXG4gICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5wYXVzZU9uSG92ZXIgKSB7XG5cbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcblxuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3N0YXJ0J1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKF8udmlzaWJpbGl0eUNoYW5nZSwgJC5wcm94eShfLnZpc2liaWxpdHksIF8pKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5vcmllbnRhdGlvbkNoYW5nZSwgXykpO1xuXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ucmVzaXplLCBfKSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vbignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFVJID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnNob3coKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUua2V5SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxuICAgICAgICBpZighZXZlbnQudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzkgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICdwcmV2aW91cycgOiAnbmV4dCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbG9hZFJhbmdlLCBjbG9uZVJhbmdlLCByYW5nZVN0YXJ0LCByYW5nZUVuZDtcblxuICAgICAgICBmdW5jdGlvbiBsb2FkSW1hZ2VzKGltYWdlc1Njb3BlKSB7XG5cbiAgICAgICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgaW1hZ2VzU2NvcGUpLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNvdXJjZSA9ICQodGhpcykuYXR0cignZGF0YS1sYXp5JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU3JjU2V0ID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNyY3NldCcpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNpemVzICA9ICQodGhpcykuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDEwMCwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBpbWFnZVNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgW18sIGltYWdlLCBpbWFnZVNvdXJjZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLmN1cnJlbnRTbGlkZSArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gTWF0aC5tYXgoMCwgXy5jdXJyZW50U2xpZGUgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIHJhbmdlRW5kID0gTWF0aC5jZWlsKHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0ID4gMCkgcmFuZ2VTdGFydC0tO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8PSBfLnNsaWRlQ291bnQpIHJhbmdlRW5kKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJykuc2xpY2UocmFuZ2VTdGFydCwgcmFuZ2VFbmQpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIHZhciBwcmV2U2xpZGUgPSByYW5nZVN0YXJ0IC0gMSxcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUgPSByYW5nZUVuZCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZTbGlkZSA8IDApIHByZXZTbGlkZSA9IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKHByZXZTbGlkZSkpO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShuZXh0U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBwcmV2U2xpZGUtLTtcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRJbWFnZXMobG9hZFJhbmdlKTtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKDAsIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAqIC0xKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubG9hZFNsaWRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3Moe1xuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLmluaXRVSSgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdwcm9ncmVzc2l2ZScpIHtcbiAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm5leHQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tOZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUub3JpZW50YXRpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wYXVzZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BhdXNlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBsYXkgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgXy5vcHRpb25zLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBvc3RTbGlkZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhZnRlckNoYW5nZScsIFtfLCBpbmRleF0pO1xuXG4gICAgICAgICAgICBfLmFuaW1hdGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkY3VycmVudFNsaWRlID0gJChfLiRzbGlkZXMuZ2V0KF8uY3VycmVudFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUuYXR0cigndGFiaW5kZXgnLCAwKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXYgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQcmV2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkID0gZnVuY3Rpb24oIHRyeUNvdW50ICkge1xuXG4gICAgICAgIHRyeUNvdW50ID0gdHJ5Q291bnQgfHwgMTtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkaW1nc1RvTG9hZCA9ICQoICdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlciApLFxuICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICBpbWFnZVNvdXJjZSxcbiAgICAgICAgICAgIGltYWdlU3JjU2V0LFxuICAgICAgICAgICAgaW1hZ2VTaXplcyxcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkO1xuXG4gICAgICAgIGlmICggJGltZ3NUb0xvYWQubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBpbWFnZSA9ICRpbWdzVG9Mb2FkLmZpcnN0KCk7XG4gICAgICAgICAgICBpbWFnZVNvdXJjZSA9IGltYWdlLmF0dHIoJ2RhdGEtbGF6eScpO1xuICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSBpbWFnZS5hdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSBpbWFnZS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2l6ZXMnLCBpbWFnZVNpemVzICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAuYXR0ciggJ3NyYycsIGltYWdlU291cmNlIClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG4gICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICggdHJ5Q291bnQgPCAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiB0cnkgdG8gbG9hZCB0aGUgaW1hZ2UgMyB0aW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICogbGVhdmUgYSBzbGlnaHQgZGVsYXkgc28gd2UgZG9uJ3QgZ2V0XG4gICAgICAgICAgICAgICAgICAgICAqIHNlcnZlcnMgYmxvY2tpbmcgdGhlIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCggdHJ5Q291bnQgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhbGxJbWFnZXNMb2FkZWQnLCBbIF8gXSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oIGluaXRpYWxpemluZyApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGN1cnJlbnRTbGlkZSwgbGFzdFZpc2libGVJbmRleDtcblxuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcblxuICAgICAgICAvLyBpbiBub24taW5maW5pdGUgc2xpZGVycywgd2UgZG9uJ3Qgd2FudCB0byBnbyBwYXN0IHRoZVxuICAgICAgICAvLyBsYXN0IHZpc2libGUgaW5kZXguXG4gICAgICAgIGlmKCAhXy5vcHRpb25zLmluZmluaXRlICYmICggXy5jdXJyZW50U2xpZGUgPiBsYXN0VmlzaWJsZUluZGV4ICkpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGxlc3Mgc2xpZGVzIHRoYW4gdG8gc2hvdywgZ28gdG8gc3RhcnQuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuXG4gICAgICAgIF8uZGVzdHJveSh0cnVlKTtcblxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xuXG4gICAgICAgIF8uaW5pdCgpO1xuXG4gICAgICAgIGlmKCAhaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50U2xpZGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBicmVha3BvaW50LCBjdXJyZW50QnJlYWtwb2ludCwgbCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTZXR0aW5ncyA9IF8ub3B0aW9ucy5yZXNwb25zaXZlIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKCAkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IF8ub3B0aW9ucy5yZXNwb25kVG8gfHwgJ3dpbmRvdyc7XG5cbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZVNldHRpbmdzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLmJyZWFrcG9pbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBicmVha3BvaW50cyBhbmQgY3V0IG91dCBhbnkgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lcyB3aXRoIHRoZSBzYW1lIGJyZWFrcG9pbnQgbnVtYmVyLCB3ZSBkb24ndCB3YW50IGR1cGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF8uYnJlYWtwb2ludHNbbF0gJiYgXy5icmVha3BvaW50c1tsXSA9PT0gY3VycmVudEJyZWFrcG9pbnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5zcGxpY2UobCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMucHVzaChjdXJyZW50QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW2N1cnJlbnRCcmVha3BvaW50XSA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5zZXR0aW5ncztcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoIF8ub3B0aW9ucy5tb2JpbGVGaXJzdCApID8gYS1iIDogYi1hO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWluaXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2tcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oXy5vcHRpb25zLnNsaWRlKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgJiYgXy5jdXJyZW50U2xpZGUgIT09IDApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuXG4gICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcbiAgICAgICAgXy5idWlsZERvdHMoKTtcbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKGZhbHNlLCB0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIF8ucGF1c2VkID0gIV8ub3B0aW9ucy5hdXRvcGxheTtcbiAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdyZUluaXQnLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpICE9PSBfLndpbmRvd1dpZHRoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoXy53aW5kb3dEZWxheSk7XG4gICAgICAgICAgICBfLndpbmRvd0RlbGF5ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgICAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHsgXy5zZXRQb3NpdGlvbigpOyB9XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlbW92ZVNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgsIHJlbW92ZUJlZm9yZSwgcmVtb3ZlQWxsKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJlbW92ZUJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAwIDogXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gLS1pbmRleCA6IGluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8IDEgfHwgaW5kZXggPCAwIHx8IGluZGV4ID4gXy5zbGlkZUNvdW50IC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAocmVtb3ZlQWxsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZXEoaW5kZXgpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldENTUyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgeCwgeTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSAtcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgeCA9IF8ucG9zaXRpb25Qcm9wID09ICdsZWZ0JyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XG4gICAgICAgIHkgPSBfLnBvc2l0aW9uUHJvcCA9PSAndG9wJyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XG5cbiAgICAgICAgcG9zaXRpb25Qcm9wc1tfLnBvc2l0aW9uUHJvcF0gPSBwb3NpdGlvbjtcblxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9O1xuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArIHggKyAnLCAnICsgeSArICcpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgeCArICcsICcgKyB5ICsgJywgMHB4KSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoJzBweCAnICsgXy5vcHRpb25zLmNlbnRlclBhZGRpbmcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRsaXN0LmhlaWdodChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoXy5vcHRpb25zLmNlbnRlclBhZGRpbmcgKyAnIDBweCcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmxpc3RXaWR0aCA9IF8uJGxpc3Qud2lkdGgoKTtcbiAgICAgICAgXy5saXN0SGVpZ2h0ID0gXy4kbGlzdC5oZWlnaHQoKTtcblxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlICYmIF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKE1hdGguY2VpbCgoXy5zbGlkZVdpZHRoICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoNTAwMCAqIF8uc2xpZGVDb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGgpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKHRydWUpIC0gXy4kc2xpZGVzLmZpcnN0KCkud2lkdGgoKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkgXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykud2lkdGgoXy5zbGlkZVdpZHRoIC0gb2Zmc2V0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RmFkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQ7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy5zbGlkZVdpZHRoICogaW5kZXgpICogLTE7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkuY3NzKHtcbiAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDEsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5jc3MoJ2hlaWdodCcsIHRhcmdldEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0T3B0aW9uID1cbiAgICBTbGljay5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWNjZXB0cyBhcmd1bWVudHMgaW4gZm9ybWF0IG9mOlxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzaW5nbGUgb3B0aW9uJ3MgdmFsdWU6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNldCBvZiByZXNwb25zaXZlIG9wdGlvbnM6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgJ3Jlc3BvbnNpdmUnLCBbe30sIC4uLl0sIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgdXBkYXRpbmcgbXVsdGlwbGUgdmFsdWVzIGF0IG9uY2UgKG5vdCByZXNwb25zaXZlKVxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIHsgJ29wdGlvbic6IHZhbHVlLCAuLi4gfSwgcmVmcmVzaCApXG4gICAgICAgICAqL1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgbCwgaXRlbSwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCA9IGZhbHNlLCB0eXBlO1xuXG4gICAgICAgIGlmKCAkLnR5cGUoIGFyZ3VtZW50c1swXSApID09PSAnb2JqZWN0JyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0eXBlID0gJ211bHRpcGxlJztcblxuICAgICAgICB9IGVsc2UgaWYgKCAkLnR5cGUoIGFyZ3VtZW50c1swXSApID09PSAnc3RyaW5nJyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHZhbHVlID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgaWYgKCBhcmd1bWVudHNbMF0gPT09ICdyZXNwb25zaXZlJyAmJiAkLnR5cGUoIGFyZ3VtZW50c1sxXSApID09PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdyZXNwb25zaXZlJztcblxuICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mIGFyZ3VtZW50c1sxXSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3NpbmdsZSc7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0eXBlID09PSAnc2luZ2xlJyApIHtcblxuICAgICAgICAgICAgXy5vcHRpb25zW29wdGlvbl0gPSB2YWx1ZTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdtdWx0aXBsZScgKSB7XG5cbiAgICAgICAgICAgICQuZWFjaCggb3B0aW9uICwgZnVuY3Rpb24oIG9wdCwgdmFsICkge1xuXG4gICAgICAgICAgICAgICAgXy5vcHRpb25zW29wdF0gPSB2YWw7XG5cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ3Jlc3BvbnNpdmUnICkge1xuXG4gICAgICAgICAgICBmb3IgKCBpdGVtIGluIHZhbHVlICkge1xuXG4gICAgICAgICAgICAgICAgaWYoICQudHlwZSggXy5vcHRpb25zLnJlc3BvbnNpdmUgKSAhPT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSA9IFsgdmFsdWVbaXRlbV0gXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbCA9IF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgcmVzcG9uc2l2ZSBvYmplY3QgYW5kIHNwbGljZSBvdXQgZHVwbGljYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5yZXNwb25zaXZlW2xdLmJyZWFrcG9pbnQgPT09IHZhbHVlW2l0ZW1dLmJyZWFrcG9pbnQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UobCwxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnB1c2goIHZhbHVlW2l0ZW1dICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCByZWZyZXNoICkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0RGltZW5zaW9ucygpO1xuXG4gICAgICAgIF8uc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zZXRDU1MoXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNldEZhZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzZXRQb3NpdGlvbicsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFByb3BzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keS5zdHlsZTtcblxuICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSA/ICd0b3AnIDogJ2xlZnQnO1xuXG4gICAgICAgIGlmIChfLnBvc2l0aW9uUHJvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuV2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBib2R5U3R5bGUuTW96VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBib2R5U3R5bGUubXNUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudXNlQ1NTID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5mYWRlICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YgXy5vcHRpb25zLnpJbmRleCA9PT0gJ251bWJlcicgKSB7XG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy56SW5kZXggPCAzICkge1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSBfLmRlZmF1bHRzLnpJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuT1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ09UcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1vLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ09UcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdNb3pUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tb3otdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnTW96VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUuTW96UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUud2Via2l0VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnd2Via2l0VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctd2Via2l0LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3dlYmtpdFRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnbXNUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tcy10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdtc1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3RyYW5zaXRpb24nO1xuICAgICAgICB9XG4gICAgICAgIF8udHJhbnNmb3Jtc0VuYWJsZWQgPSBfLm9wdGlvbnMudXNlVHJhbnNmb3JtICYmIChfLmFuaW1UeXBlICE9PSBudWxsICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKTtcbiAgICB9O1xuXG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQsIGFsbFNsaWRlcywgaW5kZXhPZmZzZXQsIHJlbWFpbmRlcjtcblxuICAgICAgICBhbGxTbGlkZXMgPSBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5maW5kKCcuc2xpY2stc2xpZGUnKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY3VycmVudCcpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICB2YXIgZXZlbkNvZWYgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICUgMiA9PT0gMCA/IDEgOiAwO1xuXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGNlbnRlck9mZnNldCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gMSkgLSBjZW50ZXJPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXggLSBjZW50ZXJPZmZzZXQgKyBldmVuQ29lZiwgaW5kZXggKyBjZW50ZXJPZmZzZXQgKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIGNlbnRlck9mZnNldCArIDEgKyBldmVuQ29lZiwgaW5kZXhPZmZzZXQgKyBjZW50ZXJPZmZzZXQgKyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShhbGxTbGlkZXMubGVuZ3RoIC0gMSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXy5zbGlkZUNvdW50IC0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkge1xuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCwgaW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsbFNsaWRlcy5sZW5ndGggPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4IDogaW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgJiYgKF8uc2xpZGVDb3VudCAtIGluZGV4KSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gcmVtYWluZGVyKSwgaW5kZXhPZmZzZXQgKyByZW1haW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQsIGluZGV4T2Zmc2V0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcgfHwgXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICBfLmxhenlMb2FkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldHVwSW5maW5pdGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBzbGlkZUluZGV4LCBpbmZpbml0ZUNvdW50O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLmNlbnRlck1vZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBfLnNsaWRlQ291bnQ7IGkgPiAoXy5zbGlkZUNvdW50IC1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQpOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5maW5pdGVDb3VudCAgKyBfLnNsaWRlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggKyBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKS5maW5kKCdbaWRdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdpZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24oIHRvZ2dsZSApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICF0b2dnbGUgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID1cbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgP1xuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KSA6XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuYXR0cignZGF0YS1zbGljay1pbmRleCcpKTtcblxuICAgICAgICBpZiAoIWluZGV4KSBpbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24oaW5kZXgsIHN5bmMsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIHRhcmdldFNsaWRlLCBhbmltU2xpZGUsIG9sZFNsaWRlLCBzbGlkZUxlZnQsIHRhcmdldExlZnQgPSBudWxsLFxuICAgICAgICAgICAgXyA9IHRoaXMsIG5hdlRhcmdldDtcblxuICAgICAgICBzeW5jID0gc3luYyB8fCBmYWxzZTtcblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUgJiYgXy5vcHRpb25zLndhaXRGb3JBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgJiYgXy5jdXJyZW50U2xpZGUgPT09IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XG4gICAgICAgIHNsaWRlTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBfLmdldERvdENvdW50KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldFNsaWRlIDwgMCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCAtIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgKyB0YXJnZXRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRTbGlkZSA+PSBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZSAtIF8uc2xpZGVDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdiZWZvcmVDaGFuZ2UnLCBbXywgXy5jdXJyZW50U2xpZGUsIGFuaW1TbGlkZV0pO1xuXG4gICAgICAgIG9sZFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgIF8uY3VycmVudFNsaWRlID0gYW5pbVNsaWRlO1xuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hc05hdkZvciApIHtcblxuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gXy5nZXROYXZUYXJnZXQoKTtcbiAgICAgICAgICAgIG5hdlRhcmdldCA9IG5hdlRhcmdldC5zbGljaygnZ2V0U2xpY2snKTtcblxuICAgICAgICAgICAgaWYgKCBuYXZUYXJnZXQuc2xpZGVDb3VudCA8PSBuYXZUYXJnZXQub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICAgICAgbmF2VGFyZ2V0LnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZU91dChvbGRTbGlkZSk7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZShhbmltU2xpZGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmFuaW1hdGVTbGlkZSh0YXJnZXRMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5oaWRlKCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZSwgXyA9IHRoaXM7XG5cbiAgICAgICAgeERpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAtIF8udG91Y2hPYmplY3QuY3VyWDtcbiAgICAgICAgeURpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSAtIF8udG91Y2hPYmplY3QuY3VyWTtcbiAgICAgICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcblxuICAgICAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgc3dpcGVBbmdsZSA9IDM2MCAtIE1hdGguYWJzKHN3aXBlQW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDQ1KSAmJiAoc3dpcGVBbmdsZSA+PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSAzNjApICYmIChzd2lwZUFuZ2xlID49IDMxNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMTM1KSAmJiAoc3dpcGVBbmdsZSA8PSAyMjUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMTM1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZUNvdW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgXy5zd2lwaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uc2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICBfLnNob3VsZENsaWNrID0gKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuY3VyWCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCkgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3duJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gIT0gJ3ZlcnRpY2FsJyApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZUNvdW50ICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb24gXSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clggKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggXy5jdXJyZW50U2xpZGUgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zXG4gICAgICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBlZGdlV2FzSGl0ID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzLCB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgOiBudWxsO1xuXG4gICAgICAgIGlmICghXy5kcmFnZ2luZyB8fCBfLnNjcm9sbGluZyB8fCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJYIC0gXy50b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG5cbiAgICAgICAgdmVydGljYWxTd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJZIC0gXy50b3VjaE9iamVjdC5zdGFydFksIDIpKSk7XG5cbiAgICAgICAgaWYgKCFfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nICYmICFfLnN3aXBpbmcgJiYgdmVydGljYWxTd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gdmVydGljYWxTd2lwZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIF8uc3dpcGluZyA9IHRydWU7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb25PZmZzZXQgPSAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKF8udG91Y2hPYmplY3QuY3VyWCA+IF8udG91Y2hPYmplY3Quc3RhcnRYID8gMSA6IC0xKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gXy50b3VjaE9iamVjdC5jdXJZID4gXy50b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChfLmN1cnJlbnRTbGlkZSA9PT0gMCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgfHwgKF8uY3VycmVudFNsaWRlID49IF8uZ2V0RG90Q291bnQoKSAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ2xlZnQnKSkge1xuICAgICAgICAgICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIF8ub3B0aW9ucy5lZGdlRnJpY3Rpb247XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgKHN3aXBlTGVuZ3RoICogKF8uJGxpc3QuaGVpZ2h0KCkgLyBfLmxpc3RXaWR0aCkpICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnRvdWNoTW92ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRDU1MoXy5zd2lwZUxlZnQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0b3VjaGVzO1xuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ICE9PSAxIHx8IF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFggPSBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFkgPSBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLmRyYWdnaW5nID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tVbmZpbHRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kc2xpZGVzQ2FjaGUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5yZW1vdmUoKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRwcmV2QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kbmV4dEFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgICAgICAgLmNzcygnd2lkdGgnLCAnJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuc2xpY2sgPSBmdW5jdGlvbihmcm9tQnJlYWtwb2ludCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3Vuc2xpY2snLCBbXywgZnJvbUJyZWFrcG9pbnRdKTtcbiAgICAgICAgXy5kZXN0cm95KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZUFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiZcbiAgICAgICAgICAgIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiZcbiAgICAgICAgICAgICFfLm9wdGlvbnMuaW5maW5pdGUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSAxICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKCk7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgaWYgKCBkb2N1bWVudFtfLmhpZGRlbl0gKSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAkLmZuLnNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG9wdCA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbCA9IF8ubGVuZ3RoLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHJldDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdCA9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICBfW2ldLnNsaWNrID0gbmV3IFNsaWNrKF9baV0sIG9wdCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0ID0gX1tpXS5zbGlja1tvcHRdLmFwcGx5KF9baV0uc2xpY2ssIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXQgIT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF87XG4gICAgfTtcblxufSkpO1xuIiwiLypcbiAgICBBIHNpbXBsZSBqUXVlcnkgbW9kYWwgKGh0dHA6Ly9naXRodWIuY29tL2t5bGVmb3gvanF1ZXJ5LW1vZGFsKVxuICAgIFZlcnNpb24gMC45LjFcbiovXG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAvLyBNYWtpbmcgeW91ciBqUXVlcnkgcGx1Z2luIHdvcmsgYmV0dGVyIHdpdGggbnBtIHRvb2xzXG4gIC8vIGh0dHA6Ly9ibG9nLm5wbWpzLm9yZy9wb3N0LzExMjcxMjE2OTgzMC9tYWtpbmcteW91ci1qcXVlcnktcGx1Z2luLXdvcmstYmV0dGVyLXdpdGgtbnBtXG4gIGlmKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpLCB3aW5kb3csIGRvY3VtZW50KTtcbiAgfVxuICBlbHNlIHtcbiAgICBmYWN0b3J5KGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4gIH1cbn0oZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbiAgdmFyIG1vZGFscyA9IFtdLFxuICAgICAgZ2V0Q3VycmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbW9kYWxzLmxlbmd0aCA/IG1vZGFsc1ttb2RhbHMubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdEN1cnJlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGk9bW9kYWxzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgICAgICBpZiAobW9kYWxzW2ldLiRibG9ja2VyKSB7XG4gICAgICAgICAgICBtb2RhbHNbaV0uJGJsb2NrZXIudG9nZ2xlQ2xhc3MoJ2N1cnJlbnQnLCFzZWxlY3RlZCkudG9nZ2xlQ2xhc3MoJ2JlaGluZCcsc2VsZWN0ZWQpO1xuICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAkLm1vZGFsID0gZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgcmVtb3ZlLCB0YXJnZXQ7XG4gICAgdGhpcy4kYm9keSA9ICQoJ2JvZHknKTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5tb2RhbC5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5vcHRpb25zLmRvRmFkZSA9ICFpc05hTihwYXJzZUludCh0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9uLCAxMCkpO1xuICAgIHRoaXMuJGJsb2NrZXIgPSBudWxsO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VFeGlzdGluZylcbiAgICAgIHdoaWxlICgkLm1vZGFsLmlzQWN0aXZlKCkpXG4gICAgICAgICQubW9kYWwuY2xvc2UoKTsgLy8gQ2xvc2UgYW55IG9wZW4gbW9kYWxzLlxuICAgIG1vZGFscy5wdXNoKHRoaXMpO1xuICAgIGlmIChlbC5pcygnYScpKSB7XG4gICAgICB0YXJnZXQgPSBlbC5hdHRyKCdocmVmJyk7XG4gICAgICB0aGlzLmFuY2hvciA9IGVsO1xuICAgICAgLy9TZWxlY3QgZWxlbWVudCBieSBpZCBmcm9tIGhyZWZcbiAgICAgIGlmICgvXiMvLnRlc3QodGFyZ2V0KSkge1xuICAgICAgICB0aGlzLiRlbG0gPSAkKHRhcmdldCk7XG4gICAgICAgIGlmICh0aGlzLiRlbG0ubGVuZ3RoICE9PSAxKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy4kZWxtKTtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAvL0FKQVhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGVsbSA9ICQoJzxkaXY+Jyk7XG4gICAgICAgIHRoaXMuJGJvZHkuYXBwZW5kKHRoaXMuJGVsbSk7XG4gICAgICAgIHJlbW92ZSA9IGZ1bmN0aW9uKGV2ZW50LCBtb2RhbCkgeyBtb2RhbC5lbG0ucmVtb3ZlKCk7IH07XG4gICAgICAgIHRoaXMuc2hvd1NwaW5uZXIoKTtcbiAgICAgICAgZWwudHJpZ2dlcigkLm1vZGFsLkFKQVhfU0VORCk7XG4gICAgICAgICQuZ2V0KHRhcmdldCkuZG9uZShmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgaWYgKCEkLm1vZGFsLmlzQWN0aXZlKCkpIHJldHVybjtcbiAgICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9TVUNDRVNTKTtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcbiAgICAgICAgICBjdXJyZW50LiRlbG0uZW1wdHkoKS5hcHBlbmQoaHRtbCkub24oJC5tb2RhbC5DTE9TRSwgcmVtb3ZlKTtcbiAgICAgICAgICBjdXJyZW50LmhpZGVTcGlubmVyKCk7XG4gICAgICAgICAgY3VycmVudC5vcGVuKCk7XG4gICAgICAgICAgZWwudHJpZ2dlcigkLm1vZGFsLkFKQVhfQ09NUExFVEUpO1xuICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsLnRyaWdnZXIoJC5tb2RhbC5BSkFYX0ZBSUwpO1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudCgpO1xuICAgICAgICAgIGN1cnJlbnQuaGlkZVNwaW5uZXIoKTtcbiAgICAgICAgICBtb2RhbHMucG9wKCk7IC8vIHJlbW92ZSBleHBlY3RlZCBtb2RhbCBmcm9tIHRoZSBsaXN0XG4gICAgICAgICAgZWwudHJpZ2dlcigkLm1vZGFsLkFKQVhfQ09NUExFVEUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxtID0gZWw7XG4gICAgICB0aGlzLmFuY2hvciA9IGVsO1xuICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy4kZWxtKTtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICAkLm1vZGFsLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogJC5tb2RhbCxcblxuICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgdGhpcy5ibG9jaygpO1xuICAgICAgdGhpcy5hbmNob3IuYmx1cigpO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmRvRmFkZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG0uc2hvdygpO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9uICogdGhpcy5vcHRpb25zLmZhZGVEZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICAgICQoZG9jdW1lbnQpLm9mZigna2V5ZG93bi5tb2RhbCcpLm9uKCdrZXlkb3duLm1vZGFsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBnZXRDdXJyZW50KCk7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMjcgJiYgY3VycmVudC5vcHRpb25zLmVzY2FwZUNsb3NlKSBjdXJyZW50LmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tDbG9zZSlcbiAgICAgICAgdGhpcy4kYmxvY2tlci5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzKVxuICAgICAgICAgICAgJC5tb2RhbC5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgbW9kYWxzLnBvcCgpO1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIGlmICghJC5tb2RhbC5pc0FjdGl2ZSgpKVxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24ubW9kYWwnKTtcbiAgICB9LFxuXG4gICAgYmxvY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5CRUZPUkVfQkxPQ0ssIFt0aGlzLl9jdHgoKV0pO1xuICAgICAgdGhpcy4kYm9keS5jc3MoJ292ZXJmbG93JywnaGlkZGVuJyk7XG4gICAgICB0aGlzLiRibG9ja2VyID0gJCgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLm9wdGlvbnMuYmxvY2tlckNsYXNzICsgJyBibG9ja2VyIGN1cnJlbnRcIj48L2Rpdj4nKS5hcHBlbmRUbyh0aGlzLiRib2R5KTtcbiAgICAgIHNlbGVjdEN1cnJlbnQoKTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5kb0ZhZGUpIHtcbiAgICAgICAgdGhpcy4kYmxvY2tlci5jc3MoJ29wYWNpdHknLDApLmFuaW1hdGUoe29wYWNpdHk6IDF9LCB0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQkxPQ0ssIFt0aGlzLl9jdHgoKV0pO1xuICAgIH0sXG5cbiAgICB1bmJsb2NrOiBmdW5jdGlvbihub3cpIHtcbiAgICAgIGlmICghbm93ICYmIHRoaXMub3B0aW9ucy5kb0ZhZGUpXG4gICAgICAgIHRoaXMuJGJsb2NrZXIuZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9uLCB0aGlzLnVuYmxvY2suYmluZCh0aGlzLHRydWUpKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLiRibG9ja2VyLmNoaWxkcmVuKCkuYXBwZW5kVG8odGhpcy4kYm9keSk7XG4gICAgICAgIHRoaXMuJGJsb2NrZXIucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuJGJsb2NrZXIgPSBudWxsO1xuICAgICAgICBzZWxlY3RDdXJyZW50KCk7XG4gICAgICAgIGlmICghJC5tb2RhbC5pc0FjdGl2ZSgpKVxuICAgICAgICAgIHRoaXMuJGJvZHkuY3NzKCdvdmVyZmxvdycsJycpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQkVGT1JFX09QRU4sIFt0aGlzLl9jdHgoKV0pO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Q2xvc2UpIHtcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9ICQoJzxhIGhyZWY9XCIjY2xvc2UtbW9kYWxcIiByZWw9XCJtb2RhbDpjbG9zZVwiIGNsYXNzPVwiY2xvc2UtbW9kYWwgJyArIHRoaXMub3B0aW9ucy5jbG9zZUNsYXNzICsgJ1wiPicgKyB0aGlzLm9wdGlvbnMuY2xvc2VUZXh0ICsgJzwvYT4nKTtcbiAgICAgICAgdGhpcy4kZWxtLmFwcGVuZCh0aGlzLmNsb3NlQnV0dG9uKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsbS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubW9kYWxDbGFzcykuYXBwZW5kVG8odGhpcy4kYmxvY2tlcik7XG4gICAgICBpZih0aGlzLm9wdGlvbnMuZG9GYWRlKSB7XG4gICAgICAgIHRoaXMuJGVsbS5jc3Moe29wYWNpdHk6IDAsIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snfSkuYW5pbWF0ZSh7b3BhY2l0eTogMX0sIHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxtLmNzcygnZGlzcGxheScsICdpbmxpbmUtYmxvY2snKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuT1BFTiwgW3RoaXMuX2N0eCgpXSk7XG4gICAgfSxcblxuICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5CRUZPUkVfQ0xPU0UsIFt0aGlzLl9jdHgoKV0pO1xuICAgICAgaWYgKHRoaXMuY2xvc2VCdXR0b24pIHRoaXMuY2xvc2VCdXR0b24ucmVtb3ZlKCk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmRvRmFkZSkge1xuICAgICAgICB0aGlzLiRlbG0uZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQUZURVJfQ0xPU0UsIFtfdGhpcy5fY3R4KCldKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbG0uaGlkZSgwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQUZURVJfQ0xPU0UsIFtfdGhpcy5fY3R4KCldKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbG0udHJpZ2dlcigkLm1vZGFsLkNMT1NFLCBbdGhpcy5fY3R4KCldKTtcbiAgICB9LFxuXG4gICAgc2hvd1NwaW5uZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd1NwaW5uZXIpIHJldHVybjtcbiAgICAgIHRoaXMuc3Bpbm5lciA9IHRoaXMuc3Bpbm5lciB8fCAkKCc8ZGl2IGNsYXNzPVwiJyArIHRoaXMub3B0aW9ucy5tb2RhbENsYXNzICsgJy1zcGlubmVyXCI+PC9kaXY+JylcbiAgICAgICAgLmFwcGVuZCh0aGlzLm9wdGlvbnMuc3Bpbm5lckh0bWwpO1xuICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy5zcGlubmVyKTtcbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG4gICAgfSxcblxuICAgIGhpZGVTcGlubmVyOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNwaW5uZXIpIHRoaXMuc3Bpbm5lci5yZW1vdmUoKTtcbiAgICB9LFxuXG4gICAgLy9SZXR1cm4gY29udGV4dCBmb3IgY3VzdG9tIGV2ZW50c1xuICAgIF9jdHg6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHsgZWxtOiB0aGlzLiRlbG0sICRlbG06IHRoaXMuJGVsbSwgJGJsb2NrZXI6IHRoaXMuJGJsb2NrZXIsIG9wdGlvbnM6IHRoaXMub3B0aW9ucyB9O1xuICAgIH1cbiAgfTtcblxuICAkLm1vZGFsLmNsb3NlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoISQubW9kYWwuaXNBY3RpdmUoKSkgcmV0dXJuO1xuICAgIGlmIChldmVudCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcbiAgICBjdXJyZW50LmNsb3NlKCk7XG4gICAgcmV0dXJuIGN1cnJlbnQuJGVsbTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGlmIHRoZXJlIGN1cnJlbnRseSBpcyBhbiBhY3RpdmUgbW9kYWxcbiAgJC5tb2RhbC5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9kYWxzLmxlbmd0aCA+IDA7XG4gIH07XG5cbiAgJC5tb2RhbC5nZXRDdXJyZW50ID0gZ2V0Q3VycmVudDtcblxuICAkLm1vZGFsLmRlZmF1bHRzID0ge1xuICAgIGNsb3NlRXhpc3Rpbmc6IHRydWUsXG4gICAgZXNjYXBlQ2xvc2U6IHRydWUsXG4gICAgY2xpY2tDbG9zZTogdHJ1ZSxcbiAgICBjbG9zZVRleHQ6ICdDbG9zZScsXG4gICAgY2xvc2VDbGFzczogJycsXG4gICAgbW9kYWxDbGFzczogXCJtb2RhbFwiLFxuICAgIGJsb2NrZXJDbGFzczogXCJqcXVlcnktbW9kYWxcIixcbiAgICBzcGlubmVySHRtbDogJzxkaXYgY2xhc3M9XCJyZWN0MVwiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0MlwiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0M1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJyZWN0NFwiPjwvZGl2PicsXG4gICAgc2hvd1NwaW5uZXI6IHRydWUsXG4gICAgc2hvd0Nsb3NlOiB0cnVlLFxuICAgIGZhZGVEdXJhdGlvbjogbnVsbCwgICAvLyBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoZSBmYWRlIGFuaW1hdGlvbiB0YWtlcy5cbiAgICBmYWRlRGVsYXk6IDEuMCAgICAgICAgLy8gUG9pbnQgZHVyaW5nIHRoZSBvdmVybGF5J3MgZmFkZS1pbiB0aGF0IHRoZSBtb2RhbCBiZWdpbnMgdG8gZmFkZSBpbiAoLjUgPSA1MCUsIDEuNSA9IDE1MCUsIGV0Yy4pXG4gIH07XG5cbiAgLy8gRXZlbnQgY29uc3RhbnRzXG4gICQubW9kYWwuQkVGT1JFX0JMT0NLID0gJ21vZGFsOmJlZm9yZS1ibG9jayc7XG4gICQubW9kYWwuQkxPQ0sgPSAnbW9kYWw6YmxvY2snO1xuICAkLm1vZGFsLkJFRk9SRV9PUEVOID0gJ21vZGFsOmJlZm9yZS1vcGVuJztcbiAgJC5tb2RhbC5PUEVOID0gJ21vZGFsOm9wZW4nO1xuICAkLm1vZGFsLkJFRk9SRV9DTE9TRSA9ICdtb2RhbDpiZWZvcmUtY2xvc2UnO1xuICAkLm1vZGFsLkNMT1NFID0gJ21vZGFsOmNsb3NlJztcbiAgJC5tb2RhbC5BRlRFUl9DTE9TRSA9ICdtb2RhbDphZnRlci1jbG9zZSc7XG4gICQubW9kYWwuQUpBWF9TRU5EID0gJ21vZGFsOmFqYXg6c2VuZCc7XG4gICQubW9kYWwuQUpBWF9TVUNDRVNTID0gJ21vZGFsOmFqYXg6c3VjY2Vzcyc7XG4gICQubW9kYWwuQUpBWF9GQUlMID0gJ21vZGFsOmFqYXg6ZmFpbCc7XG4gICQubW9kYWwuQUpBWF9DT01QTEVURSA9ICdtb2RhbDphamF4OmNvbXBsZXRlJztcblxuICAkLmZuLm1vZGFsID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBuZXcgJC5tb2RhbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQXV0b21hdGljYWxseSBiaW5kIGxpbmtzIHdpdGggcmVsPVwibW9kYWw6Y2xvc2VcIiB0bywgd2VsbCwgY2xvc2UgdGhlIG1vZGFsLlxuICAkKGRvY3VtZW50KS5vbignY2xpY2subW9kYWwnLCAnYVtyZWx+PVwibW9kYWw6Y2xvc2VcIl0nLCAkLm1vZGFsLmNsb3NlKTtcbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLm1vZGFsJywgJ2FbcmVsfj1cIm1vZGFsOm9wZW5cIl0nLCBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgJCh0aGlzKS5tb2RhbCgpO1xuICB9KTtcbn0pKTtcbiIsIi8qIVxyXG4gKiBqUXVlcnkgVmFsaWRhdGlvbiBQbHVnaW4gdjEuMTcuMFxyXG4gKlxyXG4gKiBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgSsO2cm4gWmFlZmZlcmVyXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKi9cclxuKGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xyXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0XHRkZWZpbmUoIFtcImpxdWVyeVwiXSwgZmFjdG9yeSApO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCByZXF1aXJlKCBcImpxdWVyeVwiICkgKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XHJcblx0fVxyXG59KGZ1bmN0aW9uKCAkICkge1xyXG5cclxuJC5leHRlbmQoICQuZm4sIHtcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3ZhbGlkYXRlL1xuXHR2YWxpZGF0ZTogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiBub3RoaW5nIGlzIHNlbGVjdGVkLCByZXR1cm4gbm90aGluZzsgY2FuJ3QgY2hhaW4gYW55d2F5XG5cdFx0aWYgKCAhdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIk5vdGhpbmcgc2VsZWN0ZWQsIGNhbid0IHZhbGlkYXRlLCByZXR1cm5pbmcgbm90aGluZy5cIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIGEgdmFsaWRhdG9yIGZvciB0aGlzIGZvcm0gd2FzIGFscmVhZHkgY3JlYXRlZFxuXHRcdHZhciB2YWxpZGF0b3IgPSAkLmRhdGEoIHRoaXNbIDAgXSwgXCJ2YWxpZGF0b3JcIiApO1xuXHRcdGlmICggdmFsaWRhdG9yICkge1xuXHRcdFx0cmV0dXJuIHZhbGlkYXRvcjtcblx0XHR9XG5cblx0XHQvLyBBZGQgbm92YWxpZGF0ZSB0YWcgaWYgSFRNTDUuXG5cdFx0dGhpcy5hdHRyKCBcIm5vdmFsaWRhdGVcIiwgXCJub3ZhbGlkYXRlXCIgKTtcblxuXHRcdHZhbGlkYXRvciA9IG5ldyAkLnZhbGlkYXRvciggb3B0aW9ucywgdGhpc1sgMCBdICk7XG5cdFx0JC5kYXRhKCB0aGlzWyAwIF0sIFwidmFsaWRhdG9yXCIsIHZhbGlkYXRvciApO1xuXG5cdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3Mub25zdWJtaXQgKSB7XG5cblx0XHRcdHRoaXMub24oIFwiY2xpY2sudmFsaWRhdGVcIiwgXCI6c3VibWl0XCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBUcmFjayB0aGUgdXNlZCBzdWJtaXQgYnV0dG9uIHRvIHByb3Blcmx5IGhhbmRsZSBzY3JpcHRlZFxuXHRcdFx0XHQvLyBzdWJtaXRzIGxhdGVyLlxuXHRcdFx0XHR2YWxpZGF0b3Iuc3VibWl0QnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldDtcblxuXHRcdFx0XHQvLyBBbGxvdyBzdXBwcmVzc2luZyB2YWxpZGF0aW9uIGJ5IGFkZGluZyBhIGNhbmNlbCBjbGFzcyB0byB0aGUgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRpZiAoICQoIHRoaXMgKS5oYXNDbGFzcyggXCJjYW5jZWxcIiApICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWxsb3cgc3VwcHJlc3NpbmcgdmFsaWRhdGlvbiBieSBhZGRpbmcgdGhlIGh0bWw1IGZvcm1ub3ZhbGlkYXRlIGF0dHJpYnV0ZSB0byB0aGUgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRpZiAoICQoIHRoaXMgKS5hdHRyKCBcImZvcm1ub3ZhbGlkYXRlXCIgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIFZhbGlkYXRlIHRoZSBmb3JtIG9uIHN1Ym1pdFxuXHRcdFx0dGhpcy5vbiggXCJzdWJtaXQudmFsaWRhdGVcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyApIHtcblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgZm9ybSBzdWJtaXQgdG8gYmUgYWJsZSB0byBzZWUgY29uc29sZSBvdXRwdXRcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZ1bmN0aW9uIGhhbmRsZSgpIHtcblx0XHRcdFx0XHR2YXIgaGlkZGVuLCByZXN1bHQ7XG5cblx0XHRcdFx0XHQvLyBJbnNlcnQgYSBoaWRkZW4gaW5wdXQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlIG1pc3Npbmcgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRcdC8vIFRoZSBoaWRkZW4gaW5wdXQgaXMgaW5zZXJ0ZWQgaW4gdHdvIGNhc2VzOlxuXHRcdFx0XHRcdC8vICAgLSBBIHVzZXIgZGVmaW5lZCBhIGBzdWJtaXRIYW5kbGVyYFxuXHRcdFx0XHRcdC8vICAgLSBUaGVyZSB3YXMgYSBwZW5kaW5nIHJlcXVlc3QgZHVlIHRvIGByZW1vdGVgIG1ldGhvZCBhbmQgYHN0b3BSZXF1ZXN0KClgXG5cdFx0XHRcdFx0Ly8gICAgIHdhcyBjYWxsZWQgdG8gc3VibWl0IHRoZSBmb3JtIGluIGNhc2UgaXQncyB2YWxpZFxuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiAmJiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyIHx8IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkICkgKSB7XG5cdFx0XHRcdFx0XHRoaWRkZW4gPSAkKCBcIjxpbnB1dCB0eXBlPSdoaWRkZW4nLz5cIiApXG5cdFx0XHRcdFx0XHRcdC5hdHRyKCBcIm5hbWVcIiwgdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbi5uYW1lIClcblx0XHRcdFx0XHRcdFx0LnZhbCggJCggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiApLnZhbCgpIClcblx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKCB2YWxpZGF0b3IuY3VycmVudEZvcm0gKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIuY2FsbCggdmFsaWRhdG9yLCB2YWxpZGF0b3IuY3VycmVudEZvcm0sIGV2ZW50ICk7XG5cdFx0XHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbmQgY2xlYW4gdXAgYWZ0ZXJ3YXJkczsgdGhhbmtzIHRvIG5vLWJsb2NrLXNjb3BlLCBoaWRkZW4gY2FuIGJlIHJlZmVyZW5jZWRcblx0XHRcdFx0XHRcdFx0aGlkZGVuLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCByZXN1bHQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcmV2ZW50IHN1Ym1pdCBmb3IgaW52YWxpZCBmb3JtcyBvciBjdXN0b20gc3VibWl0IGhhbmRsZXJzXG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gZmFsc2U7XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLmZvcm0oKSApIHtcblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5wZW5kaW5nUmVxdWVzdCApIHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5mb2N1c0ludmFsaWQoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWRhdG9yO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdmFsaWQvXG5cdHZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdmFsaWQsIHZhbGlkYXRvciwgZXJyb3JMaXN0O1xuXG5cdFx0aWYgKCAkKCB0aGlzWyAwIF0gKS5pcyggXCJmb3JtXCIgKSApIHtcblx0XHRcdHZhbGlkID0gdGhpcy52YWxpZGF0ZSgpLmZvcm0oKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXJyb3JMaXN0ID0gW107XG5cdFx0XHR2YWxpZCA9IHRydWU7XG5cdFx0XHR2YWxpZGF0b3IgPSAkKCB0aGlzWyAwIF0uZm9ybSApLnZhbGlkYXRlKCk7XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YWxpZCA9IHZhbGlkYXRvci5lbGVtZW50KCB0aGlzICkgJiYgdmFsaWQ7XG5cdFx0XHRcdGlmICggIXZhbGlkICkge1xuXHRcdFx0XHRcdGVycm9yTGlzdCA9IGVycm9yTGlzdC5jb25jYXQoIHZhbGlkYXRvci5lcnJvckxpc3QgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0dmFsaWRhdG9yLmVycm9yTGlzdCA9IGVycm9yTGlzdDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbGlkO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcnVsZXMvXG5cdHJ1bGVzOiBmdW5jdGlvbiggY29tbWFuZCwgYXJndW1lbnQgKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzWyAwIF0sXG5cdFx0XHRzZXR0aW5ncywgc3RhdGljUnVsZXMsIGV4aXN0aW5nUnVsZXMsIGRhdGEsIHBhcmFtLCBmaWx0ZXJlZDtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBlbXB0eSBvYmplY3Q7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggZWxlbWVudCA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggIWVsZW1lbnQuZm9ybSAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSggXCJjb250ZW50ZWRpdGFibGVcIiApICkge1xuXHRcdFx0ZWxlbWVudC5mb3JtID0gdGhpcy5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRlbGVtZW50Lm5hbWUgPSB0aGlzLmF0dHIoIFwibmFtZVwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBlbGVtZW50LmZvcm0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGNvbW1hbmQgKSB7XG5cdFx0XHRzZXR0aW5ncyA9ICQuZGF0YSggZWxlbWVudC5mb3JtLCBcInZhbGlkYXRvclwiICkuc2V0dGluZ3M7XG5cdFx0XHRzdGF0aWNSdWxlcyA9IHNldHRpbmdzLnJ1bGVzO1xuXHRcdFx0ZXhpc3RpbmdSdWxlcyA9ICQudmFsaWRhdG9yLnN0YXRpY1J1bGVzKCBlbGVtZW50ICk7XG5cdFx0XHRzd2l0Y2ggKCBjb21tYW5kICkge1xuXHRcdFx0Y2FzZSBcImFkZFwiOlxuXHRcdFx0XHQkLmV4dGVuZCggZXhpc3RpbmdSdWxlcywgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggYXJndW1lbnQgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBtZXNzYWdlcyBmcm9tIHJ1bGVzLCBidXQgYWxsb3cgdGhlbSB0byBiZSBzZXQgc2VwYXJhdGVseVxuXHRcdFx0XHRkZWxldGUgZXhpc3RpbmdSdWxlcy5tZXNzYWdlcztcblx0XHRcdFx0c3RhdGljUnVsZXNbIGVsZW1lbnQubmFtZSBdID0gZXhpc3RpbmdSdWxlcztcblx0XHRcdFx0aWYgKCBhcmd1bWVudC5tZXNzYWdlcyApIHtcblx0XHRcdFx0XHRzZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gPSAkLmV4dGVuZCggc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdLCBhcmd1bWVudC5tZXNzYWdlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInJlbW92ZVwiOlxuXHRcdFx0XHRpZiAoICFhcmd1bWVudCApIHtcblx0XHRcdFx0XHRkZWxldGUgc3RhdGljUnVsZXNbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRcdHJldHVybiBleGlzdGluZ1J1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZpbHRlcmVkID0ge307XG5cdFx0XHRcdCQuZWFjaCggYXJndW1lbnQuc3BsaXQoIC9cXHMvICksIGZ1bmN0aW9uKCBpbmRleCwgbWV0aG9kICkge1xuXHRcdFx0XHRcdGZpbHRlcmVkWyBtZXRob2QgXSA9IGV4aXN0aW5nUnVsZXNbIG1ldGhvZCBdO1xuXHRcdFx0XHRcdGRlbGV0ZSBleGlzdGluZ1J1bGVzWyBtZXRob2QgXTtcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gZmlsdGVyZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZGF0YSA9ICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGVzKFxuXHRcdCQuZXh0ZW5kKFxuXHRcdFx0e30sXG5cdFx0XHQkLnZhbGlkYXRvci5jbGFzc1J1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5hdHRyaWJ1dGVSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3IuZGF0YVJ1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5zdGF0aWNSdWxlcyggZWxlbWVudCApXG5cdFx0KSwgZWxlbWVudCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHJlcXVpcmVkIGlzIGF0IGZyb250XG5cdFx0aWYgKCBkYXRhLnJlcXVpcmVkICkge1xuXHRcdFx0cGFyYW0gPSBkYXRhLnJlcXVpcmVkO1xuXHRcdFx0ZGVsZXRlIGRhdGEucmVxdWlyZWQ7XG5cdFx0XHRkYXRhID0gJC5leHRlbmQoIHsgcmVxdWlyZWQ6IHBhcmFtIH0sIGRhdGEgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgcmVtb3RlIGlzIGF0IGJhY2tcblx0XHRpZiAoIGRhdGEucmVtb3RlICkge1xuXHRcdFx0cGFyYW0gPSBkYXRhLnJlbW90ZTtcblx0XHRcdGRlbGV0ZSBkYXRhLnJlbW90ZTtcblx0XHRcdGRhdGEgPSAkLmV4dGVuZCggZGF0YSwgeyByZW1vdGU6IHBhcmFtIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufSApO1xuXG4vLyBDdXN0b20gc2VsZWN0b3JzXG4kLmV4dGVuZCggJC5leHByLnBzZXVkb3MgfHwgJC5leHByWyBcIjpcIiBdLCB7XHRcdC8vICd8fCAkLmV4cHJbIFwiOlwiIF0nIGhlcmUgZW5hYmxlcyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB0byBqUXVlcnkgMS43LiBDYW4gYmUgcmVtb3ZlZCB3aGVuIGRyb3BwaW5nIGpRIDEuNy54IHN1cHBvcnRcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2JsYW5rLXNlbGVjdG9yL1xuXHRibGFuazogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkLnRyaW0oIFwiXCIgKyAkKCBhICkudmFsKCkgKTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2ZpbGxlZC1zZWxlY3Rvci9cblx0ZmlsbGVkOiBmdW5jdGlvbiggYSApIHtcblx0XHR2YXIgdmFsID0gJCggYSApLnZhbCgpO1xuXHRcdHJldHVybiB2YWwgIT09IG51bGwgJiYgISEkLnRyaW0oIFwiXCIgKyB2YWwgKTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3VuY2hlY2tlZC1zZWxlY3Rvci9cblx0dW5jaGVja2VkOiBmdW5jdGlvbiggYSApIHtcblx0XHRyZXR1cm4gISQoIGEgKS5wcm9wKCBcImNoZWNrZWRcIiApO1xuXHR9XG59ICk7XG5cbi8vIENvbnN0cnVjdG9yIGZvciB2YWxpZGF0b3JcbiQudmFsaWRhdG9yID0gZnVuY3Rpb24oIG9wdGlvbnMsIGZvcm0gKSB7XG5cdHRoaXMuc2V0dGluZ3MgPSAkLmV4dGVuZCggdHJ1ZSwge30sICQudmFsaWRhdG9yLmRlZmF1bHRzLCBvcHRpb25zICk7XG5cdHRoaXMuY3VycmVudEZvcm0gPSBmb3JtO1xuXHR0aGlzLmluaXQoKTtcbn07XG5cbi8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5mb3JtYXQvXG4kLnZhbGlkYXRvci5mb3JtYXQgPSBmdW5jdGlvbiggc291cmNlLCBwYXJhbXMgKSB7XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYXJncyA9ICQubWFrZUFycmF5KCBhcmd1bWVudHMgKTtcblx0XHRcdGFyZ3MudW5zaGlmdCggc291cmNlICk7XG5cdFx0XHRyZXR1cm4gJC52YWxpZGF0b3IuZm9ybWF0LmFwcGx5KCB0aGlzLCBhcmdzICk7XG5cdFx0fTtcblx0fVxuXHRpZiAoIHBhcmFtcyA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHJldHVybiBzb3VyY2U7XG5cdH1cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBwYXJhbXMuY29uc3RydWN0b3IgIT09IEFycmF5ICApIHtcblx0XHRwYXJhbXMgPSAkLm1ha2VBcnJheSggYXJndW1lbnRzICkuc2xpY2UoIDEgKTtcblx0fVxuXHRpZiAoIHBhcmFtcy5jb25zdHJ1Y3RvciAhPT0gQXJyYXkgKSB7XG5cdFx0cGFyYW1zID0gWyBwYXJhbXMgXTtcblx0fVxuXHQkLmVhY2goIHBhcmFtcywgZnVuY3Rpb24oIGksIG4gKSB7XG5cdFx0c291cmNlID0gc291cmNlLnJlcGxhY2UoIG5ldyBSZWdFeHAoIFwiXFxcXHtcIiArIGkgKyBcIlxcXFx9XCIsIFwiZ1wiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG47XG5cdFx0fSApO1xuXHR9ICk7XG5cdHJldHVybiBzb3VyY2U7XG59O1xuXG4kLmV4dGVuZCggJC52YWxpZGF0b3IsIHtcblxuXHRkZWZhdWx0czoge1xuXHRcdG1lc3NhZ2VzOiB7fSxcblx0XHRncm91cHM6IHt9LFxuXHRcdHJ1bGVzOiB7fSxcblx0XHRlcnJvckNsYXNzOiBcImVycm9yXCIsXG5cdFx0cGVuZGluZ0NsYXNzOiBcInBlbmRpbmdcIixcblx0XHR2YWxpZENsYXNzOiBcInZhbGlkXCIsXG5cdFx0ZXJyb3JFbGVtZW50OiBcImxhYmVsXCIsXG5cdFx0Zm9jdXNDbGVhbnVwOiBmYWxzZSxcblx0XHRmb2N1c0ludmFsaWQ6IHRydWUsXG5cdFx0ZXJyb3JDb250YWluZXI6ICQoIFtdICksXG5cdFx0ZXJyb3JMYWJlbENvbnRhaW5lcjogJCggW10gKSxcblx0XHRvbnN1Ym1pdDogdHJ1ZSxcblx0XHRpZ25vcmU6IFwiOmhpZGRlblwiLFxuXHRcdGlnbm9yZVRpdGxlOiBmYWxzZSxcblx0XHRvbmZvY3VzaW46IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dGhpcy5sYXN0QWN0aXZlID0gZWxlbWVudDtcblxuXHRcdFx0Ly8gSGlkZSBlcnJvciBsYWJlbCBhbmQgcmVtb3ZlIGVycm9yIGNsYXNzIG9uIGZvY3VzIGlmIGVuYWJsZWRcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5mb2N1c0NsZWFudXAgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5oaWRlVGhlc2UoIHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uZm9jdXNvdXQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCAhdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSAmJiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCAhdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25rZXl1cDogZnVuY3Rpb24oIGVsZW1lbnQsIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBBdm9pZCByZXZhbGlkYXRlIHRoZSBmaWVsZCB3aGVuIHByZXNzaW5nIG9uZSBvZiB0aGUgZm9sbG93aW5nIGtleXNcblx0XHRcdC8vIFNoaWZ0ICAgICAgID0+IDE2XG5cdFx0XHQvLyBDdHJsICAgICAgICA9PiAxN1xuXHRcdFx0Ly8gQWx0ICAgICAgICAgPT4gMThcblx0XHRcdC8vIENhcHMgbG9jayAgID0+IDIwXG5cdFx0XHQvLyBFbmQgICAgICAgICA9PiAzNVxuXHRcdFx0Ly8gSG9tZSAgICAgICAgPT4gMzZcblx0XHRcdC8vIExlZnQgYXJyb3cgID0+IDM3XG5cdFx0XHQvLyBVcCBhcnJvdyAgICA9PiAzOFxuXHRcdFx0Ly8gUmlnaHQgYXJyb3cgPT4gMzlcblx0XHRcdC8vIERvd24gYXJyb3cgID0+IDQwXG5cdFx0XHQvLyBJbnNlcnQgICAgICA9PiA0NVxuXHRcdFx0Ly8gTnVtIGxvY2sgICAgPT4gMTQ0XG5cdFx0XHQvLyBBbHRHciBrZXkgICA9PiAyMjVcblx0XHRcdHZhciBleGNsdWRlZEtleXMgPSBbXG5cdFx0XHRcdDE2LCAxNywgMTgsIDIwLCAzNSwgMzYsIDM3LFxuXHRcdFx0XHQzOCwgMzksIDQwLCA0NSwgMTQ0LCAyMjVcblx0XHRcdF07XG5cblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT09IDkgJiYgdGhpcy5lbGVtZW50VmFsdWUoIGVsZW1lbnQgKSA9PT0gXCJcIiB8fCAkLmluQXJyYXkoIGV2ZW50LmtleUNvZGUsIGV4Y2x1ZGVkS2V5cyApICE9PSAtMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkIHx8IGVsZW1lbnQubmFtZSBpbiB0aGlzLmludmFsaWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25jbGljazogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIENsaWNrIG9uIHNlbGVjdHMsIHJhZGlvYnV0dG9ucyBhbmQgY2hlY2tib3hlc1xuXHRcdFx0aWYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudCApO1xuXG5cdFx0XHQvLyBPciBvcHRpb24gZWxlbWVudHMsIGNoZWNrIHBhcmVudCBzZWxlY3QgaW4gdGhhdCBjYXNlXG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtZW50LnBhcmVudE5vZGUubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50LnBhcmVudE5vZGUgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGhpZ2hsaWdodDogZnVuY3Rpb24oIGVsZW1lbnQsIGVycm9yQ2xhc3MsIHZhbGlkQ2xhc3MgKSB7XG5cdFx0XHRpZiAoIGVsZW1lbnQudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0XHR0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLmFkZENsYXNzKCBlcnJvckNsYXNzICkucmVtb3ZlQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggZXJyb3JDbGFzcyApLnJlbW92ZUNsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR1bmhpZ2hsaWdodDogZnVuY3Rpb24oIGVsZW1lbnQsIGVycm9yQ2xhc3MsIHZhbGlkQ2xhc3MgKSB7XG5cdFx0XHRpZiAoIGVsZW1lbnQudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0XHR0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLnJlbW92ZUNsYXNzKCBlcnJvckNsYXNzICkuYWRkQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5yZW1vdmVDbGFzcyggZXJyb3JDbGFzcyApLmFkZENsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5zZXREZWZhdWx0cy9cblx0c2V0RGVmYXVsdHM6IGZ1bmN0aW9uKCBzZXR0aW5ncyApIHtcblx0XHQkLmV4dGVuZCggJC52YWxpZGF0b3IuZGVmYXVsdHMsIHNldHRpbmdzICk7XG5cdH0sXG5cblx0bWVzc2FnZXM6IHtcblx0XHRyZXF1aXJlZDogXCJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkLlwiLFxuXHRcdHJlbW90ZTogXCJQbGVhc2UgZml4IHRoaXMgZmllbGQuXCIsXG5cdFx0ZW1haWw6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcy5cIixcblx0XHR1cmw6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgVVJMLlwiLFxuXHRcdGRhdGU6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZS5cIixcblx0XHRkYXRlSVNPOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUgKElTTykuXCIsXG5cdFx0bnVtYmVyOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIG51bWJlci5cIixcblx0XHRkaWdpdHM6IFwiUGxlYXNlIGVudGVyIG9ubHkgZGlnaXRzLlwiLFxuXHRcdGVxdWFsVG86IFwiUGxlYXNlIGVudGVyIHRoZSBzYW1lIHZhbHVlIGFnYWluLlwiLFxuXHRcdG1heGxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBubyBtb3JlIHRoYW4gezB9IGNoYXJhY3RlcnMuXCIgKSxcblx0XHRtaW5sZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYXQgbGVhc3QgezB9IGNoYXJhY3RlcnMuXCIgKSxcblx0XHRyYW5nZWxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4gezB9IGFuZCB7MX0gY2hhcmFjdGVycyBsb25nLlwiICksXG5cdFx0cmFuZ2U6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuIHswfSBhbmQgezF9LlwiICksXG5cdFx0bWF4OiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHswfS5cIiApLFxuXHRcdG1pbjogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB7MH0uXCIgKSxcblx0XHRzdGVwOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgbXVsdGlwbGUgb2YgezB9LlwiIClcblx0fSxcblxuXHRhdXRvQ3JlYXRlUmFuZ2VzOiBmYWxzZSxcblxuXHRwcm90b3R5cGU6IHtcblxuXHRcdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5sYWJlbENvbnRhaW5lciA9ICQoIHRoaXMuc2V0dGluZ3MuZXJyb3JMYWJlbENvbnRhaW5lciApO1xuXHRcdFx0dGhpcy5lcnJvckNvbnRleHQgPSB0aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCAmJiB0aGlzLmxhYmVsQ29udGFpbmVyIHx8ICQoIHRoaXMuY3VycmVudEZvcm0gKTtcblx0XHRcdHRoaXMuY29udGFpbmVycyA9ICQoIHRoaXMuc2V0dGluZ3MuZXJyb3JDb250YWluZXIgKS5hZGQoIHRoaXMuc2V0dGluZ3MuZXJyb3JMYWJlbENvbnRhaW5lciApO1xuXHRcdFx0dGhpcy5zdWJtaXR0ZWQgPSB7fTtcblx0XHRcdHRoaXMudmFsdWVDYWNoZSA9IHt9O1xuXHRcdFx0dGhpcy5wZW5kaW5nUmVxdWVzdCA9IDA7XG5cdFx0XHR0aGlzLnBlbmRpbmcgPSB7fTtcblx0XHRcdHRoaXMuaW52YWxpZCA9IHt9O1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXG5cdFx0XHR2YXIgZ3JvdXBzID0gKCB0aGlzLmdyb3VwcyA9IHt9ICksXG5cdFx0XHRcdHJ1bGVzO1xuXHRcdFx0JC5lYWNoKCB0aGlzLnNldHRpbmdzLmdyb3VwcywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc3BsaXQoIC9cXHMvICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5lYWNoKCB2YWx1ZSwgZnVuY3Rpb24oIGluZGV4LCBuYW1lICkge1xuXHRcdFx0XHRcdGdyb3Vwc1sgbmFtZSBdID0ga2V5O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0XHRydWxlcyA9IHRoaXMuc2V0dGluZ3MucnVsZXM7XG5cdFx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0cnVsZXNbIGtleSBdID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsdWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0ZnVuY3Rpb24gZGVsZWdhdGUoIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggIXRoaXMuZm9ybSAmJiB0aGlzLmhhc0F0dHJpYnV0ZSggXCJjb250ZW50ZWRpdGFibGVcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuZm9ybSA9ICQoIHRoaXMgKS5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gJCggdGhpcyApLmF0dHIoIFwibmFtZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdmFsaWRhdG9yID0gJC5kYXRhKCB0aGlzLmZvcm0sIFwidmFsaWRhdG9yXCIgKSxcblx0XHRcdFx0XHRldmVudFR5cGUgPSBcIm9uXCIgKyBldmVudC50eXBlLnJlcGxhY2UoIC9edmFsaWRhdGUvLCBcIlwiICksXG5cdFx0XHRcdFx0c2V0dGluZ3MgPSB2YWxpZGF0b3Iuc2V0dGluZ3M7XG5cdFx0XHRcdGlmICggc2V0dGluZ3NbIGV2ZW50VHlwZSBdICYmICEkKCB0aGlzICkuaXMoIHNldHRpbmdzLmlnbm9yZSApICkge1xuXHRcdFx0XHRcdHNldHRpbmdzWyBldmVudFR5cGUgXS5jYWxsKCB2YWxpZGF0b3IsIHRoaXMsIGV2ZW50ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHRcdC5vbiggXCJmb2N1c2luLnZhbGlkYXRlIGZvY3Vzb3V0LnZhbGlkYXRlIGtleXVwLnZhbGlkYXRlXCIsXG5cdFx0XHRcdFx0XCI6dGV4dCwgW3R5cGU9J3Bhc3N3b3JkJ10sIFt0eXBlPSdmaWxlJ10sIHNlbGVjdCwgdGV4dGFyZWEsIFt0eXBlPSdudW1iZXInXSwgW3R5cGU9J3NlYXJjaCddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0ndGVsJ10sIFt0eXBlPSd1cmwnXSwgW3R5cGU9J2VtYWlsJ10sIFt0eXBlPSdkYXRldGltZSddLCBbdHlwZT0nZGF0ZSddLCBbdHlwZT0nbW9udGgnXSwgXCIgK1xuXHRcdFx0XHRcdFwiW3R5cGU9J3dlZWsnXSwgW3R5cGU9J3RpbWUnXSwgW3R5cGU9J2RhdGV0aW1lLWxvY2FsJ10sIFt0eXBlPSdyYW5nZSddLCBbdHlwZT0nY29sb3InXSwgXCIgK1xuXHRcdFx0XHRcdFwiW3R5cGU9J3JhZGlvJ10sIFt0eXBlPSdjaGVja2JveCddLCBbY29udGVudGVkaXRhYmxlXSwgW3R5cGU9J2J1dHRvbiddXCIsIGRlbGVnYXRlIClcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUsIG9sZElFXG5cdFx0XHRcdC8vIFwic2VsZWN0XCIgaXMgcHJvdmlkZWQgYXMgZXZlbnQudGFyZ2V0IHdoZW4gY2xpY2tpbmcgYSBvcHRpb25cblx0XHRcdFx0Lm9uKCBcImNsaWNrLnZhbGlkYXRlXCIsIFwic2VsZWN0LCBvcHRpb24sIFt0eXBlPSdyYWRpbyddLCBbdHlwZT0nY2hlY2tib3gnXVwiLCBkZWxlZ2F0ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaW52YWxpZEhhbmRsZXIgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS5vbiggXCJpbnZhbGlkLWZvcm0udmFsaWRhdGVcIiwgdGhpcy5zZXR0aW5ncy5pbnZhbGlkSGFuZGxlciApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5mb3JtL1xuXHRcdGZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5jaGVja0Zvcm0oKTtcblx0XHRcdCQuZXh0ZW5kKCB0aGlzLnN1Ym1pdHRlZCwgdGhpcy5lcnJvck1hcCApO1xuXHRcdFx0dGhpcy5pbnZhbGlkID0gJC5leHRlbmQoIHt9LCB0aGlzLmVycm9yTWFwICk7XG5cdFx0XHRpZiAoICF0aGlzLnZhbGlkKCkgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS50cmlnZ2VySGFuZGxlciggXCJpbnZhbGlkLWZvcm1cIiwgWyB0aGlzIF0gKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuc2hvd0Vycm9ycygpO1xuXHRcdFx0cmV0dXJuIHRoaXMudmFsaWQoKTtcblx0XHR9LFxuXG5cdFx0Y2hlY2tGb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucHJlcGFyZUZvcm0oKTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgZWxlbWVudHMgPSAoIHRoaXMuY3VycmVudEVsZW1lbnRzID0gdGhpcy5lbGVtZW50cygpICk7IGVsZW1lbnRzWyBpIF07IGkrKyApIHtcblx0XHRcdFx0dGhpcy5jaGVjayggZWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudmFsaWQoKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IuZWxlbWVudC9cblx0XHRlbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciBjbGVhbkVsZW1lbnQgPSB0aGlzLmNsZWFuKCBlbGVtZW50ICksXG5cdFx0XHRcdGNoZWNrRWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggY2xlYW5FbGVtZW50ICksXG5cdFx0XHRcdHYgPSB0aGlzLFxuXHRcdFx0XHRyZXN1bHQgPSB0cnVlLFxuXHRcdFx0XHRycywgZ3JvdXA7XG5cblx0XHRcdGlmICggY2hlY2tFbGVtZW50ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmludmFsaWRbIGNsZWFuRWxlbWVudC5uYW1lIF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnByZXBhcmVFbGVtZW50KCBjaGVja0VsZW1lbnQgKTtcblx0XHRcdFx0dGhpcy5jdXJyZW50RWxlbWVudHMgPSAkKCBjaGVja0VsZW1lbnQgKTtcblxuXHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiB2YWxpZGF0ZSBhbGwgZ3JvdXAgZWxlbWVudHMgYWxyZWFkeVxuXHRcdFx0XHQvLyBjb250YWluaW5nIGEgdmFsdWVcblx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgY2hlY2tFbGVtZW50Lm5hbWUgXTtcblx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHQkLmVhY2goIHRoaXMuZ3JvdXBzLCBmdW5jdGlvbiggbmFtZSwgdGVzdGdyb3VwICkge1xuXHRcdFx0XHRcdFx0aWYgKCB0ZXN0Z3JvdXAgPT09IGdyb3VwICYmIG5hbWUgIT09IGNoZWNrRWxlbWVudC5uYW1lICkge1xuXHRcdFx0XHRcdFx0XHRjbGVhbkVsZW1lbnQgPSB2LnZhbGlkYXRpb25UYXJnZXRGb3IoIHYuY2xlYW4oIHYuZmluZEJ5TmFtZSggbmFtZSApICkgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjbGVhbkVsZW1lbnQgJiYgY2xlYW5FbGVtZW50Lm5hbWUgaW4gdi5pbnZhbGlkICkge1xuXHRcdFx0XHRcdFx0XHRcdHYuY3VycmVudEVsZW1lbnRzLnB1c2goIGNsZWFuRWxlbWVudCApO1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdCA9IHYuY2hlY2soIGNsZWFuRWxlbWVudCApICYmIHJlc3VsdDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJzID0gdGhpcy5jaGVjayggY2hlY2tFbGVtZW50ICkgIT09IGZhbHNlO1xuXHRcdFx0XHRyZXN1bHQgPSByZXN1bHQgJiYgcnM7XG5cdFx0XHRcdGlmICggcnMgKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnZhbGlkWyBjaGVja0VsZW1lbnQubmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5pbnZhbGlkWyBjaGVja0VsZW1lbnQubmFtZSBdID0gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggIXRoaXMubnVtYmVyT2ZJbnZhbGlkcygpICkge1xuXG5cdFx0XHRcdFx0Ly8gSGlkZSBlcnJvciBjb250YWluZXJzIG9uIGxhc3QgZXJyb3Jcblx0XHRcdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMudG9IaWRlLmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zaG93RXJyb3JzKCk7XG5cblx0XHRcdFx0Ly8gQWRkIGFyaWEtaW52YWxpZCBzdGF0dXMgZm9yIHNjcmVlbiByZWFkZXJzXG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtaW52YWxpZFwiLCAhcnMgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3Iuc2hvd0Vycm9ycy9cblx0XHRzaG93RXJyb3JzOiBmdW5jdGlvbiggZXJyb3JzICkge1xuXHRcdFx0aWYgKCBlcnJvcnMgKSB7XG5cdFx0XHRcdHZhciB2YWxpZGF0b3IgPSB0aGlzO1xuXG5cdFx0XHRcdC8vIEFkZCBpdGVtcyB0byBlcnJvciBsaXN0IGFuZCBtYXBcblx0XHRcdFx0JC5leHRlbmQoIHRoaXMuZXJyb3JNYXAsIGVycm9ycyApO1xuXHRcdFx0XHR0aGlzLmVycm9yTGlzdCA9ICQubWFwKCB0aGlzLmVycm9yTWFwLCBmdW5jdGlvbiggbWVzc2FnZSwgbmFtZSApIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZSxcblx0XHRcdFx0XHRcdGVsZW1lbnQ6IHZhbGlkYXRvci5maW5kQnlOYW1lKCBuYW1lIClbIDAgXVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgaXRlbXMgZnJvbSBzdWNjZXNzIGxpc3Rcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdCA9ICQuZ3JlcCggdGhpcy5zdWNjZXNzTGlzdCwgZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEoIGVsZW1lbnQubmFtZSBpbiBlcnJvcnMgKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnNob3dFcnJvcnMgKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3Muc2hvd0Vycm9ycy5jYWxsKCB0aGlzLCB0aGlzLmVycm9yTWFwLCB0aGlzLmVycm9yTGlzdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5kZWZhdWx0U2hvd0Vycm9ycygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5yZXNldEZvcm0vXG5cdFx0cmVzZXRGb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggJC5mbi5yZXNldEZvcm0gKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS5yZXNldEZvcm0oKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuaW52YWxpZCA9IHt9O1xuXHRcdFx0dGhpcy5zdWJtaXR0ZWQgPSB7fTtcblx0XHRcdHRoaXMucHJlcGFyZUZvcm0oKTtcblx0XHRcdHRoaXMuaGlkZUVycm9ycygpO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cygpXG5cdFx0XHRcdC5yZW1vdmVEYXRhKCBcInByZXZpb3VzVmFsdWVcIiApXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCBcImFyaWEtaW52YWxpZFwiICk7XG5cblx0XHRcdHRoaXMucmVzZXRFbGVtZW50cyggZWxlbWVudHMgKTtcblx0XHR9LFxuXG5cdFx0cmVzZXRFbGVtZW50czogZnVuY3Rpb24oIGVsZW1lbnRzICkge1xuXHRcdFx0dmFyIGk7XG5cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGVsZW1lbnRzWyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnRzWyBpIF0sXG5cdFx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIFwiXCIgKTtcblx0XHRcdFx0XHR0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnRzWyBpIF0ubmFtZSApLnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudHNcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcyApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0bnVtYmVyT2ZJbnZhbGlkczogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vYmplY3RMZW5ndGgoIHRoaXMuaW52YWxpZCApO1xuXHRcdH0sXG5cblx0XHRvYmplY3RMZW5ndGg6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHQvKiBqc2hpbnQgdW51c2VkOiBmYWxzZSAqL1xuXHRcdFx0dmFyIGNvdW50ID0gMCxcblx0XHRcdFx0aTtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXG5cdFx0XHRcdC8vIFRoaXMgY2hlY2sgYWxsb3dzIGNvdW50aW5nIGVsZW1lbnRzIHdpdGggZW1wdHkgZXJyb3Jcblx0XHRcdFx0Ly8gbWVzc2FnZSBhcyBpbnZhbGlkIGVsZW1lbnRzXG5cdFx0XHRcdGlmICggb2JqWyBpIF0gIT09IHVuZGVmaW5lZCAmJiBvYmpbIGkgXSAhPT0gbnVsbCAmJiBvYmpbIGkgXSAhPT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvdW50O1xuXHRcdH0sXG5cblx0XHRoaWRlRXJyb3JzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaGlkZVRoZXNlKCB0aGlzLnRvSGlkZSApO1xuXHRcdH0sXG5cblx0XHRoaWRlVGhlc2U6IGZ1bmN0aW9uKCBlcnJvcnMgKSB7XG5cdFx0XHRlcnJvcnMubm90KCB0aGlzLmNvbnRhaW5lcnMgKS50ZXh0KCBcIlwiICk7XG5cdFx0XHR0aGlzLmFkZFdyYXBwZXIoIGVycm9ycyApLmhpZGUoKTtcblx0XHR9LFxuXG5cdFx0dmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2l6ZSgpID09PSAwO1xuXHRcdH0sXG5cblx0XHRzaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmVycm9yTGlzdC5sZW5ndGg7XG5cdFx0fSxcblxuXHRcdGZvY3VzSW52YWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZm9jdXNJbnZhbGlkICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdCQoIHRoaXMuZmluZExhc3RBY3RpdmUoKSB8fCB0aGlzLmVycm9yTGlzdC5sZW5ndGggJiYgdGhpcy5lcnJvckxpc3RbIDAgXS5lbGVtZW50IHx8IFtdIClcblx0XHRcdFx0XHQuZmlsdGVyKCBcIjp2aXNpYmxlXCIgKVxuXHRcdFx0XHRcdC5mb2N1cygpXG5cblx0XHRcdFx0XHQvLyBNYW51YWxseSB0cmlnZ2VyIGZvY3VzaW4gZXZlbnQ7IHdpdGhvdXQgaXQsIGZvY3VzaW4gaGFuZGxlciBpc24ndCBjYWxsZWQsIGZpbmRMYXN0QWN0aXZlIHdvbid0IGhhdmUgYW55dGhpbmcgdG8gZmluZFxuXHRcdFx0XHRcdC50cmlnZ2VyKCBcImZvY3VzaW5cIiApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIElnbm9yZSBJRSB0aHJvd2luZyBlcnJvcnMgd2hlbiBmb2N1c2luZyBoaWRkZW4gZWxlbWVudHNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRmaW5kTGFzdEFjdGl2ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdEFjdGl2ZSA9IHRoaXMubGFzdEFjdGl2ZTtcblx0XHRcdHJldHVybiBsYXN0QWN0aXZlICYmICQuZ3JlcCggdGhpcy5lcnJvckxpc3QsIGZ1bmN0aW9uKCBuICkge1xuXHRcdFx0XHRyZXR1cm4gbi5lbGVtZW50Lm5hbWUgPT09IGxhc3RBY3RpdmUubmFtZTtcblx0XHRcdH0gKS5sZW5ndGggPT09IDEgJiYgbGFzdEFjdGl2ZTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHZhbGlkYXRvciA9IHRoaXMsXG5cdFx0XHRcdHJ1bGVzQ2FjaGUgPSB7fTtcblxuXHRcdFx0Ly8gU2VsZWN0IGFsbCB2YWxpZCBpbnB1dHMgaW5zaWRlIHRoZSBmb3JtIChubyBzdWJtaXQgb3IgcmVzZXQgYnV0dG9ucylcblx0XHRcdHJldHVybiAkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdC5maW5kKCBcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBbY29udGVudGVkaXRhYmxlXVwiIClcblx0XHRcdC5ub3QoIFwiOnN1Ym1pdCwgOnJlc2V0LCA6aW1hZ2UsIDpkaXNhYmxlZFwiIClcblx0XHRcdC5ub3QoIHRoaXMuc2V0dGluZ3MuaWdub3JlIClcblx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmFtZSA9IHRoaXMubmFtZSB8fCAkKCB0aGlzICkuYXR0ciggXCJuYW1lXCIgKTsgLy8gRm9yIGNvbnRlbnRlZGl0YWJsZVxuXHRcdFx0XHRpZiAoICFuYW1lICYmIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBcIiVvIGhhcyBubyBuYW1lIGFzc2lnbmVkXCIsIHRoaXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggdGhpcy5oYXNBdHRyaWJ1dGUoIFwiY29udGVudGVkaXRhYmxlXCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmZvcm0gPSAkKCB0aGlzICkuY2xvc2VzdCggXCJmb3JtXCIgKVsgMCBdO1xuXHRcdFx0XHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZWxlY3Qgb25seSB0aGUgZmlyc3QgZWxlbWVudCBmb3IgZWFjaCBuYW1lLCBhbmQgb25seSB0aG9zZSB3aXRoIHJ1bGVzIHNwZWNpZmllZFxuXHRcdFx0XHRpZiAoIG5hbWUgaW4gcnVsZXNDYWNoZSB8fCAhdmFsaWRhdG9yLm9iamVjdExlbmd0aCggJCggdGhpcyApLnJ1bGVzKCkgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRydWxlc0NhY2hlWyBuYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0Y2xlYW46IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiAkKCBzZWxlY3RvciApWyAwIF07XG5cdFx0fSxcblxuXHRcdGVycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXJyb3JDbGFzcyA9IHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcy5zcGxpdCggXCIgXCIgKS5qb2luKCBcIi5cIiApO1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuc2V0dGluZ3MuZXJyb3JFbGVtZW50ICsgXCIuXCIgKyBlcnJvckNsYXNzLCB0aGlzLmVycm9yQ29udGV4dCApO1xuXHRcdH0sXG5cblx0XHRyZXNldEludGVybmFsczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnN1Y2Nlc3NMaXN0ID0gW107XG5cdFx0XHR0aGlzLmVycm9yTGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5lcnJvck1hcCA9IHt9O1xuXHRcdFx0dGhpcy50b1Nob3cgPSAkKCBbXSApO1xuXHRcdFx0dGhpcy50b0hpZGUgPSAkKCBbXSApO1xuXHRcdH0sXG5cblx0XHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnJlc2V0SW50ZXJuYWxzKCk7XG5cdFx0XHR0aGlzLmN1cnJlbnRFbGVtZW50cyA9ICQoIFtdICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVGb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnMoKS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdH0sXG5cblx0XHRwcmVwYXJlRWxlbWVudDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICk7XG5cdFx0fSxcblxuXHRcdGVsZW1lbnRWYWx1ZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgJGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHRcdHR5cGUgPSBlbGVtZW50LnR5cGUsXG5cdFx0XHRcdHZhbCwgaWR4O1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwicmFkaW9cIiB8fCB0eXBlID09PSBcImNoZWNrYm94XCIgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApLmZpbHRlciggXCI6Y2hlY2tlZFwiICkudmFsKCk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBlbGVtZW50LnZhbGlkaXR5ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbWVudC52YWxpZGl0eS5iYWRJbnB1dCA/IFwiTmFOXCIgOiAkZWxlbWVudC52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtZW50Lmhhc0F0dHJpYnV0ZSggXCJjb250ZW50ZWRpdGFibGVcIiApICkge1xuXHRcdFx0XHR2YWwgPSAkZWxlbWVudC50ZXh0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSAkZWxlbWVudC52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZpbGVcIiApIHtcblxuXHRcdFx0XHQvLyBNb2Rlcm4gYnJvd3NlciAoY2hyb21lICYgc2FmYXJpKVxuXHRcdFx0XHRpZiAoIHZhbC5zdWJzdHIoIDAsIDEyICkgPT09IFwiQzpcXFxcZmFrZXBhdGhcXFxcXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbC5zdWJzdHIoIDEyICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMZWdhY3kgYnJvd3NlcnNcblx0XHRcdFx0Ly8gVW5peC1iYXNlZCBwYXRoXG5cdFx0XHRcdGlkeCA9IHZhbC5sYXN0SW5kZXhPZiggXCIvXCIgKTtcblx0XHRcdFx0aWYgKCBpZHggPj0gMCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggaWR4ICsgMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2luZG93cy1iYXNlZCBwYXRoXG5cdFx0XHRcdGlkeCA9IHZhbC5sYXN0SW5kZXhPZiggXCJcXFxcXCIgKTtcblx0XHRcdFx0aWYgKCBpZHggPj0gMCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggaWR4ICsgMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSnVzdCB0aGUgZmlsZSBuYW1lXG5cdFx0XHRcdHJldHVybiB2YWw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIHZhbC5yZXBsYWNlKCAvXFxyL2csIFwiXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fSxcblxuXHRcdGNoZWNrOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IoIHRoaXMuY2xlYW4oIGVsZW1lbnQgKSApO1xuXG5cdFx0XHR2YXIgcnVsZXMgPSAkKCBlbGVtZW50ICkucnVsZXMoKSxcblx0XHRcdFx0cnVsZXNDb3VudCA9ICQubWFwKCBydWxlcywgZnVuY3Rpb24oIG4sIGkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH0gKS5sZW5ndGgsXG5cdFx0XHRcdGRlcGVuZGVuY3lNaXNtYXRjaCA9IGZhbHNlLFxuXHRcdFx0XHR2YWwgPSB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApLFxuXHRcdFx0XHRyZXN1bHQsIG1ldGhvZCwgcnVsZSwgbm9ybWFsaXplcjtcblxuXHRcdFx0Ly8gUHJpb3JpdGl6ZSB0aGUgbG9jYWwgbm9ybWFsaXplciBkZWZpbmVkIGZvciB0aGlzIGVsZW1lbnQgb3ZlciB0aGUgZ2xvYmFsIG9uZVxuXHRcdFx0Ly8gaWYgdGhlIGZvcm1lciBleGlzdHMsIG90aGVyd2lzZSB1c2VyIHRoZSBnbG9iYWwgb25lIGluIGNhc2UgaXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0eXBlb2YgcnVsZXMubm9ybWFsaXplciA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRub3JtYWxpemVyID0gcnVsZXMubm9ybWFsaXplcjtcblx0XHRcdH0gZWxzZSBpZiAoXHR0eXBlb2YgdGhpcy5zZXR0aW5ncy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZXIgPSB0aGlzLnNldHRpbmdzLm5vcm1hbGl6ZXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIG5vcm1hbGl6ZXIgaXMgZGVmaW5lZCwgdGhlbiBjYWxsIGl0IHRvIHJldHJlaXZlIHRoZSBjaGFuZ2VkIHZhbHVlIGluc3RlYWRcblx0XHRcdC8vIG9mIHVzaW5nIHRoZSByZWFsIG9uZS5cblx0XHRcdC8vIE5vdGUgdGhhdCBgdGhpc2AgaW4gdGhlIG5vcm1hbGl6ZXIgaXMgYGVsZW1lbnRgLlxuXHRcdFx0aWYgKCBub3JtYWxpemVyICkge1xuXHRcdFx0XHR2YWwgPSBub3JtYWxpemVyLmNhbGwoIGVsZW1lbnQsIHZhbCApO1xuXG5cdFx0XHRcdGlmICggdHlwZW9mIHZhbCAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZSBub3JtYWxpemVyIHNob3VsZCByZXR1cm4gYSBzdHJpbmcgdmFsdWUuXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIERlbGV0ZSB0aGUgbm9ybWFsaXplciBmcm9tIHJ1bGVzIHRvIGF2b2lkIHRyZWF0aW5nIGl0IGFzIGEgcHJlLWRlZmluZWQgbWV0aG9kLlxuXHRcdFx0XHRkZWxldGUgcnVsZXMubm9ybWFsaXplcjtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbWV0aG9kIGluIHJ1bGVzICkge1xuXHRcdFx0XHRydWxlID0geyBtZXRob2Q6IG1ldGhvZCwgcGFyYW1ldGVyczogcnVsZXNbIG1ldGhvZCBdIH07XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gJC52YWxpZGF0b3IubWV0aG9kc1sgbWV0aG9kIF0uY2FsbCggdGhpcywgdmFsLCBlbGVtZW50LCBydWxlLnBhcmFtZXRlcnMgKTtcblxuXHRcdFx0XHRcdC8vIElmIGEgbWV0aG9kIGluZGljYXRlcyB0aGF0IHRoZSBmaWVsZCBpcyBvcHRpb25hbCBhbmQgdGhlcmVmb3JlIHZhbGlkLFxuXHRcdFx0XHRcdC8vIGRvbid0IG1hcmsgaXQgYXMgdmFsaWQgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgcnVsZXNcblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCIgJiYgcnVsZXNDb3VudCA9PT0gMSApIHtcblx0XHRcdFx0XHRcdGRlcGVuZGVuY3lNaXNtYXRjaCA9IHRydWU7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gXCJwZW5kaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRvSGlkZSA9IHRoaXMudG9IaWRlLm5vdCggdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggIXJlc3VsdCApIHtcblx0XHRcdFx0XHRcdHRoaXMuZm9ybWF0QW5kQWRkKCBlbGVtZW50LCBydWxlICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyggXCJFeGNlcHRpb24gb2NjdXJyZWQgd2hlbiBjaGVja2luZyBlbGVtZW50IFwiICsgZWxlbWVudC5pZCArIFwiLCBjaGVjayB0aGUgJ1wiICsgcnVsZS5tZXRob2QgKyBcIicgbWV0aG9kLlwiLCBlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggZSBpbnN0YW5jZW9mIFR5cGVFcnJvciApIHtcblx0XHRcdFx0XHRcdGUubWVzc2FnZSArPSBcIi4gIEV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBkZXBlbmRlbmN5TWlzbWF0Y2ggKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5vYmplY3RMZW5ndGgoIHJ1bGVzICkgKSB7XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QucHVzaCggZWxlbWVudCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFJldHVybiB0aGUgY3VzdG9tIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IGFuZCB2YWxpZGF0aW9uIG1ldGhvZFxuXHRcdC8vIHNwZWNpZmllZCBpbiB0aGUgZWxlbWVudCdzIEhUTUw1IGRhdGEgYXR0cmlidXRlXG5cdFx0Ly8gcmV0dXJuIHRoZSBnZW5lcmljIG1lc3NhZ2UgaWYgcHJlc2VudCBhbmQgbm8gbWV0aG9kIHNwZWNpZmljIG1lc3NhZ2UgaXMgcHJlc2VudFxuXHRcdGN1c3RvbURhdGFNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgbWV0aG9kICkge1xuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKS5kYXRhKCBcIm1zZ1wiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApIHx8ICQoIGVsZW1lbnQgKS5kYXRhKCBcIm1zZ1wiICk7XG5cdFx0fSxcblxuXHRcdC8vIFJldHVybiB0aGUgY3VzdG9tIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBlbGVtZW50IG5hbWUgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Y3VzdG9tTWVzc2FnZTogZnVuY3Rpb24oIG5hbWUsIG1ldGhvZCApIHtcblx0XHRcdHZhciBtID0gdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgbmFtZSBdO1xuXHRcdFx0cmV0dXJuIG0gJiYgKCBtLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgPyBtIDogbVsgbWV0aG9kIF0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBmaXJzdCBkZWZpbmVkIGFyZ3VtZW50LCBhbGxvd2luZyBlbXB0eSBzdHJpbmdzXG5cdFx0ZmluZERlZmluZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50c1sgaSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH0sXG5cblx0XHQvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciAncnVsZScgdXNlZCB0byBiZSBhIHN0cmluZywgYW5kIGV4dGVuZGVkIHRvIGFuIG9iamVjdCBsaXRlcmFsXG5cdFx0Ly8gb2YgdGhlIGZvbGxvd2luZyBmb3JtOlxuXHRcdC8vIHJ1bGUgPSB7XG5cdFx0Ly8gICAgIG1ldGhvZDogXCJtZXRob2QgbmFtZVwiLFxuXHRcdC8vICAgICBwYXJhbWV0ZXJzOiBcInRoZSBnaXZlbiBtZXRob2QgcGFyYW1ldGVyc1wiXG5cdFx0Ly8gfVxuXHRcdC8vXG5cdFx0Ly8gVGhlIG9sZCBiZWhhdmlvciBzdGlsbCBzdXBwb3J0ZWQsIGtlcHQgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoXG5cdFx0Ly8gb2xkIGNvZGUsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0XHRkZWZhdWx0TWVzc2FnZTogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRydWxlID0geyBtZXRob2Q6IHJ1bGUgfTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLmZpbmREZWZpbmVkKFxuXHRcdFx0XHRcdHRoaXMuY3VzdG9tTWVzc2FnZSggZWxlbWVudC5uYW1lLCBydWxlLm1ldGhvZCApLFxuXHRcdFx0XHRcdHRoaXMuY3VzdG9tRGF0YU1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUubWV0aG9kICksXG5cblx0XHRcdFx0XHQvLyAndGl0bGUnIGlzIG5ldmVyIHVuZGVmaW5lZCwgc28gaGFuZGxlIGVtcHR5IHN0cmluZyBhcyB1bmRlZmluZWRcblx0XHRcdFx0XHQhdGhpcy5zZXR0aW5ncy5pZ25vcmVUaXRsZSAmJiBlbGVtZW50LnRpdGxlIHx8IHVuZGVmaW5lZCxcblx0XHRcdFx0XHQkLnZhbGlkYXRvci5tZXNzYWdlc1sgcnVsZS5tZXRob2QgXSxcblx0XHRcdFx0XHRcIjxzdHJvbmc+V2FybmluZzogTm8gbWVzc2FnZSBkZWZpbmVkIGZvciBcIiArIGVsZW1lbnQubmFtZSArIFwiPC9zdHJvbmc+XCJcblx0XHRcdFx0KSxcblx0XHRcdFx0dGhlcmVnZXggPSAvXFwkP1xceyhcXGQrKVxcfS9nO1xuXHRcdFx0aWYgKCB0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRtZXNzYWdlID0gbWVzc2FnZS5jYWxsKCB0aGlzLCBydWxlLnBhcmFtZXRlcnMsIGVsZW1lbnQgKTtcblx0XHRcdH0gZWxzZSBpZiAoIHRoZXJlZ2V4LnRlc3QoIG1lc3NhZ2UgKSApIHtcblx0XHRcdFx0bWVzc2FnZSA9ICQudmFsaWRhdG9yLmZvcm1hdCggbWVzc2FnZS5yZXBsYWNlKCB0aGVyZWdleCwgXCJ7JDF9XCIgKSwgcnVsZS5wYXJhbWV0ZXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtZXNzYWdlO1xuXHRcdH0sXG5cblx0XHRmb3JtYXRBbmRBZGQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBydWxlICkge1xuXHRcdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCBydWxlICk7XG5cblx0XHRcdHRoaXMuZXJyb3JMaXN0LnB1c2goIHtcblx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZSxcblx0XHRcdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHRcdFx0bWV0aG9kOiBydWxlLm1ldGhvZFxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmVycm9yTWFwWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZFsgZWxlbWVudC5uYW1lIF0gPSBtZXNzYWdlO1xuXHRcdH0sXG5cblx0XHRhZGRXcmFwcGVyOiBmdW5jdGlvbiggdG9Ub2dnbGUgKSB7XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblx0XHRcdFx0dG9Ub2dnbGUgPSB0b1RvZ2dsZS5hZGQoIHRvVG9nZ2xlLnBhcmVudCggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0b1RvZ2dsZTtcblx0XHR9LFxuXG5cdFx0ZGVmYXVsdFNob3dFcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGksIGVsZW1lbnRzLCBlcnJvcjtcblx0XHRcdGZvciAoIGkgPSAwOyB0aGlzLmVycm9yTGlzdFsgaSBdOyBpKysgKSB7XG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvckxpc3RbIGkgXTtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlcnJvci5lbGVtZW50LCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCBlcnJvci5lbGVtZW50LCBlcnJvci5tZXNzYWdlICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuZXJyb3JMaXN0Lmxlbmd0aCApIHtcblx0XHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNob3dMYWJlbCggdGhpcy5zdWNjZXNzTGlzdFsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodCApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGVsZW1lbnRzID0gdGhpcy52YWxpZEVsZW1lbnRzKCk7IGVsZW1lbnRzWyBpIF07IGkrKyApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVsZW1lbnRzWyBpIF0sIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLnRvU2hvdyApO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR0aGlzLmFkZFdyYXBwZXIoIHRoaXMudG9TaG93ICkuc2hvdygpO1xuXHRcdH0sXG5cblx0XHR2YWxpZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnRFbGVtZW50cy5ub3QoIHRoaXMuaW52YWxpZEVsZW1lbnRzKCkgKTtcblx0XHR9LFxuXG5cdFx0aW52YWxpZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkKCB0aGlzLmVycm9yTGlzdCApLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdHNob3dMYWJlbDogZnVuY3Rpb24oIGVsZW1lbnQsIG1lc3NhZ2UgKSB7XG5cdFx0XHR2YXIgcGxhY2UsIGdyb3VwLCBlcnJvcklELCB2LFxuXHRcdFx0XHRlcnJvciA9IHRoaXMuZXJyb3JzRm9yKCBlbGVtZW50ICksXG5cdFx0XHRcdGVsZW1lbnRJRCA9IHRoaXMuaWRPck5hbWUoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZGVzY3JpYmVkQnkgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIgKTtcblxuXHRcdFx0aWYgKCBlcnJvci5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gUmVmcmVzaCBlcnJvci9zdWNjZXNzIGNsYXNzXG5cdFx0XHRcdGVycm9yLnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzICk7XG5cblx0XHRcdFx0Ly8gUmVwbGFjZSBtZXNzYWdlIG9uIGV4aXN0aW5nIGxhYmVsXG5cdFx0XHRcdGVycm9yLmh0bWwoIG1lc3NhZ2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIGVycm9yIGVsZW1lbnRcblx0XHRcdFx0ZXJyb3IgPSAkKCBcIjxcIiArIHRoaXMuc2V0dGluZ3MuZXJyb3JFbGVtZW50ICsgXCI+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBcImlkXCIsIGVsZW1lbnRJRCArIFwiLWVycm9yXCIgKVxuXHRcdFx0XHRcdC5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzIClcblx0XHRcdFx0XHQuaHRtbCggbWVzc2FnZSB8fCBcIlwiICk7XG5cblx0XHRcdFx0Ly8gTWFpbnRhaW4gcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IHRvIGJlIHBsYWNlZCBpbnRvIHRoZSBET01cblx0XHRcdFx0cGxhY2UgPSBlcnJvcjtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSwgZXZlbiBpbiBJRVxuXHRcdFx0XHRcdC8vIGFjdHVhbGx5IHNob3dpbmcgdGhlIHdyYXBwZWQgZWxlbWVudCBpcyBoYW5kbGVkIGVsc2V3aGVyZVxuXHRcdFx0XHRcdHBsYWNlID0gZXJyb3IuaGlkZSgpLnNob3coKS53cmFwKCBcIjxcIiArIHRoaXMuc2V0dGluZ3Mud3JhcHBlciArIFwiLz5cIiApLnBhcmVudCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5sYWJlbENvbnRhaW5lci5hcHBlbmQoIHBsYWNlICk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuc2V0dGluZ3MuZXJyb3JQbGFjZW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudC5jYWxsKCB0aGlzLCBwbGFjZSwgJCggZWxlbWVudCApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGxhY2UuaW5zZXJ0QWZ0ZXIoIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExpbmsgZXJyb3IgYmFjayB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoIGVycm9yLmlzKCBcImxhYmVsXCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBlcnJvciBpcyBhIGxhYmVsLCB0aGVuIGFzc29jaWF0ZSB1c2luZyAnZm9yJ1xuXHRcdFx0XHRcdGVycm9yLmF0dHIoIFwiZm9yXCIsIGVsZW1lbnRJRCApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaXMgbm90IGEgY2hpbGQgb2YgYW4gYXNzb2NpYXRlZCBsYWJlbCwgdGhlbiBpdCdzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdC8vIHRvIGV4cGxpY2l0bHkgYXBwbHkgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHR9IGVsc2UgaWYgKCBlcnJvci5wYXJlbnRzKCBcImxhYmVsW2Zvcj0nXCIgKyB0aGlzLmVzY2FwZUNzc01ldGEoIGVsZW1lbnRJRCApICsgXCInXVwiICkubGVuZ3RoID09PSAwICkge1xuXHRcdFx0XHRcdGVycm9ySUQgPSBlcnJvci5hdHRyKCBcImlkXCIgKTtcblxuXHRcdFx0XHRcdC8vIFJlc3BlY3QgZXhpc3Rpbmcgbm9uLWVycm9yIGFyaWEtZGVzY3JpYmVkYnlcblx0XHRcdFx0XHRpZiAoICFkZXNjcmliZWRCeSApIHtcblx0XHRcdFx0XHRcdGRlc2NyaWJlZEJ5ID0gZXJyb3JJRDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhZGVzY3JpYmVkQnkubWF0Y2goIG5ldyBSZWdFeHAoIFwiXFxcXGJcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZXJyb3JJRCApICsgXCJcXFxcYlwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQWRkIHRvIGVuZCBvZiBsaXN0IGlmIG5vdCBhbHJlYWR5IHByZXNlbnRcblx0XHRcdFx0XHRcdGRlc2NyaWJlZEJ5ICs9IFwiIFwiICsgZXJyb3JJRDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JCggZWxlbWVudCApLmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBkZXNjcmliZWRCeSApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhpcyBlbGVtZW50IGlzIGdyb3VwZWQsIHRoZW4gYXNzaWduIHRvIGFsbCBlbGVtZW50cyBpbiB0aGUgc2FtZSBncm91cFxuXHRcdFx0XHRcdGdyb3VwID0gdGhpcy5ncm91cHNbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRcdGlmICggZ3JvdXAgKSB7XG5cdFx0XHRcdFx0XHR2ID0gdGhpcztcblx0XHRcdFx0XHRcdCQuZWFjaCggdi5ncm91cHMsIGZ1bmN0aW9uKCBuYW1lLCB0ZXN0Z3JvdXAgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCApIHtcblx0XHRcdFx0XHRcdFx0XHQkKCBcIltuYW1lPSdcIiArIHYuZXNjYXBlQ3NzTWV0YSggbmFtZSApICsgXCInXVwiLCB2LmN1cnJlbnRGb3JtIClcblx0XHRcdFx0XHRcdFx0XHRcdC5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiwgZXJyb3IuYXR0ciggXCJpZFwiICkgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCAhbWVzc2FnZSAmJiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKSB7XG5cdFx0XHRcdGVycm9yLnRleHQoIFwiXCIgKTtcblx0XHRcdFx0aWYgKCB0eXBlb2YgdGhpcy5zZXR0aW5ncy5zdWNjZXNzID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdGVycm9yLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnN1Y2Nlc3MoIGVycm9yLCBlbGVtZW50ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMudG9TaG93ID0gdGhpcy50b1Nob3cuYWRkKCBlcnJvciApO1xuXHRcdH0sXG5cblx0XHRlcnJvcnNGb3I6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIG5hbWUgPSB0aGlzLmVzY2FwZUNzc01ldGEoIHRoaXMuaWRPck5hbWUoIGVsZW1lbnQgKSApLFxuXHRcdFx0XHRkZXNjcmliZXIgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIgKSxcblx0XHRcdFx0c2VsZWN0b3IgPSBcImxhYmVsW2Zvcj0nXCIgKyBuYW1lICsgXCInXSwgbGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddICpcIjtcblxuXHRcdFx0Ly8gJ2FyaWEtZGVzY3JpYmVkYnknIHNob3VsZCBkaXJlY3RseSByZWZlcmVuY2UgdGhlIGVycm9yIGVsZW1lbnRcblx0XHRcdGlmICggZGVzY3JpYmVyICkge1xuXHRcdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yICsgXCIsICNcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZGVzY3JpYmVyIClcblx0XHRcdFx0XHQucmVwbGFjZSggL1xccysvZywgXCIsICNcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0XHQuZXJyb3JzKClcblx0XHRcdFx0LmZpbHRlciggc2VsZWN0b3IgKTtcblx0XHR9LFxuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vY2F0ZWdvcnkvc2VsZWN0b3JzLywgZm9yIENTU1xuXHRcdC8vIG1ldGEtY2hhcmFjdGVycyB0aGF0IHNob3VsZCBiZSBlc2NhcGVkIGluIG9yZGVyIHRvIGJlIHVzZWQgd2l0aCBKUXVlcnlcblx0XHQvLyBhcyBhIGxpdGVyYWwgcGFydCBvZiBhIG5hbWUvaWQgb3IgYW55IHNlbGVjdG9yLlxuXHRcdGVzY2FwZUNzc01ldGE6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIC8oW1xcXFwhXCIjJCUmJygpKissLi86Ozw9Pj9AXFxbXFxdXmB7fH1+XSkvZywgXCJcXFxcJDFcIiApO1xuXHRcdH0sXG5cblx0XHRpZE9yTmFtZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHNbIGVsZW1lbnQubmFtZSBdIHx8ICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSA/IGVsZW1lbnQubmFtZSA6IGVsZW1lbnQuaWQgfHwgZWxlbWVudC5uYW1lICk7XG5cdFx0fSxcblxuXHRcdHZhbGlkYXRpb25UYXJnZXRGb3I6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBJZiByYWRpby9jaGVja2JveCwgdmFsaWRhdGUgZmlyc3QgZWxlbWVudCBpbiBncm91cCBpbnN0ZWFkXG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmZpbmRCeU5hbWUoIGVsZW1lbnQubmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBbHdheXMgYXBwbHkgaWdub3JlIGZpbHRlclxuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKS5ub3QoIHRoaXMuc2V0dGluZ3MuaWdub3JlIClbIDAgXTtcblx0XHR9LFxuXG5cdFx0Y2hlY2thYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiAoIC9yYWRpb3xjaGVja2JveC9pICkudGVzdCggZWxlbWVudC50eXBlICk7XG5cdFx0fSxcblxuXHRcdGZpbmRCeU5hbWU6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuY3VycmVudEZvcm0gKS5maW5kKCBcIltuYW1lPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggbmFtZSApICsgXCInXVwiICk7XG5cdFx0fSxcblxuXHRcdGdldExlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0c3dpdGNoICggZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0Y2FzZSBcInNlbGVjdFwiOlxuXHRcdFx0XHRyZXR1cm4gJCggXCJvcHRpb246c2VsZWN0ZWRcIiwgZWxlbWVudCApLmxlbmd0aDtcblx0XHRcdGNhc2UgXCJpbnB1dFwiOlxuXHRcdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuZmlsdGVyKCBcIjpjaGVja2VkXCIgKS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZS5sZW5ndGg7XG5cdFx0fSxcblxuXHRcdGRlcGVuZDogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGVwZW5kVHlwZXNbIHR5cGVvZiBwYXJhbSBdID8gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0oIHBhcmFtLCBlbGVtZW50ICkgOiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZXBlbmRUeXBlczoge1xuXHRcdFx0XCJib29sZWFuXCI6IGZ1bmN0aW9uKCBwYXJhbSApIHtcblx0XHRcdFx0cmV0dXJuIHBhcmFtO1xuXHRcdFx0fSxcblx0XHRcdFwic3RyaW5nXCI6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdFx0cmV0dXJuICEhJCggcGFyYW0sIGVsZW1lbnQuZm9ybSApLmxlbmd0aDtcblx0XHRcdH0sXG5cdFx0XHRcImZ1bmN0aW9uXCI6IGZ1bmN0aW9uKCBwYXJhbSwgZWxlbWVudCApIHtcblx0XHRcdFx0cmV0dXJuIHBhcmFtKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG9wdGlvbmFsOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciB2YWwgPSB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuICEkLnZhbGlkYXRvci5tZXRob2RzLnJlcXVpcmVkLmNhbGwoIHRoaXMsIHZhbCwgZWxlbWVudCApICYmIFwiZGVwZW5kZW5jeS1taXNtYXRjaFwiO1xuXHRcdH0sXG5cblx0XHRzdGFydFJlcXVlc3Q6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0aWYgKCAhdGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSApIHtcblx0XHRcdFx0dGhpcy5wZW5kaW5nUmVxdWVzdCsrO1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzdG9wUmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQsIHZhbGlkICkge1xuXHRcdFx0dGhpcy5wZW5kaW5nUmVxdWVzdC0tO1xuXG5cdFx0XHQvLyBTb21ldGltZXMgc3luY2hyb25pemF0aW9uIGZhaWxzLCBtYWtlIHN1cmUgcGVuZGluZ1JlcXVlc3QgaXMgbmV2ZXIgPCAwXG5cdFx0XHRpZiAoIHRoaXMucGVuZGluZ1JlcXVlc3QgPCAwICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gMDtcblx0XHRcdH1cblx0XHRcdGRlbGV0ZSB0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdO1xuXHRcdFx0JCggZWxlbWVudCApLnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLnBlbmRpbmdDbGFzcyApO1xuXHRcdFx0aWYgKCB2YWxpZCAmJiB0aGlzLnBlbmRpbmdSZXF1ZXN0ID09PSAwICYmIHRoaXMuZm9ybVN1Ym1pdHRlZCAmJiB0aGlzLmZvcm0oKSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnN1Ym1pdCgpO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSB0aGUgaGlkZGVuIGlucHV0IHRoYXQgd2FzIHVzZWQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlXG5cdFx0XHRcdC8vIG1pc3Npbmcgc3VibWl0IGJ1dHRvbi4gVGhlIGhpZGRlbiBpbnB1dCBpcyBhZGRlZCBieSBgaGFuZGxlKClgXG5cdFx0XHRcdC8vIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBvZiB0aGUgdXNlZCBzdWJtaXQgYnV0dG9uIGlzIHBhc3NlZCBvblxuXHRcdFx0XHQvLyBmb3Igc2NyaXB0ZWQgc3VibWl0cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2Rcblx0XHRcdFx0aWYgKCB0aGlzLnN1Ym1pdEJ1dHRvbiApIHtcblx0XHRcdFx0XHQkKCBcImlucHV0OmhpZGRlbltuYW1lPSdcIiArIHRoaXMuc3VibWl0QnV0dG9uLm5hbWUgKyBcIiddXCIsIHRoaXMuY3VycmVudEZvcm0gKS5yZW1vdmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggIXZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkudHJpZ2dlckhhbmRsZXIoIFwiaW52YWxpZC1mb3JtXCIsIFsgdGhpcyBdICk7XG5cdFx0XHRcdHRoaXMuZm9ybVN1Ym1pdHRlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcmV2aW91c1ZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCwgbWV0aG9kICkge1xuXHRcdFx0bWV0aG9kID0gdHlwZW9mIG1ldGhvZCA9PT0gXCJzdHJpbmdcIiAmJiBtZXRob2QgfHwgXCJyZW1vdGVcIjtcblxuXHRcdFx0cmV0dXJuICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIgKSB8fCAkLmRhdGEoIGVsZW1lbnQsIFwicHJldmlvdXNWYWx1ZVwiLCB7XG5cdFx0XHRcdG9sZDogbnVsbCxcblx0XHRcdFx0dmFsaWQ6IHRydWUsXG5cdFx0XHRcdG1lc3NhZ2U6IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHsgbWV0aG9kOiBtZXRob2QgfSApXG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdC8vIENsZWFucyB1cCBhbGwgZm9ybXMgYW5kIGVsZW1lbnRzLCByZW1vdmVzIHZhbGlkYXRvci1zcGVjaWZpYyBldmVudHNcblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRGb3JtKCk7XG5cblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZVwiIClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwidmFsaWRhdG9yXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKVxuXHRcdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlLWVxdWFsVG9cIiApXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCBcInZhbGlkYXRlLWVxdWFsVG8tYmx1clwiICk7XG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xhc3NSdWxlU2V0dGluZ3M6IHtcblx0XHRyZXF1aXJlZDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuXHRcdGVtYWlsOiB7IGVtYWlsOiB0cnVlIH0sXG5cdFx0dXJsOiB7IHVybDogdHJ1ZSB9LFxuXHRcdGRhdGU6IHsgZGF0ZTogdHJ1ZSB9LFxuXHRcdGRhdGVJU086IHsgZGF0ZUlTTzogdHJ1ZSB9LFxuXHRcdG51bWJlcjogeyBudW1iZXI6IHRydWUgfSxcblx0XHRkaWdpdHM6IHsgZGlnaXRzOiB0cnVlIH0sXG5cdFx0Y3JlZGl0Y2FyZDogeyBjcmVkaXRjYXJkOiB0cnVlIH1cblx0fSxcblxuXHRhZGRDbGFzc1J1bGVzOiBmdW5jdGlvbiggY2xhc3NOYW1lLCBydWxlcyApIHtcblx0XHRpZiAoIGNsYXNzTmFtZS5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXHRcdFx0dGhpcy5jbGFzc1J1bGVTZXR0aW5nc1sgY2xhc3NOYW1lIF0gPSBydWxlcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuY2xhc3NSdWxlU2V0dGluZ3MsIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fSxcblxuXHRjbGFzc1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdGNsYXNzZXMgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJjbGFzc1wiICk7XG5cblx0XHRpZiAoIGNsYXNzZXMgKSB7XG5cdFx0XHQkLmVhY2goIGNsYXNzZXMuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgaW4gJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3MgKSB7XG5cdFx0XHRcdFx0JC5leHRlbmQoIHJ1bGVzLCAkLnZhbGlkYXRvci5jbGFzc1J1bGVTZXR0aW5nc1sgdGhpcyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdG5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGU6IGZ1bmN0aW9uKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApIHtcblxuXHRcdC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGEgbnVtYmVyIGZvciBudW1iZXIgaW5wdXRzLCBhbmQgZm9yIHRleHQgZm9yIGJhY2t3YXJkcyBjb21wYWJpbGl0eVxuXHRcdC8vIGFsbG93cyB0eXBlPVwiZGF0ZVwiIGFuZCBvdGhlcnMgdG8gYmUgY29tcGFyZWQgYXMgc3RyaW5nc1xuXHRcdGlmICggL21pbnxtYXh8c3RlcC8udGVzdCggbWV0aG9kICkgJiYgKCB0eXBlID09PSBudWxsIHx8IC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCggdHlwZSApICkgKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlciggdmFsdWUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydCBPcGVyYSBNaW5pLCB3aGljaCByZXR1cm5zIE5hTiBmb3IgdW5kZWZpbmVkIG1pbmxlbmd0aFxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCApIHtcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IG1ldGhvZCAmJiB0eXBlICE9PSBcInJhbmdlXCIgKSB7XG5cblx0XHRcdC8vIEV4Y2VwdGlvbjogdGhlIGpxdWVyeSB2YWxpZGF0ZSAncmFuZ2UnIG1ldGhvZFxuXHRcdFx0Ly8gZG9lcyBub3QgdGVzdCBmb3IgdGhlIGh0bWw1ICdyYW5nZScgdHlwZVxuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0YXR0cmlidXRlUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgZm9yIDxpbnB1dCByZXF1aXJlZD4gaW4gYm90aCBodG1sNSBhbmQgb2xkZXIgYnJvd3NlcnNcblx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIG1ldGhvZCApO1xuXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBhbmQgbm9uLUhUTUw1IGJyb3dzZXJzIG1pZ2h0IGhhdmUgcmVxdWlyZWQ9XCJcIiBtYXJrdXBcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBub24tSFRNTDUgYnJvd3NlcnMgdG8gcmV0dXJuIGJvb2xcblx0XHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkZWxlbWVudC5hdHRyKCBtZXRob2QgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vICdtYXhsZW5ndGgnIG1heSBiZSByZXR1cm5lZCBhcyAtMSwgMjE0NzQ4MzY0NyAoIElFICkgYW5kIDUyNDI4OCAoIHNhZmFyaSApIGZvciB0ZXh0IGlucHV0c1xuXHRcdGlmICggcnVsZXMubWF4bGVuZ3RoICYmIC8tMXwyMTQ3NDgzNjQ3fDUyNDI4OC8udGVzdCggcnVsZXMubWF4bGVuZ3RoICkgKSB7XG5cdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRkYXRhUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cdFx0XHR2YWx1ZSA9ICRlbGVtZW50LmRhdGEoIFwicnVsZVwiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApO1xuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0c3RhdGljUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0dmFsaWRhdG9yID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzICkge1xuXHRcdFx0cnVsZXMgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWxpZGF0b3Iuc2V0dGluZ3MucnVsZXNbIGVsZW1lbnQubmFtZSBdICkgfHwge307XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRub3JtYWxpemVSdWxlczogZnVuY3Rpb24oIHJ1bGVzLCBlbGVtZW50ICkge1xuXG5cdFx0Ly8gSGFuZGxlIGRlcGVuZGVuY3kgY2hlY2tcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcHJvcCwgdmFsICkge1xuXG5cdFx0XHQvLyBJZ25vcmUgcnVsZSB3aGVuIHBhcmFtIGlzIGV4cGxpY2l0bHkgZmFsc2UsIGVnLiByZXF1aXJlZDpmYWxzZVxuXHRcdFx0aWYgKCB2YWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWwucGFyYW0gfHwgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdHZhciBrZWVwUnVsZSA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaCAoIHR5cGVvZiB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gISEkKCB2YWwuZGVwZW5kcywgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9IHZhbC5kZXBlbmRzLmNhbGwoIGVsZW1lbnQsIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGtlZXBSdWxlICkge1xuXHRcdFx0XHRcdHJ1bGVzWyBwcm9wIF0gPSB2YWwucGFyYW0gIT09IHVuZGVmaW5lZCA/IHZhbC5wYXJhbSA6IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5yZXNldEVsZW1lbnRzKCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdC8vIEV2YWx1YXRlIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcnVsZSwgcGFyYW1ldGVyICkge1xuXHRcdFx0cnVsZXNbIHJ1bGUgXSA9ICQuaXNGdW5jdGlvbiggcGFyYW1ldGVyICkgJiYgcnVsZSAhPT0gXCJub3JtYWxpemVyXCIgPyBwYXJhbWV0ZXIoIGVsZW1lbnQgKSA6IHBhcmFtZXRlcjtcblx0XHR9ICk7XG5cblx0XHQvLyBDbGVhbiBudW1iZXIgcGFyYW1ldGVyc1xuXHRcdCQuZWFjaCggWyBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRydWxlc1sgdGhpcyBdID0gTnVtYmVyKCBydWxlc1sgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdCQuZWFjaCggWyBcInJhbmdlbGVuZ3RoXCIsIFwicmFuZ2VcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJ0cztcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0aWYgKCAkLmlzQXJyYXkoIHJ1bGVzWyB0aGlzIF0gKSApIHtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDAgXSApLCBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDEgXSApIF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBydWxlc1sgdGhpcyBdID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHBhcnRzID0gcnVsZXNbIHRoaXMgXS5yZXBsYWNlKCAvW1xcW1xcXV0vZywgXCJcIiApLnNwbGl0KCAvW1xccyxdKy8gKTtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHBhcnRzWyAwIF0gKSwgTnVtYmVyKCBwYXJ0c1sgMSBdICkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggJC52YWxpZGF0b3IuYXV0b0NyZWF0ZVJhbmdlcyApIHtcblxuXHRcdFx0Ly8gQXV0by1jcmVhdGUgcmFuZ2VzXG5cdFx0XHRpZiAoIHJ1bGVzLm1pbiAhPSBudWxsICYmIHJ1bGVzLm1heCAhPSBudWxsICkge1xuXHRcdFx0XHRydWxlcy5yYW5nZSA9IFsgcnVsZXMubWluLCBydWxlcy5tYXggXTtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1pbjtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1heDtcblx0XHRcdH1cblx0XHRcdGlmICggcnVsZXMubWlubGVuZ3RoICE9IG51bGwgJiYgcnVsZXMubWF4bGVuZ3RoICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlbGVuZ3RoID0gWyBydWxlcy5taW5sZW5ndGgsIHJ1bGVzLm1heGxlbmd0aCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWlubGVuZ3RoO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHQvLyBDb252ZXJ0cyBhIHNpbXBsZSBzdHJpbmcgdG8gYSB7c3RyaW5nOiB0cnVlfSBydWxlLCBlLmcuLCBcInJlcXVpcmVkXCIgdG8ge3JlcXVpcmVkOnRydWV9XG5cdG5vcm1hbGl6ZVJ1bGU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR2YXIgdHJhbnNmb3JtZWQgPSB7fTtcblx0XHRcdCQuZWFjaCggZGF0YS5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyYW5zZm9ybWVkWyB0aGlzIF0gPSB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdFx0ZGF0YSA9IHRyYW5zZm9ybWVkO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuYWRkTWV0aG9kL1xuXHRhZGRNZXRob2Q6IGZ1bmN0aW9uKCBuYW1lLCBtZXRob2QsIG1lc3NhZ2UgKSB7XG5cdFx0JC52YWxpZGF0b3IubWV0aG9kc1sgbmFtZSBdID0gbWV0aG9kO1xuXHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBuYW1lIF0gPSBtZXNzYWdlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlIDogJC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXTtcblx0XHRpZiAoIG1ldGhvZC5sZW5ndGggPCAzICkge1xuXHRcdFx0JC52YWxpZGF0b3IuYWRkQ2xhc3NSdWxlcyggbmFtZSwgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggbmFtZSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5tZXRob2RzL1xuXHRtZXRob2RzOiB7XG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlcXVpcmVkLW1ldGhvZC9cblx0XHRyZXF1aXJlZDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgZGVwZW5kZW5jeSBpcyBtZXRcblx0XHRcdGlmICggIXRoaXMuZGVwZW5kKCBwYXJhbSwgZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiApIHtcblxuXHRcdFx0XHQvLyBDb3VsZCBiZSBhbiBhcnJheSBmb3Igc2VsZWN0LW11bHRpcGxlIG9yIGEgc3RyaW5nLCBib3RoIGFyZSBmaW5lIHRoaXMgd2F5XG5cdFx0XHRcdHZhciB2YWwgPSAkKCBlbGVtZW50ICkudmFsKCk7XG5cdFx0XHRcdHJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKSA+IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID4gMDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lbWFpbC1tZXRob2QvXG5cdFx0ZW1haWw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gRnJvbSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG5cdFx0XHQvLyBSZXRyaWV2ZWQgMjAxNC0wMS0xNFxuXHRcdFx0Ly8gSWYgeW91IGhhdmUgYSBwcm9ibGVtIHdpdGggdGhpcyBpbXBsZW1lbnRhdGlvbiwgcmVwb3J0IGEgYnVnIGFnYWluc3QgdGhlIGFib3ZlIHNwZWNcblx0XHRcdC8vIE9yIHVzZSBjdXN0b20gbWV0aG9kcyB0byBpbXBsZW1lbnQgeW91ciBvd24gZW1haWwgdmFsaWRhdGlvblxuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3VybC1tZXRob2QvXG5cdFx0dXJsOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIENvcHlyaWdodCAoYykgMjAxMC0yMDEzIERpZWdvIFBlcmluaSwgTUlUIGxpY2Vuc2VkXG5cdFx0XHQvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kcGVyaW5pLzcyOTI5NFxuXHRcdFx0Ly8gc2VlIGFsc28gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL2RlbW8vdXJsLXJlZ2V4XG5cdFx0XHQvLyBtb2RpZmllZCB0byBhbGxvdyBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKD86KD86KD86aHR0cHM/fGZ0cCk6KT9cXC9cXC8pKD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPyEoPzoxMHwxMjcpKD86XFwuXFxkezEsM30pezN9KSg/ISg/OjE2OVxcLjI1NHwxOTJcXC4xNjgpKD86XFwuXFxkezEsM30pezJ9KSg/ITE3MlxcLig/OjFbNi05XXwyXFxkfDNbMC0xXSkoPzpcXC5cXGR7MSwzfSl7Mn0pKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswMV1cXGR8MjJbMC0zXSkoPzpcXC4oPzoxP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSl7Mn0oPzpcXC4oPzpbMS05XVxcZD98MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykoPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmMC05XS0qKSpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSspKig/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmZdezIsfSkpLj8pKD86OlxcZHsyLDV9KT8oPzpbLz8jXVxcUyopPyQvaS50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGUtbWV0aG9kL1xuXHRcdGRhdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgIS9JbnZhbGlkfE5hTi8udGVzdCggbmV3IERhdGUoIHZhbHVlICkudG9TdHJpbmcoKSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RhdGVJU08tbWV0aG9kL1xuXHRcdGRhdGVJU086IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15cXGR7NH1bXFwvXFwtXSgwP1sxLTldfDFbMDEyXSlbXFwvXFwtXSgwP1sxLTldfFsxMl1bMC05XXwzWzAxXSkkLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL251bWJlci1tZXRob2QvXG5cdFx0bnVtYmVyOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKD86LT9cXGQrfC0/XFxkezEsM30oPzosXFxkezN9KSspPyg/OlxcLlxcZCspPyQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGlnaXRzLW1ldGhvZC9cblx0XHRkaWdpdHM6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15cXGQrJC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW5sZW5ndGgtbWV0aG9kL1xuXHRcdG1pbmxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoID49IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21heGxlbmd0aC1tZXRob2QvXG5cdFx0bWF4bGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBsZW5ndGggPD0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2VsZW5ndGgtbWV0aG9kL1xuXHRcdHJhbmdlbGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIGxlbmd0aCA+PSBwYXJhbVsgMCBdICYmIGxlbmd0aCA8PSBwYXJhbVsgMSBdICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWluLW1ldGhvZC9cblx0XHRtaW46IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlID49IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21heC1tZXRob2QvXG5cdFx0bWF4OiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWx1ZSA8PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yYW5nZS1tZXRob2QvXG5cdFx0cmFuZ2U6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICggdmFsdWUgPj0gcGFyYW1bIDAgXSAmJiB2YWx1ZSA8PSBwYXJhbVsgMSBdICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvc3RlcC1tZXRob2QvXG5cdFx0c3RlcDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciB0eXBlID0gJCggZWxlbWVudCApLmF0dHIoIFwidHlwZVwiICksXG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IFwiU3RlcCBhdHRyaWJ1dGUgb24gaW5wdXQgdHlwZSBcIiArIHR5cGUgKyBcIiBpcyBub3Qgc3VwcG9ydGVkLlwiLFxuXHRcdFx0XHRzdXBwb3J0ZWRUeXBlcyA9IFsgXCJ0ZXh0XCIsIFwibnVtYmVyXCIsIFwicmFuZ2VcIiBdLFxuXHRcdFx0XHRyZSA9IG5ldyBSZWdFeHAoIFwiXFxcXGJcIiArIHR5cGUgKyBcIlxcXFxiXCIgKSxcblx0XHRcdFx0bm90U3VwcG9ydGVkID0gdHlwZSAmJiAhcmUudGVzdCggc3VwcG9ydGVkVHlwZXMuam9pbigpICksXG5cdFx0XHRcdGRlY2ltYWxQbGFjZXMgPSBmdW5jdGlvbiggbnVtICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaCA9ICggXCJcIiArIG51bSApLm1hdGNoKCAvKD86XFwuKFxcZCspKT8kLyApO1xuXHRcdFx0XHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTnVtYmVyIG9mIGRpZ2l0cyByaWdodCBvZiBkZWNpbWFsIHBvaW50LlxuXHRcdFx0XHRcdHJldHVybiBtYXRjaFsgMSBdID8gbWF0Y2hbIDEgXS5sZW5ndGggOiAwO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0b0ludCA9IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIG51bSAqIE1hdGgucG93KCAxMCwgZGVjaW1hbHMgKSApO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR2YWxpZCA9IHRydWUsXG5cdFx0XHRcdGRlY2ltYWxzO1xuXG5cdFx0XHQvLyBXb3JrcyBvbmx5IGZvciB0ZXh0LCBudW1iZXIgYW5kIHJhbmdlIGlucHV0IHR5cGVzXG5cdFx0XHQvLyBUT0RPIGZpbmQgYSB3YXkgdG8gc3VwcG9ydCBpbnB1dCB0eXBlcyBkYXRlLCBkYXRldGltZSwgZGF0ZXRpbWUtbG9jYWwsIG1vbnRoLCB0aW1lIGFuZCB3ZWVrXG5cdFx0XHRpZiAoIG5vdFN1cHBvcnRlZCApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBlcnJvck1lc3NhZ2UgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVjaW1hbHMgPSBkZWNpbWFsUGxhY2VzKCBwYXJhbSApO1xuXG5cdFx0XHQvLyBWYWx1ZSBjYW4ndCBoYXZlIHRvbyBtYW55IGRlY2ltYWxzXG5cdFx0XHRpZiAoIGRlY2ltYWxQbGFjZXMoIHZhbHVlICkgPiBkZWNpbWFscyB8fCB0b0ludCggdmFsdWUgKSAlIHRvSW50KCBwYXJhbSApICE9PSAwICkge1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbGlkO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VxdWFsVG8tbWV0aG9kL1xuXHRcdGVxdWFsVG86IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cblx0XHRcdC8vIEJpbmQgdG8gdGhlIGJsdXIgZXZlbnQgb2YgdGhlIHRhcmdldCBpbiBvcmRlciB0byByZXZhbGlkYXRlIHdoZW5ldmVyIHRoZSB0YXJnZXQgZmllbGQgaXMgdXBkYXRlZFxuXHRcdFx0dmFyIHRhcmdldCA9ICQoIHBhcmFtICk7XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mub25mb2N1c291dCAmJiB0YXJnZXQubm90KCBcIi52YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0dGFyZ2V0LmFkZENsYXNzKCBcInZhbGlkYXRlLWVxdWFsVG8tYmx1clwiICkub24oIFwiYmx1ci52YWxpZGF0ZS1lcXVhbFRvXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoIGVsZW1lbnQgKS52YWxpZCgpO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHRhcmdldC52YWwoKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yZW1vdGUtbWV0aG9kL1xuXHRcdHJlbW90ZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSwgbWV0aG9kICkge1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0XHRcdH1cblxuXHRcdFx0bWV0aG9kID0gdHlwZW9mIG1ldGhvZCA9PT0gXCJzdHJpbmdcIiAmJiBtZXRob2QgfHwgXCJyZW1vdGVcIjtcblxuXHRcdFx0dmFyIHByZXZpb3VzID0gdGhpcy5wcmV2aW91c1ZhbHVlKCBlbGVtZW50LCBtZXRob2QgKSxcblx0XHRcdFx0dmFsaWRhdG9yLCBkYXRhLCBvcHRpb25EYXRhU3RyaW5nO1xuXG5cdFx0XHRpZiAoICF0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSApIHtcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gPSB7fTtcblx0XHRcdH1cblx0XHRcdHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZSA9IHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZSB8fCB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXVsgbWV0aG9kIF07XG5cdFx0XHR0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXVsgbWV0aG9kIF0gPSBwcmV2aW91cy5tZXNzYWdlO1xuXG5cdFx0XHRwYXJhbSA9IHR5cGVvZiBwYXJhbSA9PT0gXCJzdHJpbmdcIiAmJiB7IHVybDogcGFyYW0gfSB8fCBwYXJhbTtcblx0XHRcdG9wdGlvbkRhdGFTdHJpbmcgPSAkLnBhcmFtKCAkLmV4dGVuZCggeyBkYXRhOiB2YWx1ZSB9LCBwYXJhbS5kYXRhICkgKTtcblx0XHRcdGlmICggcHJldmlvdXMub2xkID09PSBvcHRpb25EYXRhU3RyaW5nICkge1xuXHRcdFx0XHRyZXR1cm4gcHJldmlvdXMudmFsaWQ7XG5cdFx0XHR9XG5cblx0XHRcdHByZXZpb3VzLm9sZCA9IG9wdGlvbkRhdGFTdHJpbmc7XG5cdFx0XHR2YWxpZGF0b3IgPSB0aGlzO1xuXHRcdFx0dGhpcy5zdGFydFJlcXVlc3QoIGVsZW1lbnQgKTtcblx0XHRcdGRhdGEgPSB7fTtcblx0XHRcdGRhdGFbIGVsZW1lbnQubmFtZSBdID0gdmFsdWU7XG5cdFx0XHQkLmFqYXgoICQuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdG1vZGU6IFwiYWJvcnRcIixcblx0XHRcdFx0cG9ydDogXCJ2YWxpZGF0ZVwiICsgZWxlbWVudC5uYW1lLFxuXHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGNvbnRleHQ6IHZhbGlkYXRvci5jdXJyZW50Rm9ybSxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0XHRcdHZhciB2YWxpZCA9IHJlc3BvbnNlID09PSB0cnVlIHx8IHJlc3BvbnNlID09PSBcInRydWVcIixcblx0XHRcdFx0XHRcdGVycm9ycywgbWVzc2FnZSwgc3VibWl0dGVkO1xuXG5cdFx0XHRcdFx0dmFsaWRhdG9yLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXVsgbWV0aG9kIF0gPSBwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2U7XG5cdFx0XHRcdFx0aWYgKCB2YWxpZCApIHtcblx0XHRcdFx0XHRcdHN1Ym1pdHRlZCA9IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnJlc2V0SW50ZXJuYWxzKCk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IudG9IaWRlID0gdmFsaWRhdG9yLmVycm9yc0ZvciggZWxlbWVudCApO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSBzdWJtaXR0ZWQ7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3Iuc3VjY2Vzc0xpc3QucHVzaCggZWxlbWVudCApO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3Iuc2hvd0Vycm9ycygpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlcnJvcnMgPSB7fTtcblx0XHRcdFx0XHRcdG1lc3NhZ2UgPSByZXNwb25zZSB8fCB2YWxpZGF0b3IuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHsgbWV0aG9kOiBtZXRob2QsIHBhcmFtZXRlcnM6IHZhbHVlIH0gKTtcblx0XHRcdFx0XHRcdGVycm9yc1sgZWxlbWVudC5uYW1lIF0gPSBwcmV2aW91cy5tZXNzYWdlID0gbWVzc2FnZTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5pbnZhbGlkWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3Iuc2hvd0Vycm9ycyggZXJyb3JzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHByZXZpb3VzLnZhbGlkID0gdmFsaWQ7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLnN0b3BSZXF1ZXN0KCBlbGVtZW50LCB2YWxpZCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBwYXJhbSApICk7XG5cdFx0XHRyZXR1cm4gXCJwZW5kaW5nXCI7XG5cdFx0fVxuXHR9XG5cbn0gKTtcblxyXG4vLyBBamF4IG1vZGU6IGFib3J0XG4vLyB1c2FnZTogJC5hamF4KHsgbW9kZTogXCJhYm9ydFwiWywgcG9ydDogXCJ1bmlxdWVwb3J0XCJdfSk7XG4vLyBpZiBtb2RlOlwiYWJvcnRcIiBpcyB1c2VkLCB0aGUgcHJldmlvdXMgcmVxdWVzdCBvbiB0aGF0IHBvcnQgKHBvcnQgY2FuIGJlIHVuZGVmaW5lZCkgaXMgYWJvcnRlZCB2aWEgWE1MSHR0cFJlcXVlc3QuYWJvcnQoKVxuXG52YXIgcGVuZGluZ1JlcXVlc3RzID0ge30sXG5cdGFqYXg7XG5cbi8vIFVzZSBhIHByZWZpbHRlciBpZiBhdmFpbGFibGUgKDEuNSspXG5pZiAoICQuYWpheFByZWZpbHRlciApIHtcblx0JC5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggc2V0dGluZ3MsIF8sIHhociApIHtcblx0XHR2YXIgcG9ydCA9IHNldHRpbmdzLnBvcnQ7XG5cdFx0aWYgKCBzZXR0aW5ncy5tb2RlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRpZiAoIHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdICkge1xuXHRcdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXS5hYm9ydCgpO1xuXHRcdFx0fVxuXHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gPSB4aHI7XG5cdFx0fVxuXHR9ICk7XG59IGVsc2Uge1xuXG5cdC8vIFByb3h5IGFqYXhcblx0YWpheCA9ICQuYWpheDtcblx0JC5hamF4ID0gZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdHZhciBtb2RlID0gKCBcIm1vZGVcIiBpbiBzZXR0aW5ncyA/IHNldHRpbmdzIDogJC5hamF4U2V0dGluZ3MgKS5tb2RlLFxuXHRcdFx0cG9ydCA9ICggXCJwb3J0XCIgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncyA6ICQuYWpheFNldHRpbmdzICkucG9ydDtcblx0XHRpZiAoIG1vZGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdGlmICggcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gKSB7XG5cdFx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdLmFib3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSA9IGFqYXguYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0cmV0dXJuIHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdO1xuXHRcdH1cblx0XHRyZXR1cm4gYWpheC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH07XG59XG5yZXR1cm4gJDtcclxufSkpOyIsIiFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHIpe2lmKGlbcl0pcmV0dXJuIGlbcl0uZXhwb3J0czt2YXIgcz1pW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKHMuZXhwb3J0cyxzLHMuZXhwb3J0cyxlKSxzLmw9ITAscy5leHBvcnRzfXZhciBpPXt9O2UubT10LGUuYz1pLGUuaT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sZS5kPWZ1bmN0aW9uKHQsaSxyKXtlLm8odCxpKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsaSx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sZS5uPWZ1bmN0aW9uKHQpe3ZhciBpPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBlLmQoaSxcImFcIixpKSxpfSxlLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGUucD1cIlwiLGUoZS5zPTMpfShbZnVuY3Rpb24odCxlLGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCxlKXtmb3IodmFyIGkgaW4gdCl0Lmhhc093blByb3BlcnR5KGkpJiZlKGksdFtpXSl9dmFyIHM9ITE7dHJ5e3ZhciBvPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7cz0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixudWxsLG8pfWNhdGNoKHQpe310LmV4cG9ydHMuZXZlbnQ9ZnVuY3Rpb24odCxlLGkscil7dmFyIG89XCJvblwiPT1yP1wiYWRkXCI6XCJyZW1vdmVcIjtlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciByPSExOy0xIT1bXCJzY3JvbGxcIixcInRvdWNoc3RhcnRcIixcInRvdWNobW92ZVwiXS5pbmRleE9mKGUpJiZzJiYocj17cGFzc2l2ZTohMH0pLHRbbytcIkV2ZW50TGlzdGVuZXJcIl0oZSxpLHIpfSl9LHQuZXhwb3J0cy5jc3M9ZnVuY3Rpb24odCxlLGkpe3ZhciBzO2lmKHZvaWQgMD09PWkpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiB0LnN0eWxlW2VdO3M9ZX1lbHNlIHM9e30sc1tlXT1pO3IocyxmdW5jdGlvbihlLGkpe3Quc3R5bGVbZV09aX0pfSx0LmV4cG9ydHMuYWRkPWZ1bmN0aW9uKHQsZSl7ZSYmdC5jbGFzc0xpc3QuYWRkKGUpfSx0LmV4cG9ydHMucm09ZnVuY3Rpb24odCxlKXtlJiZ0LmNsYXNzTGlzdC5yZW1vdmUoZSl9LHQuZXhwb3J0cy5oYXM9ZnVuY3Rpb24odCxlKXtyZXR1cm4hIWUmJnQuY2xhc3NMaXN0LmNvbnRhaW5zKGUpfSx0LmV4cG9ydHMuY2xvbmU9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIHIodHx8e30sZnVuY3Rpb24odCxpKXtlW3RdPWl9KSxlfSx0LmV4cG9ydHMucXM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50P3Q6KGV8fGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yKHQpfSx0LmV4cG9ydHMuZWFjaD1yfSxmdW5jdGlvbih0LGUsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXt2YXIgZSxpLHI9dCYmdFswXXx8dCxzPVwic3RyaW5nXCI9PXR5cGVvZiB0fHxyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQsbz1zP3tyb290OnR9Om0odCksbj17ZGlyZWN0aW9uOlwidlwiLGJhck9uQ2xzOlwiX3Njcm9sbGJhclwiLHJlc2l6ZURlYm91bmNlOjAsZXZlbnQ6cCxjc3NHdXJ1OiExLGltcGFjdDpcInNjcm9sbGVyXCIscG9zaXRpb246XCJzdGF0aWNcIn07bz1vfHx7fTtmb3IodmFyIGEgaW4gbiludWxsPT1vW2FdJiYob1thXT1uW2FdKTtlPXRoaXMmJnRoaXMgaW5zdGFuY2VvZiB1LmpRdWVyeSxvLl9jaGFpbj9pPW8ucm9vdDplP28ucm9vdD1pPXRoaXNbMF06aT1iKG8ucm9vdHx8by5zY3JvbGxlcik7dmFyIGg9bChpLG8uZGlyZWN0aW9uKSxmPStoO2lmKG8uaW5kZXg9ZixmPT1mJiZudWxsIT09aCYmeltmXSlyZXR1cm4geltmXTtvLnJvb3QmJm8uc2Nyb2xsZXI/by5zY3JvbGxlcj1iKG8uc2Nyb2xsZXIsaSk6by5zY3JvbGxlcj1pLG8ucm9vdD1pO3ZhciBkPWMobyk7cmV0dXJuIGQuYXV0b1VwZGF0ZSYmZC5hdXRvVXBkYXRlKCksZH1mdW5jdGlvbiBzKHQsZSl7dmFyIGk9MCxyPXQ7Zm9yKHZvaWQgMCE9PXIubGVuZ3RoJiZyIT09dXx8KHI9W3JdKTtyW2ldOyllLmNhbGwodGhpcyxyW2ldLGkpLGkrK31mdW5jdGlvbiBvKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9ZnVuY3Rpb24gbih0LGUsaSl7dC5fZXZlbnRIYW5kbGVycz10Ll9ldmVudEhhbmRsZXJzfHxbe2VsZW1lbnQ6dC5zY3JvbGxlcixoYW5kbGVyOmZ1bmN0aW9uKGUpe3Quc2Nyb2xsKGUpfSx0eXBlOlwic2Nyb2xsXCJ9LHtlbGVtZW50OnQucm9vdCxoYW5kbGVyOmZ1bmN0aW9uKCl7dC51cGRhdGUoKX0sdHlwZTpcInRyYW5zaXRpb25lbmQgYW5pbWF0aW9uZW5kXCJ9LHtlbGVtZW50OnQuc2Nyb2xsZXIsaGFuZGxlcjpmdW5jdGlvbigpe3QudXBkYXRlKCl9LHR5cGU6XCJrZXl1cFwifSx7ZWxlbWVudDp0LmJhcixoYW5kbGVyOmZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LnNlbGVjdGlvbigpLHQuZHJhZy5ub3c9MSx0LmRyYWdnaW5nQ2xzJiZkKHQucm9vdCx0LmRyYWdnaW5nQ2xzKX0sdHlwZTpcInRvdWNoc3RhcnQgbW91c2Vkb3duXCJ9LHtlbGVtZW50OmRvY3VtZW50LGhhbmRsZXI6ZnVuY3Rpb24oKXt0LnNlbGVjdGlvbigxKSx0LmRyYWcubm93PTAsdC5kcmFnZ2luZ0NscyYmZyh0LnJvb3QsdC5kcmFnZ2luZ0Nscyl9LHR5cGU6XCJtb3VzZXVwIGJsdXIgdG91Y2hlbmRcIn0se2VsZW1lbnQ6ZG9jdW1lbnQsaGFuZGxlcjpmdW5jdGlvbihlKXsyIT1lLmJ1dHRvbiYmdC5fcG9zMChlKX0sdHlwZTpcInRvdWNoc3RhcnQgbW91c2Vkb3duXCJ9LHtlbGVtZW50OmRvY3VtZW50LGhhbmRsZXI6ZnVuY3Rpb24oZSl7dC5kcmFnLm5vdyYmdC5kcmFnKGUpfSx0eXBlOlwibW91c2Vtb3ZlIHRvdWNobW92ZVwifSx7ZWxlbWVudDp1LGhhbmRsZXI6ZnVuY3Rpb24oKXt0LnVwZGF0ZSgpfSx0eXBlOlwicmVzaXplXCJ9LHtlbGVtZW50OnQucm9vdCxoYW5kbGVyOmZ1bmN0aW9uKCl7dC51cGRhdGUoKX0sdHlwZTpcInNpemVDaGFuZ2VcIn0se2VsZW1lbnQ6dC5jbGlwcGVyLGhhbmRsZXI6ZnVuY3Rpb24oKXt0LmNsaXBwZXJPblNjcm9sbCgpfSx0eXBlOlwic2Nyb2xsXCJ9XSxzKHQuX2V2ZW50SGFuZGxlcnMsZnVuY3Rpb24odCl7aWYodC5lbGVtZW50KWlmKHQuZWxlbWVudC5sZW5ndGgmJnQuZWxlbWVudCE9PXUpZm9yKHZhciByPTA7cjx0LmVsZW1lbnQubGVuZ3RoO3IrKyllKHQuZWxlbWVudFtyXSx0LnR5cGUsdC5oYW5kbGVyLGkpO2Vsc2UgZSh0LmVsZW1lbnQsdC50eXBlLHQuaGFuZGxlcixpKX0pfWZ1bmN0aW9uIGwodCxlLGkscil7dmFyIHM9XCJkYXRhLWJhcm9uLVwiK2UrXCItaWRcIjtyZXR1cm5cIm9uXCI9PWk/dC5zZXRBdHRyaWJ1dGUocyxyKTpcIm9mZlwiPT1pJiZ0LnJlbW92ZUF0dHJpYnV0ZShzKSx0LmdldEF0dHJpYnV0ZShzKX1mdW5jdGlvbiBjKHQpe3ZhciBlPW5ldyByLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcih0KTtyZXR1cm4gbihlLHQuZXZlbnQsXCJvblwiKSxsKGUucm9vdCx0LmRpcmVjdGlvbixcIm9uXCIsei5sZW5ndGgpLHoucHVzaChlKSxlLnVwZGF0ZSgpLGV9ZnVuY3Rpb24gYSh0KXtpZih0aGlzLmV2ZW50cyYmdGhpcy5ldmVudHNbdF0pZm9yKHZhciBlPTA7ZTx0aGlzLmV2ZW50c1t0XS5sZW5ndGg7ZSsrKXt2YXIgaT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7dGhpcy5ldmVudHNbdF1bZV0uYXBwbHkodGhpcyxpKX19dmFyIGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc3x8KDAsZXZhbCkoXCJ0aGlzXCIpfSgpLHU9aCYmaC53aW5kb3d8fGgscD1pKDApLmV2ZW50LGY9aSgwKS5jc3MsZD1pKDApLmFkZCx2PWkoMCkuaGFzLGc9aSgwKS5ybSxtPWkoMCkuY2xvbmUsYj1pKDApLnFzLHk9cix4PVtcImxlZnRcIixcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiLFwid2lkdGhcIixcImhlaWdodFwiXSx6PVtdLHc9e3Y6e3g6XCJZXCIscG9zOnhbMV0sb3Bwb3M6eFszXSxjcm9zc1Bvczp4WzBdLGNyb3NzT3BQb3M6eFsyXSxzaXplOnhbNV0sY3Jvc3NTaXplOnhbNF0sY3Jvc3NNaW5TaXplOlwibWluLVwiK3hbNF0sY3Jvc3NNYXhTaXplOlwibWF4LVwiK3hbNF0sY2xpZW50OlwiY2xpZW50SGVpZ2h0XCIsY3Jvc3NDbGllbnQ6XCJjbGllbnRXaWR0aFwiLHNjcm9sbEVkZ2U6XCJzY3JvbGxMZWZ0XCIsb2Zmc2V0Olwib2Zmc2V0SGVpZ2h0XCIsY3Jvc3NPZmZzZXQ6XCJvZmZzZXRXaWR0aFwiLG9mZnNldFBvczpcIm9mZnNldFRvcFwiLHNjcm9sbDpcInNjcm9sbFRvcFwiLHNjcm9sbFNpemU6XCJzY3JvbGxIZWlnaHRcIn0saDp7eDpcIlhcIixwb3M6eFswXSxvcHBvczp4WzJdLGNyb3NzUG9zOnhbMV0sY3Jvc3NPcFBvczp4WzNdLHNpemU6eFs0XSxjcm9zc1NpemU6eFs1XSxjcm9zc01pblNpemU6XCJtaW4tXCIreFs1XSxjcm9zc01heFNpemU6XCJtYXgtXCIreFs1XSxjbGllbnQ6XCJjbGllbnRXaWR0aFwiLGNyb3NzQ2xpZW50OlwiY2xpZW50SGVpZ2h0XCIsc2Nyb2xsRWRnZTpcInNjcm9sbFRvcFwiLG9mZnNldDpcIm9mZnNldFdpZHRoXCIsY3Jvc3NPZmZzZXQ6XCJvZmZzZXRIZWlnaHRcIixvZmZzZXRQb3M6XCJvZmZzZXRMZWZ0XCIsc2Nyb2xsOlwic2Nyb2xsTGVmdFwiLHNjcm9sbFNpemU6XCJzY3JvbGxXaWR0aFwifX0sQz0xNSxTPS9bXFxzXFxTXSpNYWNpbnRvc2hbXFxzXFxTXSpcXCkgR2Vja29bXFxzXFxTXSovLF89Uy50ZXN0KHUubmF2aWdhdG9yJiZ1Lm5hdmlnYXRvci51c2VyQWdlbnQpO3IucHJvdG90eXBlPXtfZGVib3VuY2U6ZnVuY3Rpb24odCxlKXt2YXIgaSxyLHM9dGhpcyxuPWZ1bmN0aW9uKCl7aWYocy5fZGlzcG9zZWQpcmV0dXJuIGNsZWFyVGltZW91dChpKSx2b2lkKGk9cz1udWxsKTt2YXIgbD1vKCktcjtsPGUmJmw+PTA/aT1zZXRUaW1lb3V0KG4sZS1sKTooaT1udWxsLHQoKSl9O3JldHVybiBmdW5jdGlvbigpe3I9bygpLGl8fChpPXNldFRpbWVvdXQobixlKSl9fSxjb25zdHJ1Y3RvcjpmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3ZhciBlPXRoaXMuYmFyTWluU2l6ZXx8MjAsaT10O2k+MCYmaTxlJiYoaT1lKSx0aGlzLmJhciYmZih0aGlzLmJhcix0aGlzLm9yaWdpbi5zaXplLHBhcnNlSW50KGksMTApK1wicHhcIil9ZnVuY3Rpb24gaSh0KXtpZih0aGlzLmJhcil7dmFyIGU9Zih0aGlzLmJhcix0aGlzLm9yaWdpbi5wb3MpLGk9K3QrXCJweFwiO2kmJmkhPWUmJmYodGhpcy5iYXIsdGhpcy5vcmlnaW4ucG9zLGkpfX1mdW5jdGlvbiByKCl7cmV0dXJuIHBbdGhpcy5vcmlnaW4uY2xpZW50XS10aGlzLmJhclRvcExpbWl0LXRoaXMuYmFyW3RoaXMub3JpZ2luLm9mZnNldF19ZnVuY3Rpb24gcyh0KXtyZXR1cm4gdCpyLmNhbGwodGhpcykrdGhpcy5iYXJUb3BMaW1pdH1mdW5jdGlvbiBuKHQpe3JldHVybih0LXRoaXMuYmFyVG9wTGltaXQpL3IuY2FsbCh0aGlzKX1mdW5jdGlvbiBsKCl7cmV0dXJuITF9dmFyIGMsaCxwLG0seSx4LHo7aWYoeD1vKCksdGhpcy5wYXJhbXM9dCx0aGlzLmV2ZW50PXQuZXZlbnQsdGhpcy5ldmVudHM9e30sdGhpcy5yb290PXQucm9vdCx0aGlzLnNjcm9sbGVyPWIodC5zY3JvbGxlciksdGhpcy5iYXI9Yih0LmJhcix0aGlzLnJvb3QpLHA9dGhpcy50cmFjaz1iKHQudHJhY2ssdGhpcy5yb290KSwhdGhpcy50cmFjayYmdGhpcy5iYXImJihwPXRoaXMuYmFyLnBhcmVudE5vZGUpLHRoaXMuY2xpcHBlcj10aGlzLnNjcm9sbGVyLnBhcmVudE5vZGUsdGhpcy5kaXJlY3Rpb249dC5kaXJlY3Rpb24sdGhpcy5ydGw9dC5ydGwsdGhpcy5vcmlnaW49d1t0aGlzLmRpcmVjdGlvbl0sdGhpcy5iYXJPbkNscz10LmJhck9uQ2xzLHRoaXMuc2Nyb2xsaW5nQ2xzPXQuc2Nyb2xsaW5nQ2xzLHRoaXMuZHJhZ2dpbmdDbHM9dC5kcmFnZ2luZ0Nscyx0aGlzLmltcGFjdD10LmltcGFjdCx0aGlzLnBvc2l0aW9uPXQucG9zaXRpb24sdGhpcy5ydGw9dC5ydGwsdGhpcy5iYXJUb3BMaW1pdD0wLHRoaXMucmVzaXplRGVib3VuY2U9dC5yZXNpemVEZWJvdW5jZSx0aGlzLmN1cnNvcj1mdW5jdGlvbih0KXtyZXR1cm4gdFtcImNsaWVudFwiK3RoaXMub3JpZ2luLnhdfHwoKCh0Lm9yaWdpbmFsRXZlbnR8fHQpLnRvdWNoZXN8fHt9KVswXXx8e30pW1wicGFnZVwiK3RoaXMub3JpZ2luLnhdfSx0aGlzLnBvcz1mdW5jdGlvbih0KXt2YXIgZT1cInBhZ2VcIit0aGlzLm9yaWdpbi54K1wiT2Zmc2V0XCIsaT10aGlzLnNjcm9sbGVyW2VdP2U6dGhpcy5vcmlnaW4uc2Nyb2xsO3JldHVybiB2b2lkIDAhPT10JiYodGhpcy5zY3JvbGxlcltpXT10KSx0aGlzLnNjcm9sbGVyW2ldfSx0aGlzLnJwb3M9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXS10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF07cmV0dXJuKHQ/dGhpcy5wb3ModCplKTp0aGlzLnBvcygpKS8oZXx8MSl9LHRoaXMuYmFyT249ZnVuY3Rpb24odCl7aWYodGhpcy5iYXJPbkNscyl7dmFyIGU9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdPj10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLnNjcm9sbFNpemVdO3R8fGU/dih0aGlzLnJvb3QsdGhpcy5iYXJPbkNscykmJmcodGhpcy5yb290LHRoaXMuYmFyT25DbHMpOnYodGhpcy5yb290LHRoaXMuYmFyT25DbHMpfHxkKHRoaXMucm9vdCx0aGlzLmJhck9uQ2xzKX19LHRoaXMuX3BvczA9ZnVuY3Rpb24odCl7aD10aGlzLmN1cnNvcih0KS1jfSx0aGlzLmRyYWc9ZnVuY3Rpb24odCl7dmFyIGU9bi5jYWxsKHRoaXMsdGhpcy5jdXJzb3IodCktaCksaT10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLnNjcm9sbFNpemVdLXRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uY2xpZW50XTt0aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLnNjcm9sbF09ZSppfSx0aGlzLnNlbGVjdGlvbj1mdW5jdGlvbih0KXt0aGlzLmV2ZW50KGRvY3VtZW50LFwic2VsZWN0cG9zIHNlbGVjdHN0YXJ0XCIsbCx0P1wib2ZmXCI6XCJvblwiKX0sdGhpcy5yZXNpemU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIHQsaSxyPWUuc2Nyb2xsZXJbZS5vcmlnaW4uY3Jvc3NPZmZzZXRdLHM9ZS5zY3JvbGxlcltlLm9yaWdpbi5jcm9zc0NsaWVudF0sbj0wO2lmKF8/bj1DOnM+MCYmMD09PXImJihyPXMrMTcpLHIpaWYoZS5iYXJPbigpLFwic2Nyb2xsZXJcIj09ZS5pbXBhY3Qpe3ZhciBsPXItcytuO2lmKFwic3RhdGljXCI9PWUucG9zaXRpb24pdD1mKGUuc2Nyb2xsZXIsZS5vcmlnaW4uY3Jvc3NTaXplKSxpPWUuY2xpcHBlcltlLm9yaWdpbi5jcm9zc0NsaWVudF0rbCtcInB4XCIsdCE9aSYmZS5fc2V0Q3Jvc3NTaXplcyhlLnNjcm9sbGVyLGkpO2Vsc2V7dmFyIGM9e30saD1lLnJ0bD9cIkxlZnRcIjpcIlJpZ2h0XCI7XCJoXCI9PWUuZGlyZWN0aW9uJiYoaD1cIkJvdHRvbVwiKSxjW1wicGFkZGluZ1wiK2hdPWwrXCJweFwiLGYoZS5zY3JvbGxlcixjKX19ZWxzZSB0PWYoZS5jbGlwcGVyLGUub3JpZ2luLmNyb3NzU2l6ZSksaT1zK1wicHhcIix0IT1pJiZlLl9zZXRDcm9zc1NpemVzKGUuY2xpcHBlcixpKTtBcnJheS5wcm90b3R5cGUudW5zaGlmdC5jYWxsKGFyZ3VtZW50cyxcInJlc2l6ZVwiKSxhLmFwcGx5KGUsYXJndW1lbnRzKSx4PW8oKX12YXIgZT10aGlzLGk9dm9pZCAwPT09ZS5yZXNpemVEZWJvdW5jZT8zMDA6ZS5yZXNpemVEZWJvdW5jZSxyPTA7bygpLXg8aSYmKGNsZWFyVGltZW91dChtKSxyPWkpLHI/bT1zZXRUaW1lb3V0KHQscik6dCgpfSx0aGlzLnVwZGF0ZVBvc2l0aW9ucz1mdW5jdGlvbih0KXt2YXIgcixvPXRoaXM7by5iYXImJihyPShwW28ub3JpZ2luLmNsaWVudF0tby5iYXJUb3BMaW1pdCkqby5zY3JvbGxlcltvLm9yaWdpbi5jbGllbnRdL28uc2Nyb2xsZXJbby5vcmlnaW4uc2Nyb2xsU2l6ZV0sKHR8fHBhcnNlSW50KHosMTApIT1wYXJzZUludChyLDEwKSkmJihlLmNhbGwobyxyKSx6PXIpLGM9cy5jYWxsKG8sby5ycG9zKCkpLGkuY2FsbChvLGMpKSxBcnJheS5wcm90b3R5cGUudW5zaGlmdC5jYWxsKGFyZ3VtZW50cyxcInNjcm9sbFwiKSxhLmFwcGx5KG8sYXJndW1lbnRzKX0sdGhpcy5zY3JvbGw9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QudXBkYXRlUG9zaXRpb25zKCksdC5zY3JvbGxpbmdDbHMmJih5fHxkKHQucm9vdCx0LnNjcm9sbGluZ0NscyksY2xlYXJUaW1lb3V0KHkpLHk9c2V0VGltZW91dChmdW5jdGlvbigpe2codC5yb290LHQuc2Nyb2xsaW5nQ2xzKSx5PXZvaWQgMH0sMzAwKSl9LHRoaXMuY2xpcHBlck9uU2Nyb2xsPWZ1bmN0aW9uKCl7dGhpcy5ydGw/dGhpcy5jbGlwcGVyW3RoaXMub3JpZ2luLnNjcm9sbEVkZ2VdPXRoaXMuY2xpcHBlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXTp0aGlzLmNsaXBwZXJbdGhpcy5vcmlnaW4uc2Nyb2xsRWRnZV09MH0sdGhpcy5fc2V0Q3Jvc3NTaXplcz1mdW5jdGlvbih0LGUpe3ZhciBpPXt9O2lbdGhpcy5vcmlnaW4uY3Jvc3NTaXplXT1lLGlbdGhpcy5vcmlnaW4uY3Jvc3NNaW5TaXplXT1lLGlbdGhpcy5vcmlnaW4uY3Jvc3NNYXhTaXplXT1lLGYodCxpKX0sdGhpcy5fZHVtYkNzcz1mdW5jdGlvbihlKXtpZighdC5jc3NHdXJ1KXt2YXIgaT1lP1wiaGlkZGVuXCI6bnVsbCxyPWU/XCJub25lXCI6bnVsbDtmKHRoaXMuY2xpcHBlcix7b3ZlcmZsb3c6aSxtc092ZXJmbG93U3R5bGU6cixwb3NpdGlvbjpcInN0YXRpY1wiPT10aGlzLnBvc2l0aW9uP1wiXCI6XCJyZWxhdGl2ZVwifSk7dmFyIHM9ZT9cInNjcm9sbFwiOm51bGwsbz1cInZcIj09dGhpcy5kaXJlY3Rpb24/XCJ5XCI6XCJ4XCIsbj17fTtuW1wib3ZlcmZsb3ctXCIrb109cyxuW1wiYm94LXNpemluZ1wiXT1cImJvcmRlci1ib3hcIixuLm1hcmdpbj1cIjBcIixuLmJvcmRlcj1cIjBcIixcImFic29sdXRlXCI9PXRoaXMucG9zaXRpb24mJihuLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixuLnRvcD1cIjBcIixcImhcIj09dGhpcy5kaXJlY3Rpb24/bi5sZWZ0PW4ucmlnaHQ9XCIwXCI6KG4uYm90dG9tPVwiMFwiLG4ucmlnaHQ9dGhpcy5ydGw/XCIwXCI6XCJcIixuLmxlZnQ9dGhpcy5ydGw/XCJcIjpcIjBcIikpLGYodGhpcy5zY3JvbGxlcixuKX19LHRoaXMuX2R1bWJDc3MoITApLF8pe3ZhciBTPVwicGFkZGluZ1JpZ2h0XCIsTz17fSxUPXUuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnNjcm9sbGVyKVtbU11dO1wiaFwiPT10LmRpcmVjdGlvbj9TPVwicGFkZGluZ0JvdHRvbVwiOnQucnRsJiYoUz1cInBhZGRpbmdMZWZ0XCIpO3ZhciBMPXBhcnNlSW50KFQsMTApO0whPUwmJihMPTApLE9bU109QytMK1wicHhcIixmKHRoaXMuc2Nyb2xsZXIsTyl9cmV0dXJuIHRoaXN9LHVwZGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gYS5jYWxsKHRoaXMsXCJ1cGRcIix0KSx0aGlzLnJlc2l6ZSgxKSx0aGlzLnVwZGF0ZVBvc2l0aW9ucygxKSx0aGlzfSxkaXNwb3NlOmZ1bmN0aW9uKCl7bih0aGlzLHRoaXMuZXZlbnQsXCJvZmZcIiksbCh0aGlzLnJvb3QsdGhpcy5wYXJhbXMuZGlyZWN0aW9uLFwib2ZmXCIpLFwidlwiPT10aGlzLnBhcmFtcy5kaXJlY3Rpb24/dGhpcy5fc2V0Q3Jvc3NTaXplcyh0aGlzLnNjcm9sbGVyLFwiXCIpOnRoaXMuX3NldENyb3NzU2l6ZXModGhpcy5jbGlwcGVyLFwiXCIpLHRoaXMuX2R1bWJDc3MoITEpLHRoaXMuYmFyT24oITApLGEuY2FsbCh0aGlzLFwiZGlzcG9zZVwiKSx6W3RoaXMucGFyYW1zLmluZGV4XT1udWxsLHRoaXMucGFyYW1zPW51bGwsdGhpcy5fZGlzcG9zZWQ9ITB9LG9uOmZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIHI9dC5zcGxpdChcIiBcIikscz0wO3M8ci5sZW5ndGg7cysrKVwiaW5pdFwiPT1yW3NdP2UuY2FsbCh0aGlzLGkpOih0aGlzLmV2ZW50c1tyW3NdXT10aGlzLmV2ZW50c1tyW3NdXXx8W10sdGhpcy5ldmVudHNbcltzXV0ucHVzaChmdW5jdGlvbih0KXtlLmNhbGwodGhpcyx0fHxpKX0pKX0sYmFyb246ZnVuY3Rpb24odCl7cmV0dXJuIHQucm9vdD10aGlzLnBhcmFtcy5yb290LHQuc2Nyb2xsZXI9dGhpcy5wYXJhbXMuc2Nyb2xsZXIsdC5kaXJlY3Rpb249XCJ2XCI9PXRoaXMucGFyYW1zLmRpcmVjdGlvbj9cImhcIjpcInZcIix0Ll9jaGFpbj0hMCxyKHQpfX0sci5wcm90b3R5cGUuY29uc3RydWN0b3IucHJvdG90eXBlPXIucHJvdG90eXBlLHIubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB1LmJhcm9uPXkscn0sci52ZXJzaW9uPVwiMy4wLjFcIixyLnByb3RvdHlwZS5hdXRvVXBkYXRlPWkoMikodSksci5wcm90b3R5cGUuZml4PWkoNSksci5wcm90b3R5cGUuY29udHJvbHM9aSg0KSx0LmV4cG9ydHM9cn0sZnVuY3Rpb24odCxlLGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCl7ZnVuY3Rpb24gZSgpe28ucm9vdFtvLm9yaWdpbi5vZmZzZXRdP3IoKTppKCl9ZnVuY3Rpb24gaSgpe3N8fChzPXNldEludGVydmFsKGZ1bmN0aW9uKCl7by5yb290W28ub3JpZ2luLm9mZnNldF0mJihyKCksby51cGRhdGUoKSl9LDMwMCkpfWZ1bmN0aW9uIHIoKXtjbGVhckludGVydmFsKHMpLHM9bnVsbH12YXIgcyxvPXRoaXM7aWYoIXRoaXMuX2F1KXt2YXIgbj1vLl9kZWJvdW5jZShmdW5jdGlvbigpe28udXBkYXRlKCl9LDMwMCk7dGhpcy5fb2JzZXJ2ZXI9bmV3IHQoZnVuY3Rpb24oKXtlKCksby51cGRhdGUoKSxuKCl9KSx0aGlzLm9uKFwiaW5pdFwiLGZ1bmN0aW9uKCl7by5fb2JzZXJ2ZXIub2JzZXJ2ZShvLnJvb3Qse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwLGNoYXJhY3RlckRhdGE6ITB9KSxlKCl9KSx0aGlzLm9uKFwiZGlzcG9zZVwiLGZ1bmN0aW9uKCl7by5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHIoKSxkZWxldGUgby5fb2JzZXJ2ZXJ9KSx0aGlzLl9hdT0hMH19dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXQuTXV0YXRpb25PYnNlcnZlcnx8dC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyfHx0Lk1vek11dGF0aW9uT2JzZXJ2ZXJ8fG51bGw7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGU/KHIuY2FsbCh0aGlzLGUpLHRoaXMpOnRoaXN9fX0sZnVuY3Rpb24odCxlLGkpe3ZhciByPWkoMSk7d2luZG93LmJhcm9uPXIsd2luZG93LmpRdWVyeSYmd2luZG93LmpRdWVyeS5mbiYmKHdpbmRvdy5qUXVlcnkuZm4uYmFyb249cil9LGZ1bmN0aW9uKHQsZSxpKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1pKDApLnFzO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZSxpLHMsbyxuLGw9dGhpcztvPXQuc2NyZWVufHwuOSx0LmZvcndhcmQmJihlPXIodC5mb3J3YXJkLHRoaXMuY2xpcHBlciksbj17ZWxlbWVudDplLGhhbmRsZXI6ZnVuY3Rpb24oKXt2YXIgZT1sLnBvcygpKyh0LmRlbHRhfHwzMCk7bC5wb3MoZSl9LHR5cGU6XCJjbGlja1wifSx0aGlzLl9ldmVudEhhbmRsZXJzLnB1c2gobiksdGhpcy5ldmVudChuLmVsZW1lbnQsbi50eXBlLG4uaGFuZGxlcixcIm9uXCIpKSx0LmJhY2t3YXJkJiYoaT1yKHQuYmFja3dhcmQsdGhpcy5jbGlwcGVyKSxuPXtlbGVtZW50OmksaGFuZGxlcjpmdW5jdGlvbigpe3ZhciBlPWwucG9zKCktKHQuZGVsdGF8fDMwKTtsLnBvcyhlKX0sdHlwZTpcImNsaWNrXCJ9LHRoaXMuX2V2ZW50SGFuZGxlcnMucHVzaChuKSx0aGlzLmV2ZW50KG4uZWxlbWVudCxuLnR5cGUsbi5oYW5kbGVyLFwib25cIikpLHQudHJhY2smJihzPSEwPT09dC50cmFjaz90aGlzLnRyYWNrOnIodC50cmFjayx0aGlzLmNsaXBwZXIpKSYmKG49e2VsZW1lbnQ6cyxoYW5kbGVyOmZ1bmN0aW9uKHQpe2lmKHQudGFyZ2V0PT1zKXt2YXIgZT10W1wib2Zmc2V0XCIrbC5vcmlnaW4ueF0saT1sLmJhcltsLm9yaWdpbi5vZmZzZXRQb3NdLHI9MDtlPGk/cj0tMTplPmkrbC5iYXJbbC5vcmlnaW4ub2Zmc2V0XSYmKHI9MSk7dmFyIG49bC5wb3MoKStyKm8qbC5zY3JvbGxlcltsLm9yaWdpbi5jbGllbnRdO2wucG9zKG4pfX0sdHlwZTpcIm1vdXNlZG93blwifSx0aGlzLl9ldmVudEhhbmRsZXJzLnB1c2gobiksdGhpcy5ldmVudChuLmVsZW1lbnQsbi50eXBlLG4uaGFuZGxlcixcIm9uXCIpKX19LGZ1bmN0aW9uKHQsZSxpKXtcInVzZSBzdHJpY3RcIjt2YXIgcj0oaSg2KSxpKDApLmNzcykscz1pKDApLmFkZCxvPWkoMCkucm07dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxlLGkpe3ZhciBuPWUsaD0xPT1pP1wicG9zXCI6XCJvcHBvc1wiO2M8KGEubWluVmlld3x8MCkmJihuPXZvaWQgMCkscihsW3RdLHRoaXMub3JpZ2luLnBvcyxcIlwiKSxyKGxbdF0sdGhpcy5vcmlnaW4ub3Bwb3MsXCJcIiksbyhsW3RdLGEub3V0c2lkZSksdm9pZCAwIT09biYmKG4rPVwicHhcIixyKGxbdF0sdGhpcy5vcmlnaW5baF0sbikscyhsW3RdLGEub3V0c2lkZSkpfWZ1bmN0aW9uIGkodCl7dHJ5e3ZhciBlPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiV2hlZWxFdmVudFwiKTtlLmluaXRXZWJLaXRXaGVlbEV2ZW50KHQub3JpZ2luYWxFdmVudC53aGVlbERlbHRhWCx0Lm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YVkpLGYuZGlzcGF0Y2hFdmVudChlKSx0LnByZXZlbnREZWZhdWx0KCl9Y2F0Y2godCl7fX1mdW5jdGlvbiBuKHQpe3ZhciBlO2Zvcih2YXIgcyBpbiB0KWFbc109dFtzXTtpZihhLmVsZW1lbnRzIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ/bD1bYS5lbGVtZW50c106XCJzdHJpbmdcIj09dHlwZW9mIGEuZWxlbWVudHM/bD10aGlzLnNjcm9sbGVyLnF1ZXJ5U2VsZWN0b3JBbGwoYS5lbGVtZW50cyk6YS5lbGVtZW50cyYmYS5lbGVtZW50c1swXWluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJihsPWEuZWxlbWVudHMpLGwpe2M9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdO2Zvcih2YXIgbz0wO288bC5sZW5ndGg7bysrKWU9e30sZVt0aGlzLm9yaWdpbi5zaXplXT1sW29dW3RoaXMub3JpZ2luLm9mZnNldF0rXCJweFwiLGxbb10ucGFyZW50Tm9kZSE9PXRoaXMuc2Nyb2xsZXImJnIobFtvXS5wYXJlbnROb2RlLGUpLGU9e30sZVt0aGlzLm9yaWdpbi5jcm9zc1NpemVdPWxbb10ucGFyZW50Tm9kZVt0aGlzLm9yaWdpbi5jcm9zc0NsaWVudF0rXCJweFwiLHIobFtvXSxlKSxjLT1sW29dW3RoaXMub3JpZ2luLm9mZnNldF0scFtvXT1sW29dLnBhcmVudE5vZGVbdGhpcy5vcmlnaW4ub2Zmc2V0UG9zXSxoW29dPWhbby0xXXx8MCx1W29dPXVbby0xXXx8TWF0aC5taW4ocFtvXSwwKSxsW28tMV0mJihoW29dKz1sW28tMV1bdGhpcy5vcmlnaW4ub2Zmc2V0XSx1W29dKz1sW28tMV1bdGhpcy5vcmlnaW4ub2Zmc2V0XSksMD09byYmMD09cFtvXXx8KHRoaXMuZXZlbnQobFtvXSxcIm1vdXNld2hlZWxcIixpLFwib2ZmXCIpLHRoaXMuZXZlbnQobFtvXSxcIm1vdXNld2hlZWxcIixpKSk7YS5saW1pdGVyJiZsWzBdJiYodGhpcy50cmFjayYmdGhpcy50cmFjayE9dGhpcy5zY3JvbGxlcj8oZT17fSxlW3RoaXMub3JpZ2luLnBvc109bFswXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLm9mZnNldF0rXCJweFwiLHIodGhpcy50cmFjayxlKSk6dGhpcy5iYXJUb3BMaW1pdD1sWzBdLnBhcmVudE5vZGVbdGhpcy5vcmlnaW4ub2Zmc2V0XSx0aGlzLnNjcm9sbCgpKSwhMT09PWEubGltaXRlciYmKHRoaXMuYmFyVG9wTGltaXQ9MCl9dmFyIG49e2VsZW1lbnQ6bCxoYW5kbGVyOmZ1bmN0aW9uKCl7Zm9yKHZhciB0LGU9dGhpcy5wYXJlbnROb2RlLGk9ZS5vZmZzZXRUb3Ascj0wO3I8bC5sZW5ndGg7cisrKWxbcl09PT10aGlzJiYodD1yKTt2YXIgcz1pLWhbdF07YS5zY3JvbGw/YS5zY3JvbGwoe3gxOnYuc2Nyb2xsZXIuc2Nyb2xsVG9wLHgyOnN9KTp2LnNjcm9sbGVyLnNjcm9sbFRvcD1zfSx0eXBlOlwiY2xpY2tcIn07aWYoYS5jbGlja2FibGUpe3RoaXMuX2V2ZW50SGFuZGxlcnMucHVzaChuKTtmb3IodmFyIGY9MDtmPG4uZWxlbWVudC5sZW5ndGg7ZisrKWQobi5lbGVtZW50W2ZdLG4udHlwZSxuLmhhbmRsZXIsXCJvblwiKX19dmFyIGwsYyxhPXtvdXRzaWRlOlwiXCIsaW5zaWRlOlwiXCIsYmVmb3JlOlwiXCIsYWZ0ZXI6XCJcIixwYXN0OlwiXCIsZnV0dXJlOlwiXCIscmFkaXVzOjAsbWluVmlldzowfSxoPVtdLHU9W10scD1bXSxmPXRoaXMuc2Nyb2xsZXIsZD10aGlzLmV2ZW50LHY9dGhpczt0aGlzLm9uKFwiaW5pdFwiLG4sdCk7dmFyIGc9W10sbT1bXTtyZXR1cm4gdGhpcy5vbihcImluaXQgc2Nyb2xsXCIsZnVuY3Rpb24oKXt2YXIgdCxpLHIsbjtpZihsKXt2YXIgZjtmb3Iobj0wO248bC5sZW5ndGg7bisrKXQ9MCxwW25dLXRoaXMucG9zKCk8dVtuXSthLnJhZGl1cz8odD0xLGk9aFtuXSk6cFtuXS10aGlzLnBvcygpPnVbbl0rYy1hLnJhZGl1cz8odD0yLGk9dGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdLWxbbl1bdGhpcy5vcmlnaW4ub2Zmc2V0XS1oW25dLWMpOih0PTMsaT12b2lkIDApLHI9ITEsKHBbbl0tdGhpcy5wb3MoKTx1W25dfHxwW25dLXRoaXMucG9zKCk+dVtuXStjKSYmKHI9ITApLHQ9PWdbbl0mJnI9PW1bbl18fChlLmNhbGwodGhpcyxuLGksdCksZ1tuXT10LG1bbl09cixmPSEwKTtpZihmKWZvcihuPTA7bjxsLmxlbmd0aDtuKyspMT09Z1tuXSYmYS5wYXN0JiYocyhsW25dLGEucGFzdCksbyhsW25dLGEuZnV0dXJlKSksMj09Z1tuXSYmYS5mdXR1cmUmJihzKGxbbl0sYS5mdXR1cmUpLG8obFtuXSxhLnBhc3QpKSwzPT1nW25dJiYobyhsW25dLGEucGFzdCksbyhsW25dLGEuZnV0dXJlKSxzKGxbbl0sYS5pbnNpZGUpKSxnW25dIT1nW24rMV0mJjE9PWdbbl0/KHMobFtuXSxhLmJlZm9yZSksbyhsW25dLGEuYWZ0ZXIpKTpnW25dIT1nW24tMV0mJjI9PWdbbl0/KHMobFtuXSxhLmFmdGVyKSxvKGxbbl0sYS5iZWZvcmUpKToobyhsW25dLGEuYmVmb3JlKSxvKGxbbl0sYS5hZnRlcikpLGEuZ3JhZCYmKG1bbl0/cyhsW25dLGEuZ3JhZCk6byhsW25dLGEuZ3JhZCkpfX0pLHRoaXMub24oXCJyZXNpemUgdXBkXCIsZnVuY3Rpb24odCl7bi5jYWxsKHRoaXMsdCYmdC5maXgpfSksdGhpc319LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxpKXt2YXIgcj1jb25zb2xlW3RdfHxjb25zb2xlLmxvZyxzPVtcIkJhcm9uOiBcIitlLGldO0Z1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHIsY29uc29sZSxzKX19XSk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkc2xpZGVyID0gJChcIi5qcy1ldmVudHMtc2xpZGVyXCIpO1xuXG4gICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICBhcHBlbmRBcnJvd3M6IFwiLmV2ZW50cy1ibG9jay1zbGlkZXItYXJyb3dzXCIsXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMDgwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzYwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oICQgKSB7XG4gICAgJC5mbi5mb3JtQWpheCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyICRmb3JtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gJGZvcm0uYXR0cignYWN0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9ICRmb3JtLmF0dHIoJ21ldGhvZCcpLFxuICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgkZm9ybVswXSksXG4gICAgICAgICAgICAgICAgICAgIGZvcm1PdmVybGF5ID0gJGZvcm0uZGF0YSgnZm9ybS1hamF4LW92ZXJsYXknKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbiA9ICRmb3JtLmlzKCdbZGF0YS12YWxpZGF0ZV0nKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uICYmICRmb3JtLnZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0Rm9ybSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0Rm9ybSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dPdmVybGF5KCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybU92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybU92ZXJsYXkpLmFkZENsYXNzKCdhY3RpdmUnKS5zcGluKCdsYXJnZScsICcjMDAwJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5Jykuc3BpbignbGFyZ2UnLCAnIzAwMCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaGlkZU92ZXJsYXkoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtT3ZlcmxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChmb3JtT3ZlcmxheSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLnNwaW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnNwaW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VibWl0Rm9ybSgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd092ZXJsYXkoKTtcblxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbidcbiAgICAgICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm1bMF0ucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0U2lkZU1vZGFsKGRhdGEubWVzc2FnZSwgJ21lc3NhZ2UtbW9kYWwnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhICYmIGRhdGEubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb3JtLmZpbmQoJy5qcy1mb3JtLW1lc3NhZ2VzJykuYWRkQ2xhc3MoJ2FjdGl2ZScpLmh0bWwoZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZmllbGQgPSAkKCdbbmFtZT1cIicgKyBlcnJvci5uYW1lICsgJ1wiXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRmaWVsZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmllbGQuYWRkQ2xhc3MoJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpZWxkLnNpYmxpbmdzKCcuZm9ybS1sYWJlbCcpLmFkZENsYXNzKCdmb3JtLWxhYmVsLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpZWxkLnNpYmxpbmdzKCcuZm9ybS1jb250cm9sLWVycm9ycycpLmFkZENsYXNzKCdhY3RpdmUnKS5odG1sKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEucmVkaXJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRhdGEucmVkaXJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEucmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDQtNCw0L3QvdGL0YUuINCf0L7QttCw0LvRg9C50YHRgtCwLCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQtdGJ0ZEg0YDQsNC3LicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanFYSFIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZU92ZXJsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0oIGpRdWVyeSApKTsiLCIoZnVuY3Rpb24oICQgKSB7XG4gICAgdmFyIGlzX3N1cHBvcnRlZF9icm93c2VyID0gISF3aW5kb3cuRmlsZTtcblxuICAgIHZhciBmaWxlU2l6ZVRvQnl0ZXMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXCJCXCIsIFwiS0JcIiwgXCJNQlwiLCBcIkdCXCIsIFwiVEJcIl07XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzaXplLCB1bml0KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXhfb2ZfdW5pdCA9IHVuaXRzLmluZGV4T2YodW5pdCksXG4gICAgICAgICAgICAgICAgY292ZXJ0ZWRfc2l6ZTtcblxuICAgICAgICAgICAgaWYgKGluZGV4X29mX3VuaXQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY292ZXJ0ZWRfc2l6ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaW5kZXhfb2ZfdW5pdCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSAqPSAxMDI0O1xuICAgICAgICAgICAgICAgICAgICBpbmRleF9vZl91bml0IC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvdmVydGVkX3NpemUgPSBzaXplO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY292ZXJ0ZWRfc2l6ZTtcbiAgICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIGZvcm1hdHRlciA9ICQudmFsaWRhdG9yLmZvcm1hdDtcblxuICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcImRhdGVSYW5nZVwiLCBmdW5jdGlvbih2YWx1ZSwgZWwsIHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGRhdGVGb3JtYXQgPSAnWVlZWS5NTS5ERCcsXG4gICAgICAgICAgICAgICAgZGF0ZVJhbmdlID0gcGFyYW1zLnNwbGl0KCcsJyksXG4gICAgICAgICAgICAgICAgZGF0ZUZyb20gPSBkYXRlUmFuZ2VbMF0uc3BsaXQoJy4nKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wRnJvbSA9IG1vbWVudChkYXRlRnJvbSwgZGF0ZUZvcm1hdCkudW5peCgpLFxuICAgICAgICAgICAgICAgIGRhdGVUbyA9IGRhdGVSYW5nZVsxXS5zcGxpdCgnLicpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBUbyA9IG1vbWVudChkYXRlVG8sIGRhdGVGb3JtYXQpLnVuaXgoKSxcbiAgICAgICAgICAgICAgICBkYXRlVmFsdWUgPSB2YWx1ZS5zcGxpdCgnLicpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBWYWx1ZSA9IG1vbWVudChkYXRlVmFsdWUsIGRhdGVGb3JtYXQpLnVuaXgoKTtcblxuICAgICAgICAgICAgcmV0dXJuICh0aW1lc3RhbXBGcm9tIDw9IHRpbWVzdGFtcFZhbHVlICYmIHRpbWVzdGFtcFZhbHVlIDw9IHRpbWVzdGFtcFRvKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoXCJtYXhGaWxlU2l6ZVwiLCBmdW5jdGlvbiAodmFsdWUsIGVsLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBmaWxlcyxcbiAgICAgICAgICAgICAgICB1bml0ID0gcGFyYW1zLnVuaXQgfHwgXCJLQlwiLFxuICAgICAgICAgICAgICAgIHNpemUgPSBwYXJhbXMuc2l6ZSB8fCAxMDAsXG4gICAgICAgICAgICAgICAgbWF4X2ZpbGVfc2l6ZSA9IGZpbGVTaXplVG9CeXRlcyhzaXplLCB1bml0KSxcbiAgICAgICAgICAgICAgICBpc192YWxpZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoIWlzX3N1cHBvcnRlZF9icm93c2VyIHx8IHRoaXMub3B0aW9uYWwoZWwpKSB7XG4gICAgICAgICAgICAgICAgaXNfdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWxlcyA9IGVsLmZpbGVzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNfdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpc192YWxpZCA9IGZpbGVzWzBdLnNpemUgPD0gbWF4X2ZpbGVfc2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpc192YWxpZDtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gKHBhcmFtcywgZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIoXG4gICAgICAgICAgICAgICAgXCJGaWxlIGNhbm5vdCBiZSBsYXJnZXIgdGhhbiB7MH17MX0uXCIsXG4gICAgICAgICAgICAgICAgW3BhcmFtcy5zaXplIHx8IDEwMCwgcGFyYW1zLnVuaXQgfHwgXCJLQlwiXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAkLnZhbGlkYXRvci5tZXRob2RzLmVtYWlsID0gZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25hbChlbGVtZW50KSB8fCAvLitALitcXC4uezIsfS9pLnRlc3QodmFsdWUpO1xuICAgIH07XG5cbiAgICAkLmZuLmZvcm1WYWxpZGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykudmFsaWRhdGUoe1xuICAgICAgICAgICAgICAgIGVycm9yUGxhY2VtZW50OiBmdW5jdGlvbihlcnJvciwgZWxlbWVudCkge30sXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0OiBmdW5jdGlvbihlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY2xvc2VzdCgnLmZvcm0tZ3JvdXAnKS5maW5kKCcuZm9ybS1sYWJlbCcpLmFkZENsYXNzKCdmb3JtLWxhYmVsLWVycm9yJykucmVtb3ZlQ2xhc3MoJ2Zvcm0tbGFiZWwtdmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jbG9zZXN0KCcuZm9ybS1jb250cm9sJykuYWRkQ2xhc3MoZXJyb3JDbGFzcykucmVtb3ZlQ2xhc3ModmFsaWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoZXJyb3JDbGFzcykucmVtb3ZlQ2xhc3ModmFsaWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1bmhpZ2hsaWdodDogZnVuY3Rpb24oZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNsb3Nlc3QoJy5mb3JtLWdyb3VwJykuZmluZCgnLmZvcm0tbGFiZWwnKS5yZW1vdmVDbGFzcygnZm9ybS1sYWJlbC1lcnJvcicpLmFkZENsYXNzKCdmb3JtLWxhYmVsLXZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY2xvc2VzdCgnLmZvcm0tY29udHJvbCcpLnJlbW92ZUNsYXNzKGVycm9yQ2xhc3MpLmFkZENsYXNzKHZhbGlkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKGVycm9yQ2xhc3MpLmFkZENsYXNzKHZhbGlkQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSggalF1ZXJ5ICkpOyIsIihmdW5jdGlvbiggJCApIHtcbiAgICAkLmZuLm1hc2tlZGlucHV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtYXNrID0gJCh0aGlzKS5kYXRhKCdtYXNrZWQtaW5wdXQnKSxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9ICQodGhpcykuZGF0YSgnbWFza2VkLWlucHV0LXBsYWNlaG9sZGVyJyksXG4gICAgICAgICAgICAgICAgY2xlYXJJZk5vdE1hdGNoID0gJCh0aGlzKS5pcygnW2RhdGEtbWFza2VkLWlucHV0LWNsZWFyaWZub3RtYXRjaF0nKTtcblxuICAgICAgICAgICAgJCh0aGlzKS5tYXNrKG1hc2ssIHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgY2xlYXJJZk5vdE1hdGNoOiBjbGVhcklmTm90TWF0Y2hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSggalF1ZXJ5ICkpOyIsIihmdW5jdGlvbigpIHtcbiAgICB2YXIgJHNsaWRlciA9ICQoXCIuanMtbWVkaWEtc2xpZGVyXCIpO1xuXG4gICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgIHJvd3M6IDIsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA0LFxuICAgICAgICBhcHBlbmRBcnJvd3M6IFwiLm1lZGlhLWJsb2NrLWhlYWRlci1hcnJvd3NcIixcbiAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwODAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzAwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDYwMCkge1xuICAgICAgICAgICAgJHNsaWRlci5zbGljaygnc2xpY2tGaWx0ZXInLCBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPCAxMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzaXplKCk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICB2YXIgJHNsaWRlciA9ICQoXCIuanMtbmV3cy1zbGlkZXJcIik7XG5cbiAgICAkc2xpZGVyLnNsaWNrKHtcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgcm93czogMixcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDQsXG4gICAgICAgIGFwcGVuZEFycm93czogXCIubmV3cy1ibG9jay1oZWFkZXItYXJyb3dzXCIsXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMDgwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDkwMCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1MjAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA1MjApIHtcbiAgICAgICAgICAgICRzbGlkZXIuc2xpY2soJ3NsaWNrRmlsdGVyJywgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpIDwgMTA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2l6ZSgpO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gaGlkZUV2ZW50KGUsIGNsb3Nlc3RFbCwgaGlkZUZ1bmMpIHtcbiAgICAgICAgaWYoISQoZS50YXJnZXQpLmNsb3Nlc3QoY2xvc2VzdEVsKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhpZGVGdW5jKCk7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2NsaWNrJywgJ2JvZHknLCBoaWRlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG9mZmNhbnZhc092ZXJsYXkgPSAnI29mZmNhbnZhcycsXG4gICAgICAgIG9mZmNhbnZhcyA9ICcjb2ZmY2FudmFzID4gLm1haW4tb2ZmY2FudmFzJztcblxuICAgIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICQoJy5qcy1vZmZjYW52YXMnKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICQob2ZmY2FudmFzT3ZlcmxheSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdib2R5JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGhpZGVFdmVudChlLCBvZmZjYW52YXMsIGhpZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICAkKCcuanMtb2ZmY2FudmFzLCAnICsgb2ZmY2FudmFzT3ZlcmxheSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cblxuICAgICQoJy5qcy1vZmZjYW52YXMnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLyppZiAoICQob2ZmY2FudmFzT3ZlcmxheSkubGVuZ3RoICkge1xuICAgICAgICB2YXIgb2ZmY2FudmFzSGFtbWVyID0gbmV3IEhhbW1lcigkKG9mZmNhbnZhc092ZXJsYXkpWzBdKTtcbiAgICAgICAgb2ZmY2FudmFzSGFtbWVyLm9uKFwic3dpcGVsZWZ0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgfSovXG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICB2YXIgJHNsaWRlciA9ICQoXCIuanMtcGFydG5lcnMtc2xpZGVyXCIpO1xuICAgICRzbGlkZXIuc2xpY2soe1xuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxuICAgICAgICByb3dzOiAyLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogNCxcbiAgICAgICAgYXBwZW5kQXJyb3dzOiBcIi5wYXJ0bmVycy1ibG9jay1oZWFkZXItYXJyb3dzXCIsXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMDgwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDcwMCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1MjAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA1MjApIHtcbiAgICAgICAgICAgICRzbGlkZXIuc2xpY2soJ3NsaWNrRmlsdGVyJywgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpIDwgMTA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2l6ZSgpO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRzbGlkZXIgPSAkKFwiLmpzLXByb2dyYW1zLXNsaWRlclwiKTtcbiAgICAkc2xpZGVyLnNsaWNrKHtcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXG4gICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNTgwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNTgwKSB7XG4gICAgICAgICAgICAkc2xpZGVyLnNsaWNrKCdzbGlja0ZpbHRlcicsIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA8IDEwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNpemUoKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICQoXCIuanMtc3BlYWtlcnMtc2xpZGVyXCIpLnNsaWNrKHtcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgcm93czogMixcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDQsXG4gICAgICAgIGFwcGVuZEFycm93czogXCIuc3BlYWtlcnMtYmxvY2staGVhZGVyLWFycm93c1wiLFxuICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNsaWNrLWFycm93IHNsaWNrLWFycm93LXdoaXRlIHNsaWNrLXByZXZcIj48L2J1dHRvbj4nLFxuICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNsaWNrLWFycm93IHNsaWNrLWFycm93LXdoaXRlIHNsaWNrLW5leHRcIj48L2J1dHRvbj4nLFxuICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTA4MCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3MDAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNTIwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkc2xpZGVyID0gJChcIi5qcy1zdW1taXRzLXNsaWRlclwiKTtcblxuICAgICRzbGlkZXIub24oJ2luaXQnLCBmdW5jdGlvbiAoZSwgc2xpY2spIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBMZXQncyBnbyB0byBsYXN0IHBvc3NpYmxlIHNsaWRlIPCfkqlcbiAgICAgICAgICAgIHNsaWNrLnNsaWNrR29Ubyg5OTksIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAkc2xpZGVyLm9uKCdiZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBzbGljaywgY3VycmVudFNsaWRlLCBuZXh0U2xpZGUpIHtcbiAgICAgICAgdmFyICRuZXh0U2xpZGUgPSAkKHNsaWNrLiRzbGlkZXNbbmV4dFNsaWRlXSkuZmluZCgnW2RhdGEtc3VtbWl0cy15ZWFyXScpO1xuXG4gICAgICAgIHZhciB5ZWFyID0gJG5leHRTbGlkZS5kYXRhKCdzdW1taXRzLXllYXInKTtcblxuICAgICAgICBpZiAoeWVhcikge1xuICAgICAgICAgICAgJCgnLmpzLXN1bW1pdHMtc2xpZGVyLWN1cnJlbnQteWVhcicpLmh0bWwoeWVhcik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICRzbGlkZXIuc2xpY2soe1xuICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIGFwcGVuZEFycm93czogXCIuc3VtbWl0cy1ibG9jay1oZWFkZXItYXJyb3dzXCJcbiAgICB9KTtcbn0pKCk7IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgJChcIi5qcy1zbGljay1zbGlkZXJcIikuc2xpY2soKTtcbiAgICAkKCdbZGF0YS1tYXNrZWQtaW5wdXRdJykubWFza2VkaW5wdXQoKTtcbiAgICAkKCdbZGF0YS12YWxpZGF0ZV0nKS5mb3JtVmFsaWRhdGlvbigpO1xuXG4gICAgJCgnLmpzLXNtb290aC1zY3JvbGwnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgJCh0aGlzKS5hdHRyKCdocmVmJykpO1xuICAgICAgICB2YXIgZWxlbWVudElkID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgICAgIGlmICgkKGVsZW1lbnRJZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogJCggJC5hdHRyKHRoaXMsICdocmVmJykgKS5vZmZzZXQoKS50b3AgLSAxMFxuICAgICAgICAgICAgfSwgNzAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ25vIGVsZW1lbnQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xufSk7XG4iXX0=
